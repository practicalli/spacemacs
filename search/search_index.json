{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Practicalli Spacemacs","text":"<p>A practical guide to Spacemacs, a community driven Emacs configuration that provides all the power of Emacs and Vim.  The guide contains a section on Clojure development, the majority of the book is applicable to any language.</p> <p> </p> <p>Why Spacemacs Install Spacemacs Clojure Development</p> <p> Emacs has been a shining beacon of Free and Open Source software from the early 1970's and has grown to be a versatile set of development tools for all languages.  This long history has given  Emacs the ability to interact with almost every aspect of your digital life.</p> <p> Spacemacs is a community configuration providing a consistent and simple to learn approach to using all the features and power of  Emacs.   Spacemacs also integrates the raw text manipulation speed of Vim and multi-modal editing into the Emacs experience, enabling you to be even more productive.</p> <p></p>"},{"location":"#practicalli-spacemacs-configuration","title":"Practicalli Spacemacs configuration","text":"<p> practicalli/spacemacs-config contains a rich configuration for Clojure development and supporting tools, including support for Clojure LSP with minimally distracting UI elements.</p> Free Desktop XDG ConfigClassic Config <p><pre><code>git clone https://github.com/practicalli/spacemacs-config.git $XDG_CONFIG_HOME/spacemacs`\n</code></pre> The above command creates the <code>~/.config/spacemacs/init.el</code> that contains the configuration used in Practicalli Spacemacs book, all in one place.</p> <p>Set <code>SPACEMACSDIR</code> environment variable to the location of the configuration in the shell,  e.g. zsh, bash <pre><code>export SPACEMACSDIR=$XDG_CONFIG_HOME/spacemacs\n</code></pre></p> <p><pre><code>git clone https://github.com/practicalli/spacemacs-config.git $HOME/.spacemacs.d`\n</code></pre> The above command creates the <code>~/.spacemacs.d/init.el</code> that contains the configuration used in Practicalli Spacemacs book, all in one place.</p> <p> Practicalli Spacemacs config uses a Gruvbox Light theme and the simplified Doom mode line theme, which can be readily changed.</p> <p></p>"},{"location":"#navigate-the-book","title":"Navigate the book","text":"<p>Use the mouse or built-in key bindings to navigate the pages of the book</p> <ul> <li>P , , : go to previous page</li> <li>N , . : go to next page</li> </ul> <p>Use the search box to quickly find a specific topic</p> <ul> <li>F , S , / : open search dialog</li> <li>Down , Up : select next / previous result</li> <li>Esc , Tab : close search dialog</li> <li>Enter : follow selected result</li> </ul>"},{"location":"#sponsor-practicalli","title":"Sponsor Practicalli","text":"<p>All sponsorship recieved is used to maintain and further develop the Practicalli series of books and videos, although most of the work is still done with my own time and cost.</p> <p>Thank you to  Cognitect,  Nubank and a wide range of other  sponsors from the Clojure community for your continued support</p>"},{"location":"#creative-commons-license","title":"Creative commons license","text":"This work is licensed under a Creative Commons Attribution 4.0 ShareAlike License (including images &amp; stylesheets)."},{"location":"spacemacs-mini-cheatsheet/","title":"Spacemacs Mini Cheatsheet","text":"<p><code>Ctrl-g</code> two times will cancel most actions in Spacemacs</p> <p>Spacemacs Holy Mode: use <code>M-m</code> instead of <code>SPC</code> and <code>M-RET</code> instead of <code>,</code> in the Keys below</p>"},{"location":"spacemacs-mini-cheatsheet/#clojure","title":"Clojure","text":"Key action <code>, '</code> start the REPL <code>, e f</code> evaluate a function <code>, e ;</code> evaluate a function, add result as comment <code>, m b</code> show running REPL's (browse) <code>, t a</code> run all tests (use in test namespace)"},{"location":"spacemacs-mini-cheatsheet/#working-with-projects","title":"Working with projects","text":"Key action <code>SPC f f</code> find file <code>SPC p f</code> project specific find file <code>SPC p a</code> toggle between source and test files <code>SPC TAB</code> switch to previous buffer <code>SPC s s</code> swoop search in project <code>SPC b b</code> List current buffers <code>SPC b d</code> Kill current buffer <code>SPC number</code> Jump to window number"},{"location":"spacemacs-mini-cheatsheet/#using-vim","title":"Using Vim","text":"Key action <code>j</code> move cursor down one line <code>k</code> move cursor up one line <code>l</code> move cursor right one character <code>h</code> move cursor left one character <code>*</code> to next matching symbol name <code>$</code> end of current line <code>0</code> start of current line <code>%</code> jump to matching parens or next closed paren <code>gg</code> start of buffer <code>G</code> end of buffer <code>v</code> visual select <code>y</code> yank - copy selected text <code>y y</code> yank line - copy entire line <code>/</code> search forwards in current buffer"},{"location":"spacemacs-mini-cheatsheet/#changing-text","title":"Changing Text","text":"Key Action <code>i</code> insert - edit at cursor <code>a</code> append - edit after cursor <code>o</code> new line after cursor <code>O</code> new line before cursor <code>ESC</code> return to normal mode <code>x</code> delete character and add to kill ring <code>p</code> paste (put) <code>u</code> undo <code>Ctrl-r</code> redo <code>g c c</code> comment current line <code>D</code> delete to end of line <code>dd</code> delete the current line <code>dt</code> delete to a character (not including character)"},{"location":"spacemacs-mini-cheatsheet/#quit-restart","title":"Quit / restart","text":"Key action <code>SPS q r</code> Restart Spacemacs keeping window and buffer layouts <code>SPC q q</code> Quit Spacemacs"},{"location":"alternative-tooling/","title":"Alternative Tooling","text":"<p>Alternative tooling that can be used with Spacemacs but it not the main focus of this guide.</p>"},{"location":"alternative-tooling/leiningen/","title":"Leiningen","text":""},{"location":"alternative-tooling/leiningen/#leiningen","title":"Leiningen","text":"<p>Leiningen is the most commonly used build automation tool used to manage Clojure projects.  Install by saving the Leiningen install script and running it inside a terminal window.</p> <ul> <li>Install script for Linux &amp; MacOSX</li> <li>Install script for Microsoft Windows or use the Linux script from GitBash (recommended).</li> </ul> <p>Save the <code>lein</code> file to somewhere on your operating system path, eg <code>~/bin</code></p> <pre><code>chmod a+x ~/bin/lein\nlein\n</code></pre> <p>Now run this script on the command line</p> <pre><code>lein\n</code></pre> <p>The first time you run this script it downloads a Java archive file (JAR) of the latest version of Leiningen.  When you run the script again, you have a working Leiningen build tool.</p> <p>Running <code>lein</code> once installed will show you a list of available commands.</p>"},{"location":"alternative-tooling/leiningen/#clojure","title":"Clojure","text":"<p>If you are using Leiningen then there is no specific install for Clojure.</p> <p>Clojure comes as a library, a JAR file, managed by the build tool Leiningen just like any other dependency.</p> <p>When you create a project with Leiningen, the configuration is created in a file called <code>project.clj</code>.  Inside this <code>project.clj</code> is a <code>dependencies</code> entry where the version of clojure is specified along with any other dependencies.  Here is an example of a <code>project.clj</code> configuration with just Clojure as a dependency</p> <pre><code>(defproject project-name \"0.1.0-SNAPSHOT\"\n  :description \"FIXME: write description\"\n  :url \"http://example.com/FIXME\"\n  :license {:name \"Eclipse Public License\"\n            :url \"http://www.eclipse.org/legal/epl-v10.html\"}\n  :dependencies [[org.clojure/clojure \"1.11.1\"]])\n</code></pre> <p>Hint The Clojure library is very small (~3.6Mb) and Leiningen caches it and all other libraries locally in the same folder structure that Maven uses, eg  Clojure version 0.1.8 would be cached in <code>.m2/repository/org/clojure/clojure/1.11.1</code></p>"},{"location":"alternative-tooling/org-easy-templates/","title":"Org-mode Easy Templates","text":"<p>Additional configuration required</p> <p><code>(require 'org-tempo)</code> must be added to <code>dotspacemacs/user-config</code> in the <code>.spacemacs</code> file for Easy Templates to work.</p> <p>Org-mode easy templates provide source code block and other highlight sections.</p> <p><code>&lt;</code> followed by the template alias and then <code>TAB</code> will expand the block template.</p> Name Template Description s #+BEGIN_SRC ... #+END_SRC Adds a source block e #+BEGIN_EXAMPLE ... #+END_EXAMPLE q #+BEGIN_QUOTE ... #+END_QUOTE v #+BEGIN_VERSE ... #+END_VERSE c #+BEGIN_CENTER ... #+END_CENTER l #+BEGIN_LaTeX ... #+END_LaTeX LaTeX markup section L #+LaTeX: h #+BEGIN_HTML ... #+END_HTML HTML section H #+HTML: a #+BEGIN_ASCII ... #+END_ASCII A #+ASCII: i #+INDEX: line I #+INCLUDE: line <p>Add custom templates by adding to the <code>org-structure-template-alist</code> to Spacemacs configuration file.</p>"},{"location":"assets/images/social/","title":"Social Cards","text":"<p>Social Cards are visual previews of the website that are included when sending links via social media platforms.</p> <p>Material for MkDocs is configured to generate beautiful social cards automatically, using the colors, fonts and logos defined in <code>mkdocs.yml</code></p> <p>Generated images are stored in this directory.</p>"},{"location":"clojure-development/","title":"Clojure Development Overview","text":"<p>A  REPL workflow is highly encouraged for effective Clojure development.</p> <p>Start a REPL process for a Clojure project and connect an editor to the REPL, allowing code to be evaluated and results returned instantly. </p> Simplest Clojure CLI project <p>A <code>deps.edn</code> file containing an empty hash-map <code>{}</code> is the simplest Clojure CLI project recognised by Spacemacs Clojure layer (CIDER).</p> <p>The CLI install configuration includes the Clojure library as a dependency and the <code>src</code> directory added to the class path, so Clojure <code>.clj</code> files under the <code>src</code> directory can be used with the REPL.</p>"},{"location":"clojure-development/#project-templates","title":"Project Templates","text":"<p>Create a Clojure project from a template to include common libraries and code.  A template can be simple configuration with a single namespace or highly detailed and functional service.</p> <p> Practicalli Project Templates provide production-ready templates to build web services and APIs upon.</p> <p> Practicalli Project Templates</p> Emacs shell or Command Line terminal <p><code>SPC '</code> opens an Emacs popup buffer containing an shell terminal to run a command to create a Clojure project from a template.  </p> <p>Or open a terminal window from your operating system for a command line shell.</p>"},{"location":"clojure-development/#create-project-from-template","title":"Create Project from Template","text":"<p>Create a minimal project with Clojure CLI using the <code>practicalli/minimal</code> template and a project called practicalli/playground</p> <p>Create a minimal project</p> <pre><code>clojure -T:project/create :template practicalli/minimal :name practicalli/playground\n</code></pre> <p>Create a new project that provides the structure of a production ready web service with example API.</p> <p>Create a project for a Web Service with API</p> <pre><code>clojure -T:project/create :template practicalli/service :component donut :name practicalli/playground\n</code></pre>"},{"location":"clojure-development/#open-project-files","title":"Open Project files","text":"<p>Use Spacemacs menu to open files from the Clojure project</p> <p>Space p f lists all project files, type characters to narrow the list, Enter to select and open the file</p> <p>Space p q toggles between source code namespace and its related test namespace</p> <p>Space f f to navigate the file directory, Tab to complete file and directory names, Enter to open the selected file.  Create a new file by typing its name and pressing return, the file and any intermediate directory path will be created</p> <p>Space f D to permanently delete a file.</p> <p>Hint</p> <p> Clojure LSP automatically adds an <code>ns</code> form to define the namespace when creating a new Clojure file.</p>"},{"location":"clojure-development/#start-a-repl","title":"Start a REPL","text":"<p>Use the editor to start a REPL process, <code>cider-jack-in</code>.  Or start a REPl in a command line terminal and connect to that process from the editor, <code>cider-connect</code>.</p> CIDER jack-inCommand Line REPL <p>, ' (<code>sesman-start</code>) and select <code>cider-jack-in-clj</code> to start a REPL for the current Clojure project (also works without a project).</p> <p>Run a rich terminal UI using the <code>:repl/rebel</code> alias from  Practicalli Clojure-Cli-Config</p> <p>The <code>:repl/rebel</code> alias also runs an nREPL server for an editor to connect to.</p> <pre><code>clojure -M:repl/rebel\n</code></pre> <p> REPL Driven Development In Spacemacs</p>"},{"location":"clojure-development/#evaluate-code","title":"Evaluate code","text":"<p>Use the buffers containing source code files to effectively evaluate Clojure expressions.</p> <p>Results are returned instantly and shown in-line with the code.</p> <p><code>, e b</code> (<code>cider-eval-buffer</code>) to evaluate the the source code file in the current buffer.  Required namespaces are also loaded into the REPL.</p> <p><code>, e f</code> (<code>cider-eval-defun-at-point</code>) to evaluate the current expression from its top level (root).</p> <p><code>, e p f</code> as above with results pretty printed for human readability, opened in a new buffer.</p> <p> Evaluate Clojure Code</p>"},{"location":"clojure-development/#refactor","title":"Refactor","text":"<p>, r r (<code>lsp-rename</code>) to rename ns forms, def, defn and local names, updating any references to those names throughout the project.</p> <p>Renaming a namespace also renames the filename along with <code>requires</code> that include the namespace in other namespaces</p> <p><code>def</code> / <code>defn</code> expressions a namespace contains should be removed from the running REPL to prevent inconsistencies between the code and REPL.</p> <p>Remove defined names before renaming</p> <p>Keep the REPL state clean by removing the name of a function or value before it is renamed , e u (<code>cider-undef</code>) removes the current var from the REPL (uses nREPL undef command)</p> <p>Alternatively, <code>, q r</code> to restart the REPL after names have been changed or deleted.</p> <p>Remove Evaluated Vars </p>"},{"location":"clojure-development/project-configuration/","title":"Emacs Project configuration","text":"<p><code>.dir-locals.el</code> file can be used to configure how Emacs interacts with a project for a specific mode, e.g. <code>clojure-mode</code>.</p> <p>Configure which Clojure CLI aliases to include during Cider Jack-in and set values for CIDER variables and other tool used with a Clojure project, e.g. Figwheel-main, Shadow-cljs.</p> <p>Reference: CIDER configuration variables</p> <p>CIDER configuration variables list show the extent in which CIDER can be added configured within Emacs Init script or via <code>.dir-locals.el</code></p> <p>CIDER documentation - basic configuration describes many of the configuration variables available.</p>"},{"location":"clojure-development/project-configuration/#create-configuration","title":"Create Configuration","text":"<p>Space p e to create or edit a <code>.dir-locals.el</code> file in the current project or open a <code>.dir-locals.el</code> file, e.g. via Space f f</p> <p>Create a list containing a list of mode-specific configurations </p> <pre><code>((clojure-mode . ((emacs-variable . value))))\n</code></pre> <p> Syntax Explained </p> <p>Each mode-specific configuration is a list of lists, usually setting a variable used in Emacs or one of its packages.</p> <p>Clojure Mode - Use Clojure CLI</p> <p>Configure CIDER to use the Clojure CLI tool to run the REPL process during Jack-in. <pre><code>((clojure-mode . ((cider-preferred-build-tool . clojure-cli))))\n</code></pre></p> <p>Save the <code>.dir-locals.el</code> file and open a Clojure file to make the configuration available to the buffer displaying the file.</p> Force loading the .dir-locals.el configuration <p>The definitions in a <code>.dir-locals.el</code> are only ready when opening a file from the current project, so a file must be opened,  Space f f, or reloaded, Space b R (<code>revert-buffer</code>).  Switching to another buffer that has not been reverted (or re-opened) may not pick up the changes to the <code>.dir-locals.el</code> file.</p>"},{"location":"clojure-development/project-configuration/#clojure-cli-config","title":"Clojure CLI Config","text":"<p>Example of setting the Clojure CLI tool as the default Clojure tool (rather than Leiningen). </p> <p>Configure Clojure CLI aliases from project or user <code>deps.edn</code> file to be included when starting the REPL via Cider Jack-in.</p> <p>Clojure mode - default tool with dev &amp; test aliases</p> <pre><code>((clojure-mode . ((cider-preferred-build-tool . clojure-cli)\n                  (cider-clojure-cli-aliases . \":dev/env:env/test\"))))\n</code></pre> <p>Clojure CLI Aliases by Practicalli</p> <p>Practicalli Clojure CLI Config contains a wide range of aliases to use with Clojure CLI.</p> DEPRECATED: cider-clojure-cli-global-options <p><code>cider-clojure-cli-aliases</code> replaced <code>cider-clojure-cli-global-options</code> variable</p> <p>Clojure mode - Practicalli Reloaded REPL aliases</p> <pre><code>((clojure-mode . ((cider-preferred-build-tool . clojure-cli)\n                  (cider-clojure-cli-aliases . \":test/env:dev/reloaded\"))))\n</code></pre> <p>Clojure mode - Figwheel-main configuration</p> <p>A ClojureScript project using figwheel-main, Clojure CLI and hiding the display banner in the REPL browser <pre><code>((clojure-mode . ((cider-preferred-build-tool          . clojure-cli)\n                  (cider-clojure-cli-aliases           . \":fig:dev\")\n                  (cider-default-cljs-repl             . figwheel-main)\n                  (cider-figwheel-main-default-options . \"dev\")\n                  (cider-repl-display-help-banner      . nil))))\n</code></pre></p> Disable CIDER Jack-in dependencies <p>The <code>cider-jack-in</code> command injects dependencies via the <code>--deps</code> command line argument and includes the <code>--middleware</code> option for nrepl.  </p> <p>Cider Jack-in auto-injected configuration should work with a large majority of configurations, however, the CIDER configuration can be disabled if it affects desired project or user level aliases used with jack-in.</p> <p>Use the following <code>.dir-locals.el</code> configuration to only use the configuration defined in the <code>cider-clojure-cli-aliases</code> </p> <p>Disable Cider jack-in auto-injected configuration</p> <pre><code>((clojure-mode . ((cider-preferred-build-tool . clojure-cli)\n                  (cider-clojure-cli-aliases . \":alias/name\")\n                  (cider-jack-in-dependencies . nil)\n                  (cider-jack-in-nrepl-middlewares . nil)\n                  (cider-jack-in-lein-plugins . nil)\n                  (cider-clojure-cli-parameters . \"\"))))\n</code></pre> <p>NOTE: The aliases included via <code>cider-clojure-cli-aliases</code> must include the dependencies and middleware configuration reqiured to connect Cider to the REPL process, i.e. nrepl and cider-nrepl</p> <p>Clojure CLI Alias to start nREPL server &amp; Cider middleware</p> <pre><code>  ;; Headless REPL with nREPL server for Clojure Editor support\n  :repl/headless\n  {:extra-deps {nrepl/nrepl       {:mvn/version \"1.0.0\"}\n                cider/cider-nrepl {:mvn/version \"0.37.0\"}}\n   :main-opts  [\"--main\" \"nrepl.cmdline\"\n                \"--middleware\" \"[cider.nrepl/cider-middleware]\"]}\n</code></pre> <p>Practicalli Clojure CLI Config contains a wide range of aliases to use with Clojure CLI.</p>"},{"location":"clojure-development/project-configuration/#shared-and-local-config","title":"Shared and local config","text":"<p>Assuming a team agrees to keep a shared <code>.dir-locals.el</code> configuration in a project repository, each developer can add their own configuration in a <code>.dir-locals-2.el</code> file.</p> <p>The <code>.dir-locals-2.el</code> will be loaded in addition to <code>.dir-locals.el</code>.</p> <p>Keep tooling config in a separate repository</p> <p>Tooling configuration is generally not project specific, so if sharing that configuration in a team simply create a repository for tooling. Or add tooling configuration to the project documentation.</p>"},{"location":"clojure-development/project-configuration/#projectile","title":"Projectile","text":"<p><code>.dir-locals.el</code> is also useful for setting Projectile configuration, e.g. the project-type.  This is especially useful for monorepo or nested projects.</p> Set as Global options <p>Variables can also be added using <code>(setq )</code> to the <code>dotspacemacs/user-config</code> section of <code>.spacemacs</code> to set a default variable for all projects.  The <code>.dir-locals.el</code> file will over-ride the global settings. <code>(setq (cider-preferred-build-tool 'clojure-cli))</code></p>"},{"location":"clojure-development/project-configuration/#syntax-explained","title":"Syntax Explained","text":"<p>Elisp uses a two-element tuples called cons cells, create using the cons function, or with a dotted-pair notation.  This is loosely equivalent to key-value pairs in a Clojure hash-map.</p> <p>cons cell example</p> <pre><code>(cons \"config-variable-name\" \"custom-value\")\n</code></pre> <p>dotted-pair example</p> <pre><code>'(\"config-variable-name\" . \"custom-value\")\n</code></pre> <p>Multiple key-value pairs are defined as a collection of these cons cells in a list.</p> <pre><code>((\"config-variable-name\" . \"custom-value\")\n (\"config-variable-name2\" . \"custom-value2\"))\n</code></pre> <p><code>.dir-locals.el</code> is a list of dotted-pairs for each major mode.  The value for the major mode is another list of dotted pairs which may contain one or more dotted-pairs.</p> <pre><code>((clojure-mode . ((config-var1 . \"custom-value1\")\n                  (config-var2 . \"custom-value2\")))\n (org-mode . ((config-var3 . \"custom-value3\"))))\n</code></pre> <p>The configuration variables are set when a file is open in a specific Emacs major mode.</p> Avoid using <code>nil</code> for major mode <p>Use the major mode name rather than <code>nil</code> to ensure the variable is only applied to the specific mode.  <code>nil</code> applies the variables in all buffers regardless of their major mode, potentially leading to conflicts.</p>"},{"location":"clojure-development/project-configuration/#custom-code","title":"Custom code","text":"<p><code>eval</code> variable will evaluate custom code specified when a variable is used. For example, if using a new type of ClojureScript REPL that CIDER does not currently know, then custom elisp code can be added to make CIDER do the required actions.</p> <pre><code>((cider-mode . ((eval . (cider-register-cljs-repl-type 'new-cljs-repl \"(custom-elisp-function-for-new-cljs-repl)\"))\n                (cider-default-cljs-repl . new-cljs-repl))))\n</code></pre>"},{"location":"clojure-development/project-configuration/#further-examples","title":"Further examples","text":"<p>The chui ClojureScript test runner project uses a .dir-locals.el file with example custom code.  One custom expression ensures nrepl middleware is injected into the environment so CIDER can connect.  The other custom expression sets the indent size.</p> <pre><code>((clojure-mode . ((cider-clojure-cli-aliases     . \":env/dev:env/test\")\n                  (cider-custom-cljs-repl-init-form     . \"(user/cljs-repl)\")\n                  (cider-default-cljs-repl              . custom)\n                  (cider-preferred-build-tool           . clojure-cli)\n                  (cider-redirect-server-output-to-repl . t)\n                  (cider-repl-display-help-banner       . nil)\n                  (clojure-toplevel-inside-comment-form . t)\n                  (eval . (progn\n                            (make-variable-buffer-local 'cider-jack-in-nrepl-middlewares)\n                            (add-to-list 'cider-jack-in-nrepl-middlewares \"shadow.cljs.devtools.server.nrepl/middleware\")))\n                  (eval . (define-clojure-indent\n                            (assoc 0)\n                            (ex-info 0))))))\n</code></pre>"},{"location":"clojure-development/project-configuration/#reference","title":"Reference","text":"<ul> <li>CIDER list of configuration variables</li> <li>Hard CIDER: Project specific configuration</li> <li>Emacs Wiki: per-directory local variables</li> <li>Project level Emacs config with .dir-locals.el - lambdaisland</li> </ul> <p>Also review directory variables in the Emacs the info pages</p> <pre><code>(info \"(emacs) Directory Variables\").\n</code></pre>"},{"location":"clojure-development/project-configuration/monorepo-nested-projects/","title":"Monorepo and nested projects","text":"<p>A monorepo is a collection related project directories within one source control repository.</p> <p>As the monorepo root is not the root of a Clojure project, <code>SPC p a</code> the <code>projectile-toggle-between-implementation-and-test</code> does not know the type of project.  A <code>.dir-locals.el</code> configuration file can be used to define the type of projects the monorepo contains.</p> <p><code>SPC p e</code> creates a <code>.dir-locals.el</code> file in the root of the project.</p> <p>Type <code>projectile-project-type</code> and select that configuration option.</p> <p>Type <code>clojure-cli</code> for the value (or <code>lein-test</code> for Leiningen projects)</p> <p><code>SPC f s</code> to save the file.</p> <p>The <code>.dir-locals.el</code> file should now contain the following</p> <pre><code>((clojure-mode . ((projectile-project-type . clojure-cli))))\n</code></pre> <p>practicalli/exercism-clojure-guides is an example of a monorepo.</p> <p>Clojure project types</p> <p><code>clojure-cli</code> works for Clojure CLI projects and <code>lein-test</code> for Leiningen project.  If you have mixed projects, use <code>clojure-cli</code> and place a <code>deps.edn</code> file containing an empty hash-map, <code>{}</code>.  Select Leiningen when running the <code>cider-jack-in-*</code> commands.</p> <p>Clojure project types for projectile are define in projectile.el of the projectile project.</p>"},{"location":"clojure-repl/","title":"Clojure REPL","text":"<p>The Clojure REPL is a live environment in which Clojure code runs, it is the same process for both development and production.</p> <p>A REPL user interface (UI), a prompt or Clojure editor, provides instant feedback when code is evaluated. Any amount of code can be evaluated, from a single expression to multiple namespaces.</p> <p>Expressions such as function definitions can be re-evaluated, changing how the system behaves without having to restart anything.</p> <p>The REPL provides the Clojure developer a fast and effective tool for developing the right data models and algorithms that define the system.</p> <p></p>"},{"location":"clojure-repl/#editor-connected-repl","title":"Editor Connected REPL","text":"<p>All Clojure editors connect to an external run REPL process, either connecting to an existing process (connect) or starting a new process from the editor (jack-in).</p> Approaches Description connect connecting to a local or remote REPL process - robust approach supporting rich REPL startup configurations and collaboration jack-in start an external REPL from the editor, injecting editor specific configuration and then connecting"},{"location":"clojure-repl/#quick-start","title":"Quick start","text":"<p>Open or select a Clojure buffer, an <code>.edn</code>, <code>.clj</code>, <code>.cljc</code> or <code>.cljs</code> file.</p> Key bindings Description , ' or , m s <code>sesman-start</code> menu to start or connect to a REPL <p>Select from one of the following types of REPL's * <code>cider-connect-clj</code> and <code>cider-jack-in-clj</code> for Clojure on the JVM * <code>cider-connect-cljs</code> and <code>cider-jack-in-cljs</code> for a ClojureScript REPL * <code>cider-jack-in-clj&amp;cljs</code> to start a REPL of both types (full stack)</p> <p>Once the REPL starts, evaluate expressions using the source code buffer.</p> <p>Eval namespace or buffer to load Clojure into CIDER</p> <p>, e b to evaluate the current buffer and load Clojure core into CIDER, making the documentation and other Cider tools fully operational.  Or evaluate any valid <code>ns</code> form in the project.</p>"},{"location":"clojure-repl/#cider-workflow-overview","title":"CIDER workflow overview","text":"<p>Space p f open a file from the current project (Space f f  if not in a project)</p> <p>, ' or , m s and start a Clojure REPL using <code>cider-jack-in-clj</code> (may take a few seconds if there are dependencies to download)</p> <p>, e b evaluate the current buffer (also loads Clojure core into CIDER)</p> <p>, e f evaluate the current top-level expression and show the result inline</p> <p>, e e evaluate the previous expression and show the result inline (useful for nested expressions)</p> <p>, e ++semi-colon++ evaluate the current Clojure expression and print the result as a comment</p> <p>, e f evaluate the current top-level expression and pretty-print the result in a separate buffer</p> <p>Space p a toggle between matching source code and unit test buffers</p> <p>, t a run all test functions in the REPL using the cider test runner (evaluate changed test &amp; source code first)</p> <p>, m q r to restart the REPL (i.e. after adding a library as a dependency to the project)</p> <p>Documentation enabled after evaluating a namespace</p> <p>, h h  shows the documentation for a function under the cursor, but only if a namespace has been evaluated first.  This applies to <code>clojure.core</code> functions as well as project and library specific functions.</p>"},{"location":"clojure-repl/clear-repl-buffer/","title":"Clear REPL Buffer","text":"<p>When large results are returned from Clojure code they can eventually cause a slow-down of Emacs. Clearing the REPL buffer can restore Emacs to its usual speedy self.</p> <p>Auto-trimming of the REPL buffer automatically deletes the oldest output, based on a given size.</p> <p>Use cider-inspector and Source Code buffers</p> <p><code>, d v</code> displays values in the <code>cider-inspector</code> allowing navigation of nested data structures and paging through large data sets. Portal data navigation tool is an external tool that also provides navigation and paging of data as well as other data visualisation.</p> <p>Evaluation in a Clojure source code buffer are limited to 100 results so avoids potential slow-down from large results.  Use <code>, e p</code> menu to pretty print the results of evaluations in a temporary buffer.</p>"},{"location":"clojure-repl/clear-repl-buffer/#clear-the-repl-buffer-from-any-buffer","title":"Clear the REPL buffer from any buffer","text":"<p>, s l to remove the output of the last evaluation from the REPL buffer, <code>spacemacs/cider-find-and-clear-repl-buffer</code>.</p> <p>, s L clear all the output from the entire REPL session, <code>cider-find-and-clear-repl-output</code>.</p>"},{"location":"clojure-repl/clear-repl-buffer/#in-the-repl-buffer","title":"In the REPL buffer","text":"<p>, s l to switch to the REPL buffer</p> <p>In Evil Insert mode use the , menu to call commands to clear the REPL buffer:</p> <p><code>clear</code> to clear the whole buffer history</p> <p><code>clear-output</code> to clear the result of the last evaluation</p>"},{"location":"clojure-repl/clear-repl-buffer/#configure-auto-trimming","title":"Configure auto-trimming","text":"<p>Auto-trimming is not enabled by default in CIDER, it must be set with a specific value.</p> <p>Add the layer variable <code>cider-repl-buffer-size-limit</code> to have all Clojure projects auto-trim the REPL</p> <pre><code>     (clojure :variables\n              clojure-enable-clj-refactor t\n              clojure-enable-linters 'clj-kondo\n              clojure-toplevel-inside-comment-form t\n              cider-overlays-use-font-lock t\n              cider-repl-buffer-size-limit 100)\n</code></pre> <p>Alternatively, add the <code>cider-repl-buffer-size-limit</code> to a <code>.dir-locals.el</code> to affect just one Clojure project</p> <pre><code>((clojure-mode . ((cider-repl-buffer-size-limit . 100))))\n</code></pre> <p><code>revert-buffer</code> on a Clojure project to ensure Emacs has loaded the <code>.dir-locals.el</code></p>"},{"location":"clojure-repl/clojurescript-repl/","title":"ClojureScript projects","text":"<p>Practicalli ClojureScript covers the development of websites and single page apps (SPA) with figwheel-main build tool and the react-style reagent library</p> <p>Create a figwheel-main project and use <code>cider-jack-in-cljs</code> to start REPL driven development.</p> Rich Terminal REPL &amp; Editor file save rebuild <p>Using an Editor jack-in tool is arguably the easiest approach, as it connects the Editor to the REPL process so code can be evaluated in the Editor.</p> <p><code>clojure -M:figwheel/env:build/dev</code> command will run a ClojureScript REPL providing a Rebel rich terminal UI.  An nREPL server will not be running, so the editor is not able to connect to the REPL.  However, when code is saved, Figwheel automatically updates the build and pushes changes to the browser window containing the application being developed.</p> <p>It may be possible to use a custom <code>user</code> namesapce to run nREPL and Piggieback to create a server which a Clojure editor can connect too.  A custom nREPL and Piggieback middlware library might also work.  Please get in touch if you have a working configuration for this approach.</p>"},{"location":"clojure-repl/clojurescript-repl/#figwheel-main-project","title":"Figwheel-main project","text":"<p> Practicalli Clojure CLI Config defines the <code>:project/create</code> alias which provides several templates to start ClojureScript projects using Figwheel-main.</p> <ul> <li><code>:practicalli/landing-page</code> a simple web page with common content defined in a hash-map and rendered with reagent components, styled by Bulma.io CSS</li> <li><code>:practicalli/single-page-app</code> atom managed app-state with content rendered by reagent components</li> </ul> <p>In a terminal, create a ClojureScript projects using the <code>practicalli/sigle-page-app</code> template</p> <pre><code>clojure -T:project/create :practicalli/single-page-app :name practicalli/tictactoe\n</code></pre> <p>A new project is created in the tictactoe directory containing a ClojureScript projects including Reagent libraries and using Figwheel-main REPL driven development.</p>"},{"location":"clojure-repl/clojurescript-repl/#repl-jack-in","title":"REPL jack-in","text":"<p>Develop the code and interact with the REPL state using source code buffers in the editor.</p> <p><code>SPC f f</code> to open a Clojure file from the project, e.g. <code>tictactoe/deps.edn</code></p> <p><code>, m s</code> to launch sesman (session manager) start</p> <p>Choose <code>cider-connect-cljs</code> to start the REPL and connect to it from the Editor automatically</p> <p> </p> <p>Figwheel compiles the ClojureScript code and opens a browser window showing the application.</p> <p>Saving changes in the code triggers figwheel to rebuild the project and inject updates into the browser window</p> Modify the Cider jack-in command <p><code>SPC u , m s</code> will show the full command in the mini-buffer once cider-jack-in-cljs is selected.</p> <p> </p> <p>The command can be 'carefully' edited in the mini-buffer, e.g. to change the Clojure CLI aliases used (defined at the end of the command)</p> <p>NOTE: do not remove the <code>:cider/nrepl</code> alias otherwise CIDER will fail to work correctly (unless replaced with an alias containing the same configuration)</p>"},{"location":"clojure-repl/clojurescript-repl/#restart-or-shutdown","title":"Restart or Shutdown","text":"<p><code>, m q r</code> to restart Figwheel (<code>sesman-quit</code>)</p> <p><code>, m q q</code> to shutdown Figwheel and close the REPL (<code>sesman-quit</code>)</p>"},{"location":"clojure-repl/clojurescript-repl/#project-configuration","title":"Project Configuration","text":"<p>The Practicalli templates contain a <code>.dir-locals.el</code> project configuration for Emacs which sets host, port, REPL typle and build to start.</p> <pre><code>((clojurescript-mode . ((cider-preferred-build-tool          . clojure-cli)\n                        (cider-clojure-cli-aliases           . \":figwheel/env\")\n                        (cider-default-cljs-repl             . figwheel-main)\n                        (cider-figwheel-main-default-options . \"dev\")\n                        (cider-repl-display-help-banner      . nil))))\n</code></pre> Manual Configuration Prompts <p>Without the <code>.dir-local.el</code> command the following extra prompts are shown</p> <p>Confirm the host name (locahost by default)</p> <p></p> <p>Confirm the port number for tictactoe project</p> <p></p> <p>Confirm figwheel-main build tool as the REPL type</p> <p></p> <p>Confirm dev build configuration</p> <p></p> <p><code>SPC b m</code> to open the message buffer which shows the output from nREPL server.</p> <p></p>"},{"location":"clojure-repl/component-lifecycle/","title":"Component Lifecycle","text":"<p>Clojure has several library to manage the lifecycle of components that make up the application, especially those components with state. Components can be started and stopped in a specific order, ensuring the system remains in a good state.</p> <p>Components can be started and stopped without having to stop the Clojure REPL process.</p> <p>Donut System Integrant Mount Component</p>"},{"location":"clojure-repl/component-lifecycle/#cider-refresh","title":"cider-refresh","text":"<p><code>cider-refresh</code> uses clojure.tools.namespace.repl to update the state of the Clojure REPL, removing stale function definitions and loading changed code into the REPL.</p> <p>CIDER provides two variables to call a fully qualified function before and after running cider-refresh, typically used to stop and start system components cleanly.</p> <ul> <li><code>cider-ns-refresh-before-fn</code> </li> <li><code>cider-ns-refresh-after-fn</code> </li> </ul>"},{"location":"clojure-repl/component-lifecycle/#project-configuration","title":"Project Configuration","text":"<p>Create a <code>.dir-locals.el</code> file that calls the component lifecycle functions when using <code>cider-refresh</code>.</p> <p>Space p e to open a <code>.dir.locals.el</code> in the current project, creating the file if it does not exist.</p> <p>During development call the <code>reset</code> function to stop components, clean the namespace and start all components again.</p> <pre><code>((clojure-mode . ((cider-ns-refresh-before-fn . \"system-repl/reset\"))))\n</code></pre> <p>Space f s to save the file.  Refresh a buffer from the project or open a new file to trigger the reading of the <code>.dir-locals.el</code> configuration by Emacs.</p> <p>Alternatively, if a namespace refresh is not required, configure the <code>.dir-local.el</code> file to call <code>stop</code> then <code>start</code>.</p> <pre><code>((clojure-mode . ((cider-ns-refresh-before-fn . \"system-repl/stop\")\n                  (cider-ns-refresh-after-fn . \"system-repl/start\"))))\n</code></pre> <p>This code calls the <code>stop</code> function from the component lifecycle library at the start of the <code>cider-refresh</code> function.  At the end of <code>cider-refresh</code>, the <code>start</code> function is called to restart all the components in the defined order in the project.</p> <p>Prevent cider-ns-refresh calling component lifecycle functions</p> <p>Space u - 1 , en calls <code>cider-ns-refresh</code> but prevents the refresh functions defined in <code>cider-ns-refresh-before-fn</code> and <code>cider-ns-refresh-after-fn</code> from being invoked.</p>"},{"location":"clojure-repl/component-lifecycle/#reloaded-repl-workflow","title":"Reloaded REPL Workflow","text":"<p> Practicalli Reloaded REPL Workflow provides tools to further enhance and optomise the Clojure REPL workflow.</p> <p>Create custom REPL startup code that adds functions to manage components via the <code>dev/system-repl.clj</code> file.</p> <p>The <code>service-repl</code> namespace is required by the <code>user</code> namespace in  <code>dev/user.clj</code> file, making the service-repl code load automatically when using the <code>-M:dev/env</code> alias to start the REPL.</p> Donut SystemMountIntegrantComponent <p>Define a system which contains one or more component definitions. A component definition may include references to other components and signal handlers that specify behavior.</p> Example Donut system with HTTP server, logging and Routing practicalli/gameboard/system.clj<pre><code>(ns practicalli.gameboard.system\n  \"Service component lifecycle management\"\n  (:require\n   ;; Application dependencies\n   [practicalli.gameboard.router :as router]\n\n   ;; Component system\n   [donut.system :as donut]\n\n   ;; System dependencies\n   [org.httpkit.server     :as http-server]\n   [com.brunobonacci.mulog :as mulog]))\n\n;; ---------------------------------------------------------\n;; Donut Party System configuration\n\n(def main\n  \"System Component management with Donut\"\n  {::donut/defs\n   ;; Option: move :env data to resources/config.edn and parse with aero reader\n   {:env\n    {:http-port 8080\n     :persistence\n     {:database-host (or (System/getenv \"POSTGRES_HOST\") \"http://localhost\")\n      :database-port (or (System/getenv \"POSTGRES_PORT\") \"5432\")\n      :database-username (or (System/getenv \"POSTGRES_USERNAME\") \"clojure\")\n      :database-password (or (System/getenv \"POSTGRES_PASSWORD\") \"clojure\")\n      :database-schema (or (System/getenv \"POSTGRES_SCHEMA\") \"clojure\")}}\n\n    ;; mulog publisher for a given publisher type, i.e. console, cloud-watch\n    :event-log\n    {:publisher\n     #::donut{:start (fn mulog-publisher-start\n                       [{{:keys [publisher]} ::donut/config}]\n                       (mulog/log ::log-publish-component\n                                  :publisher-config publisher\n                                  :local-time (java.time.LocalDateTime/now))\n                       (mulog/start-publisher! publisher))\n\n              :stop (fn mulog-publisher-stop\n                      [{::donut/keys [instance]}]\n                      (mulog/log ::log-publish-component-shutdown :publisher instance :local-time (java.time.LocalDateTime/now))\n                      ;; Pause so final messages have chance to be published\n                      (Thread/sleep 250)\n                      (instance))\n\n              :config {:publisher {:type :console :pretty? true}}}}\n\n    ;; HTTP server start - returns function to stop the server\n    :http\n    {:server\n     #::donut{:start (fn http-kit-run-server\n                       [{{:keys [handler options]} ::donut/config}]\n                       (mulog/log ::http-server-component\n                                  :handler handler\n                                  :port (options :port)\n                                  :local-time (java.time.LocalDateTime/now))\n                       (http-server/run-server handler options))\n\n              :stop  (fn http-kit-stop-server\n                       [{::donut/keys [instance]}]\n                       (mulog/log ::http-server-component-shutdown\n                                  :http-server-instance instance\n                                  :local-time (java.time.LocalDateTime/now))\n                       (instance))\n\n              :config {:handler (donut/local-ref [:handler])\n                       :options {:port  (donut/ref [:env :http-port])\n                                 :join? false}}}\n\n     ;; Function handling all requests, passing system environment\n     ;; Configure environment for router application, e.g. database connection details, etc.\n     :handler (router/app (donut/ref [:env :persistence]))}}})\n\n;; End of Donut Party System configuration\n;; ---------------------------------------------------------\n</code></pre> Define <code>system-repl</code> namespace to start, stop and restart the system. dev/system_repl.clj<pre><code>(ns system-repl\n  \"Tools for REPl workflow with Donut system components\"\n  (:require\n   [donut.system :as donut]\n   [donut.system.repl :as donut-repl]\n   [donut.system.repl.state :as donut-repl-state]\n   [practicalli.gameboard.system :as system]))\n\n;; Define the system to manage via the REPL\n(defmethod donut/named-system :donut.system/repl\n  [_] system/main)\n\n(defn start\n  \"Start system with donut, optionally passing a named system\"\n  ([] (donut-repl/start))\n  ([system-config] (donut-repl/start system-config)))\n\n(defn stop\n  \"Stop the currently running system\"\n  []  (donut-repl/stop))\n\n(defn restart\n  \"Restart the system with donut repl,\n  Uses clojure.tools.namespace.repl to reload namespaces\n  `(clojure.tools.namespace.repl/refresh :after 'donut.system.repl/start)`\"\n  [] (donut-repl/restart))\n\n(defn system\n  \"Return: fully qualified hash-map of system state\"\n  [] donut-repl-state/system)\n</code></pre> <p>Define a <code>system-repl.clj</code> file with <code>start</code>, <code>stop</code> and <code>restart</code> functions that manage the lifecycle of mount components.  </p> <p>The reset function that calls <code>stop</code>, refreshes the namespaces so that stale definitions are removed and starts all components (loading in any new code).</p> Mount system  dev/system-repl.clj<pre><code>(defn start []\n  (with-logging-status)\n  (mount/start #'practicalli.gameboard/environment\n               #'practicalli.gameboard/persistence\n               #'practicalli.gameboard/api)\n  :ready)\n\n(defn stop \n  \"Stops all component, remove all non-persistent state.\"\n  [] (mount/stop))\n\n(defn reset\n  \"Stop all states defined by defstate.\n  Reload modified source files and restart all states\"\n  []\n  (stop)\n  (namespace/refresh :after 'dev/go))\n</code></pre> <p>Integrant REPL for Clojure Web Service</p>"},{"location":"clojure-repl/component-lifecycle/#reference","title":"Reference","text":"<ul> <li>Easily Reloading your Clojure Project in Spacemacs</li> <li>Reloading Woes - Lambda island</li> </ul>"},{"location":"clojure-repl/connect-to-remote-repl/","title":"Connect to Remote REPL","text":"<p>Using a remote REPL can provide a collaborative coding environment as well as a means for working within remote environments (docker images, cloud servers, etc).</p> <p>Running a remote REPL can also provide longevity to the process, as many clients (editors, ssh terminals) can connect to the REPL over time, disconnecting from the running process without interrupting the process.  This provides a very resilient way of running a REPL.</p> <p>practicalli/clojure-deps-edn provides many aliases to configure a REPL to work with other community tools.  These aliases are easier to manage when running a REPL outside of an editor which automatically injects its own configuration.  This configuration can be installed into the remote environment and ideally added into the server build process.</p> <p></p>"},{"location":"clojure-repl/connect-to-remote-repl/#establish-a-remote-environment","title":"Establish a remote environment","text":"<p>A small Virtual Private Server (VPS) is enough for a remote Clojure environment.</p> Micro VPS on Google Cloud <p>How to set up a f1-micro VPS on Google Cloud</p> <ul> <li>Install Clojure CLI tools and practicalli/clojure-deps-edn configuration</li> <li>Git Client</li> <li>SSH server</li> <li>Set up user account</li> <li>Generate a permissions file, <code>.pem</code> from the server (TODO: how to generate .pem files)</li> </ul> Services vCore RAM SSD Transfer Monthly Google Cloud f1-micro VPS Ionos 1 512Mb 10Gb \u00a31 Amazon Lightsail 1 512Mb 20Gb $3.50 Time4VPS 1 x 2.6GHz 2Gb 20Gb 2TB E3.99"},{"location":"clojure-repl/connect-to-remote-repl/#configure-local-ssh-connection","title":"Configure local SSH connection","text":"<p>Save the <code>.pem</code> file to <code>~/.ssh/</code> directory (or your preferred location).</p> <p>Edit the <code>~/.ssh/config</code> file (create the file if needed) and add a host configuration for the remote server.</p> <p>Add the IP address of the remote server to <code>HostName</code>.</p> <p>Use the <code>LocalForward</code> for the port used by the nREPL server.</p> <pre><code>Host remote-clojure-server\n  HostName 99.99.99.99\n  IdentityFile ~/.ssh/remote-server.pem\n  User ubuntu\n  PasswordAuthentication yes\n  LocalForward 7888 localhost:7888\n  Port 22\n</code></pre>"},{"location":"clojure-repl/connect-to-remote-repl/#configure-emacs-to-listen-to-nrepl-port","title":"Configure Emacs to listen to nREPL port","text":"<p>Connect to a Clojure REPL that was started with nREPL and Cider middleware, e.g. <code>:middleware/cider-clj</code> from <code>practicalli/clojure-deps-edn</code></p> Spacemacs <p>Space f e d to open the Spacemacs configuration and add the following code to the <code>dotspacemacs/user-config</code> section Spacemacs Configuration - dotspacemacs/user-config<pre><code>  (setq nrepl-use-ssh-fallback-for-remote-hosts t)\n</code></pre></p> <p>=== Emacs     Edit the Emacs <code>init.el</code> file and add the following configuration.</p> <pre><code>  (setq nrepl-use-ssh-fallback-for-remote-hosts t)\n</code></pre>"},{"location":"clojure-repl/connect-to-remote-repl/#start-repl-on-remote-server","title":"Start REPL on remote server","text":"<p>The majority of Clojure aware editors can connect to an external REPL using the nREPL protocol.  Emacs CIDER, VSCode Calva and NeoVim Conjure all use nREPL and the Cider middleware.</p> <p>practicalli/clojure-deps-edn defines the <code>:middleware/clj</code> alias that includes several libraries required for the nREPL connection between CIDER and the REPL.</p> <p>SSH into the remote server.</p> <p>Clone an existing project with Git, or create a new project with <code>:project/new</code> alias</p> <p>Change to a Clojure project</p> <p>Start the REPL using the cider middleware on the same port as defined in <code>LocalForward</code> in the SSH configuration, using the <code>-p</code> to set the port number.</p> <p>Open a terminal in the root directory of a Clojure project and run a non-interactive REPL process</p> <pre><code>clojure -M:middleware/cider-clj -p 7888\n</code></pre> <p>The REPL will start along with an nREPL server, showing the connection details.</p> <p></p> <p>An <code>.nrepl-port</code> file is created in the root of the Clojure project, containing the port number the nREPL server is listening upon.</p> <p>Using a REPL terminal UI</p> <p>For a rich terminal REPL experience, start the REPL with rebel readline as well as nREPL and CIDER libraries. <pre><code>clojure -M:repl/rebel-nrepl\n</code></pre></p>"},{"location":"clojure-repl/connect-to-remote-repl/#connect-via-tramp","title":"Connect via Tramp","text":"<p>Tramp enables Spacemacs to be used to open remote files as if they were local files, using an SSH connection to the remote server.</p> <p><code>SPC f f</code> to open a file and enter an ssh address to access the Clojure project files on the remote server</p> <pre><code>/ssh:username@remote-server-name:~/project/deps.edn\n</code></pre> <p><code>, '</code> to call <code>sesman-start</code> and choose <code>cider-connect-clj</code> which should find the remote host and port</p> <p></p> <p>Confirm the host name, typically <code>localhost</code> when running the REPL locally</p> <p></p> <p>Confirm the port number the nREPL server is listening too</p> <p></p> <p>Spacemacs is now connected to the REPL and Clojure code can be evaluated in the source code buffers.</p>"},{"location":"clojure-repl/connect-to-repl/","title":"Connect to a Clojure REPL","text":"<p>Starting a REPL in a terminal is the most resilient way of running a REPL, as if the editor has to be restarted or crashes, the REPL is not affected.</p> <p>practicalli/clojure-deps-edn provides many aliases to configure a REPL to work with other community tools (e.g. data ).  These aliases are easier to manage when running a REPL outside of an editor which automatically injects its own configuration.</p>"},{"location":"clojure-repl/connect-to-repl/#start-a-repl-in-the-terminal","title":"Start a REPL in the terminal","text":"<p>The <code>clojure</code> command and <code>clj</code> wrapper both start a REPL with a basic terminal interface, <code>clj</code> also provides command history.</p> <p><code>:repl/headless</code> alias from practicalli/clojure-deps-edn provides a rich terminal UI and libraries required for editors to connect via nREPL (network REPL protocol).</p> <p>Open a terminal in the root directory of a Clojure project and run a non-interactive REPL process</p> <pre><code>clojure -M:repl/headless\n</code></pre> <p>The REPL will start along with an nREPL server, showing the connection details.</p> <p></p> <p>An <code>.nrepl-port</code> file is created in the root of the Clojure project, containing the port number the nREPL server is listening upon.</p> Headless terminal REPL  <p><code>:repl/headless</code> alias from practicalli/clojure-deps-edn includes libraries required for the nREPL connection between CIDER and the REPL.  A headless session is useful for remote REPL processes on other servers or when interaction is only done via the editor. <pre><code>clojure -M:repl/rebel-nrepl\n</code></pre></p>"},{"location":"clojure-repl/connect-to-repl/#connect-to-repl-from-cider","title":"Connect to REPL from CIDER","text":"<p>Space f f to open a file from the Clojure project on the remote server.</p> <pre><code>ssh remote\n</code></pre> <p><code>, '</code> to call <code>sesman-start</code> and choose <code>cider-connect-clj</code> which should find the right host and port</p> <p></p> <p>Confirm the host name, typically <code>localhost</code> when running the REPL locally</p> <p></p> <p>Confirm the port number the nREPL server is listening too</p> <p></p> <p>Spacemacs is now connected to the REPL and Clojure code can be evaluated in the source code buffers.</p>"},{"location":"clojure-repl/connect-to-repl/#common-repl-start-restart-keybindings","title":"Common REPL start / restart keybindings","text":"Key bindings Command <code>, '</code> or <code>, m s</code> start a REPL, selecting the type (<code>sesman-start</code>) <code>, m b</code> browse active REPL's  (<code>sesman-browse</code>) <code>, m i</code> show information about the current REPL  (<code>sesman-info</code>) <code>, m q r</code> restart the REPL, quit and jack-in.  (<code>sesman-restart</code>) <code>, m q q</code> quit the REPL (<code>sesman-quit</code>) <code>, e n</code> refresh stale code and load new code into the REPL (<code>cider-ns-refresh</code>) <code>, e N</code> force reload the current namespaces in the REPL (<code>cider-ns-reload</code>)"},{"location":"clojure-repl/jack-in-to-repl/","title":"Cider Jack-in","text":"<p>, ' or , m s (<code>sesman-start</code>) and select a <code>cider-jack-in</code> command to start a REPL process</p> <p>Cider Jack-in will start a new REPL process and automatically connect to that process from the editor.</p> <p>Jack-in will call either the <code>clojure</code> or <code>lein</code> command to start the REPL process, based on what project configuration files are found (<code>project.clj</code> for Leiningen and <code>deps.edn</code> for Clojure CLI) in the root of the current project. A prompt is displayed if there are multiple project configuration files to choose from.</p> <p>Jack-in ensures the REPL process is started with the libraries and middleware required by CIDER.  Then the rest of the jack-in process is the same as connect, but done so automatically.</p>"},{"location":"clojure-repl/jack-in-to-repl/#jack-in-configuration","title":"Jack-in Configuration","text":"<p>Space u , m s opens the jack-in command in the minibuffer which can be edited to customise how the Clojure REPL process starts, e.g. adding Clojure CLI aliases to include libraries and tools for development.</p> <p>Clojure CLI aliases are added between the <code>-M</code> execution flag and the <code>:cider/nrepl</code> alias name.</p> <p> </p>"},{"location":"clojure-repl/jack-in-to-repl/#deconstruct-jack-in-command","title":"Deconstruct jack-in command","text":"<p><code>cider-jack-in</code> commands include the dependencies to start a REPL process which the Emacs Cider process can connect to, using nREPL.</p> <p><code>-Sdeps</code> adds the required library dependencies to start an nREPL server (<code>nrepl/nrepl</code>) and connect to that nREPL server from Cider (<code>cider/cider-nrepl</code>).</p> <p><code>:aliases</code> defines the <code>:cider/nrepl</code> alias, defining that the <code>clojure</code> command should run <code>nrepl.commandline/-main</code> to start an nREPL server process, along with the Cider middleware to connect to that nREPL server process</p>"},{"location":"clojure-repl/jack-in-to-repl/#adding-aliases","title":"Adding aliases","text":"<p>Aliases can be used from the project or the user <code>deps.edn</code> file, e.g  Practicalli CLI Config</p> <p><code>:extra-paths</code> and <code>:extra-deps</code> configuration in aliases is used by the Cider jack-in command line.</p> <p><code>:main-opts</code> entries in aliases are ignored when <code>:cider/nrepl</code> is kept as last alias in the chain.</p> No aliases after :cider/nrepl <p>Placing aliases after <code>:cider/nrepl</code> will prevent cider-jack-in working correctly (or at all), unless the last alias in the chain also includes the same libraries and configuration as the <code>:cider/nrepl</code> alias</p>"},{"location":"clojure-repl/jack-in-to-repl/#configure-repl-startup","title":"Configure REPL startup","text":"<p>Cider variables can be used to customize the REPL startup via a <code>.dir-locals.el</code> file in the root of the Clojure project.</p> <p><code>SPC p e</code> creates or opens a <code>.dir-locals.el</code> file in the root of the project.  A helm prompt also allows for adding entries into the file.</p> <p>Add the <code>:env/test</code> alias to <code>cider-clojure-cli-aliases</code> and the paths and libraries defined aliases will always be included when running a REPL from Spacemacs</p> <pre><code>((clojure-mode . ((cider-clojure-cli-aliases . \":env/test\"))))\n</code></pre> Add Alias names only <p>Execution flags, <code>-M</code>,<code>-P</code>,<code>-T</code>,<code>-X</code>,<code>-A</code> are automatically removed from the <code>cider-clojure-cli-aliases</code> value by the Cider jack-in code.</p> <p>The previously used variable <code>cider-clojure-cli-global-options</code> is deprecated and may cause issues with cider-jack-in that prevent the REPL from starting.</p> Custom user namespace for more REPL customisation <p>A <code>user</code> namespace allows for further customisation of the REPL startup</p>"},{"location":"clojure-repl/jack-in-to-repl/#multiple-project-configuration-files","title":"Multiple project configuration files","text":"<p>If both a <code>project.clj</code> file and a <code>deps.edn</code> file exist in the root of a project, Cider jack-in will prompt for the command to use</p> <p>Use a <code>.dir-locals.el</code> file to set the command that Cider jack-in will use each time</p> Clojure CLILeiningen <pre><code>((clojure-mode (cider-preferred-build-tool . clojure-cli)))\n</code></pre> <pre><code>((clojure-mode (cider-preferred-build-tool . lein)))\n</code></pre>"},{"location":"clojure-repl/jack-in-to-repl/#common-repl-start-restart-keybindings","title":"Common REPL start / restart keybindings","text":"Key bindings Command , ' or , m s start a REPL, selecting the type (<code>sesman-start</code>) , m b browse active REPL's  (<code>sesman-browse</code>) , m i show information about the current REPL  (<code>sesman-info</code>) , m q r restart the REPL, quit and jack-in.  (<code>sesman-restart</code>) , m q q quit the REPL (<code>sesman-quit</code>) , m n refresh stale code and load new code into the REPL (<code>cider-ns-refresh</code>) , m N force reload the current namespaces in the REPL (<code>cider-ns-reload</code>)"},{"location":"clojure-repl/portal-data-visualization/","title":"Portal data visualization","text":""},{"location":"clojure-repl/portal-data-visualization/#starting-a-repl-with-portal-data-inspector","title":"Starting a REPL with Portal data inspector","text":"<p>Portal is a web browser data inspector that can be configured as the <code>tap&gt;</code> source for a project.  Any expression surrounded by <code>(tap&gt; ,,,)</code> has its evaluated result sent to Portal.</p> <p>Portal navigates data in the form of edn, json and transit (with vega graphic support coming soon)</p> <p>Practicalli Clojure -data browsers section - portal</p> <p>Portal is simple to add to a REPL as it only requires the Portal library to be added as a dependency.</p> <p>practicalli/clojure-deps-edn includes several aliases for portal, depending on the type of Clojure project used.</p> Command Description <code>clojure -M:inspect/portal-cli</code> Clojure REPL with Portal dependency <code>clojure -M:inspect/portal-web</code> ClojureScript web browser REPL with Portal dependency <code>clojure -M:inspect/portal-node</code> ClojureScript node.js REPL with Portal dependency"},{"location":"clojure-repl/portal-data-visualization/#using-portal","title":"Using Portal","text":"<p><code>(require '[portal.api :as portal])</code> once the REPL starts.  For <code>inspect/portal-web</code> use <code>(require '[portal.web :as portal])</code> instead</p> <p><code>(portal/open)</code> to open the web based inspector window in a browser.</p> <p><code>(portal/tap)</code>to add portal as a tap target (add-tap)</p> <p><code>(tap&gt; {:accounts [{:name \"jen\" :email \"jen@jen.com\"} {:name \"sara\" :email \"sara@sara.com\"}]})</code> to send data to the portal inspector window (or any other data you wish to send)</p> <p><code>(portal/clear)</code> to clear all values from the portal inspector window.</p> <p><code>(portal/close)</code> to close the inspector window.</p>"},{"location":"clojure-repl/portal-data-visualization/#rich-comment-for-portal","title":"Rich comment for Portal","text":"<p>Add a <code>(comment ,,,)</code> form in the source code file to start and control Portal</p> <p>Rich comment<pre><code>  (require '[portal.api :as portal])  ; Require portal namespace\n\n  (inspect/open {:portal.colors/theme :portal.colors/solarized-dark}) ; (1) Open with theme\n\n  (inspect/clear)  ; Clear all values in the portal inspector window\n  (inspect/close)  ; Close the portal window\n</code></pre> 1.  Solarized Light is an alternative light theme for portal     <pre><code>(inspect/open {:portal.colors/theme :portal.colors/solarized-light})\n</code></pre></p>"},{"location":"clojure-repl/portal-data-visualization/#automatically-start-portal","title":"Automatically start Portal","text":"<p><code>user</code> is the default namespace when a Clojure REPL starts.  If there is a <code>user.clj</code> file on the classpath, the code it contains is automatically loaded once the REPL has started.</p> <p>Create a <code>user</code> namespace in the file <code>dev/user.clj</code>. Require the portal library in the namespace definition, using the alias <code>inspect</code>. Call the <code>inspect/open</code> function to launch Portal in a browser tab. Call <code>inspect/tap</code> to add portal as the <code>tap&gt;</code> source for the project (there can only be one <code>tap&gt;</code> source)</p> dev/user.clj<pre><code>(ns user\n  (:require\n     [portal.api :as inspect]))\n\n;; Start Portal\n;; Open a portal inspector window using default theme\n(inspect/open {:portal.colors/theme :portal.colors/solarized-light})\n\n;; Add portal as a tap&gt; target\n(inspect/tap)\n</code></pre> <p>The <code>:env/dev</code> alias from <code>practicalli/clojure-deps-edn</code> adds <code>dev</code> directory to the classpath, so the <code>user</code> namespace in <code>dev/user.clj</code> is loaded when starting the REPL.</p> <pre><code>clojure -M:env/dev:repl/rebel\n</code></pre>"},{"location":"clojure-repl/refresh-repl-state/","title":"Refresh REPL State","text":"<p>A REPL can be kept open indefinately so long as the state is kept clean and free from stale definitions.   </p> <p>Clojure tools.namespace.repl library provides functions to refresh the REPL state without the need to restart the REPL.</p> <p>Component lifecycle libraries, e.g. mount, integrant, system or component, define the components of an application and can start &amp; stop them without restarting the REPL.</p> <p>Restarting (stop/start) the REPL process will wipe the REPL state clean and start with an empty state.</p> Avoiding stale REPL state <p>Use <code>, e u</code>  (<code>cider-undef</code>) before changing the name of a var (e.g. <code>def</code>, <code>defn</code>, <code>deftest</code>, etc.). </p> <p>Code that changes within a var can be refreshed by [evaluating the var expression](undefine again.</p>"},{"location":"clojure-repl/refresh-repl-state/#restart-the-repl","title":"Restart the REPL","text":"<p>Restart the REPL process to start again with a clean REPL state.  Use this approach afer a major refactor of code has taken place.</p> <p><code>, m q r</code> (<code>sesman-restart</code>) to shutdown the current REPL process and start a new REPL repl process with a clean state.  The editor is automatically connected to the new REPL process.  A restart is the same as <code>cider-quit</code> followed by <code>cider-jack-in-*</code>.</p> <p><code>cider-restart</code> only restarts the Cider connection to the running REPL process and does not affect the REPL process itself.</p>"},{"location":"clojure-repl/refresh-repl-state/#refresh-repl-state_1","title":"Refresh REPL State","text":"<p>Remove all stale vars (def and defn expressions no longer in the source code) from the REPL without having to restart</p> <p><code>, e n</code> calls <code>cider-ns-refresh</code> which reloads any modified and unloaded namespaces on the classpath.</p> <p><code>cider-ns-refresh</code> uses <code>clojure.tools.namespace.repl</code> which will load and reload code based on the namespace dependency graph. Existing definitions that have not changed will be kept, so any state managed in this way will be kept.</p> <p><code>SPC u , e n</code> will unconditionally refresh all namespaces, refreshing all the code in the project.</p> <p><code>SPC u SPC u , e n</code> clears the state of the namespace tracker before reloading, if for example circular dependencies are preventing successful reload.</p> CIDER refresh hook for component lifecycle libraries <p><code>cider-ns-refresh</code> can call component lifecycle functions to stop and start services as part of the refresh process.</p>"},{"location":"clojure-repl/refresh-repl-state/#force-reload-namespace","title":"Force reload namespace","text":"<p>If there are issues using <code>cider-ns-refresh</code> then use a unconditional reloading of the namespace.</p> <p><code>, e N</code> calls <code>cider-ns-reload</code> which reloads the namespace of the current source code buffer.  This is the same as evaluating <code>(require 'namespace.name :reload)</code> in the REPL.</p> <p><code>SPC u , e N</code> prompts for a namespace name to reload a different namespace than that of the current buffer.</p>"},{"location":"clojure-repl/refresh-repl-state/#issues-with-clojure-reload","title":"Issues with Clojure reload","text":"<p>When modifying two namespaces that depend on each other, the namespaces must be reload in the correct order to avoid compilation errors.</p> <p>Removing definitions from a source file does not remove those stale definitions from a running REPL.  Code that uses those stale definitions will continue to work, but will break the next time you restart the REPL.</p> <p>A reloaded namespace containing <code>defmulti</code> must reload all of the associated <code>defmethod</code> expressions.</p> <p>A reloaded namespace containing <code>defprotocol</code> must reload any records or types implementing that protocol,  replacing any existing instances of those records/types with new instances.</p> <p>All namespaces that use a macro in a reloaded namespace must be reloaded.</p> <p>For functions that close over values in a reloaded namespace, those values are not updated (e.g. web applications which construct the \"handler stack\" as a composition of functions.)</p>"},{"location":"clojure-repl/refresh-repl-state/#references","title":"References","text":"<ul> <li>Hard CIDER: Hard Restart</li> <li>Reloading Woes - Lambda island</li> <li>clojure.tools.namespace.repl - cljdoc.org</li> </ul>"},{"location":"database-access/","title":"Database Access from Emacs","text":"<p>Add the Spacemacs SQL layer to use Emacs as an SQL database client, defining connections to access databases and running SQL queries.</p> <p>sqls language server (LSP) as an SQL layer backend provides autocompletion, code actions, documentation and formatting.  sqlint (linting) and sqlfmt (formatting) are also supported when installed.</p> <p>Syntax highlighting for SQL queries supports the dialects of ANSI, DB2, Informix, Ingres, Interbase, Linter, Microsoft, MySQL, Oracle, Postgres, Solid, SQLite, Sybase, Vertica.</p> <p>SQLi is integrated in Emacs and supports these databases if their client executable is available on the Emacs PATH</p> <p>Connection configuration can be defined for a specific database, e.g.  <code>sql-mysql-login-params</code>.  Multiple database connections are defined using the <code>sql-connection-alist</code> variable.</p> <p>Space f e d to open the Spacemacs configuration and add database connection configuration to the <code>dotspacemacs/user-config</code> section.</p> <p>Space h Space <code>sql-help</code> for help with SQL query syntax.</p>"},{"location":"database-access/#resources","title":"Resources","text":"<ul> <li>MySQL installation guide documents many options for installing MySQL</li> </ul>"},{"location":"database-access/add-sql-layer-and-lsp/","title":"Add SQL Layer and LSP support","text":"<p>Space f e d to open the Spacemacs configuration.  Add the <code>sql</code> layer to the <code>dotspacemacs-configuration-layers</code> list.</p> <p>When <code>lsp</code> layer is used then LSP is set as the backend for all layers and will connect to an SQL LSP server when opening a related SQL buffer.</p> <p>Or manually set LSP as the backend using a layer variable (if <code>lsp</code> has not been added to the Spacemacs configuration)</p> <pre><code>(sql :variables\n     sql-backend 'lsp)\n</code></pre>"},{"location":"database-access/add-sql-layer-and-lsp/#install-sql-lsp-server","title":"Install SQL LSP Server","text":"<p>sqls provides the LSP server implementation for the SQL layer.</p> <p>Install the latest sqls release for the Operating System in use.</p> <p>Linux install: download the Linux release, extract the archive and move the <code>sqls</code> binary file to <code>~/.local/bin</code></p> <p><code>sqls -help</code> or <code>sqls -version</code> in a terminal confirms the binary is working.</p>"},{"location":"database-access/add-sql-layer-and-lsp/#adding-database-connections-via-lsp","title":"Adding database connections via LSP","text":"<p><code>sql-lsp-sqls-workspace-config-path</code> as an SQL layer variable defines the location of database connections in JSON format</p> <pre><code>(sql :variables\n     sql-lsp-sqls-workspace-config-path 'workspace)\n</code></pre> <ul> <li><code>workspace</code>: Emacs workspace directory, XDG location <code>~/.config/emacs/workspace/</code> or <code>~/emacs.d/workspace/</code></li> <li><code>root</code>: top level of current project</li> </ul>"},{"location":"database-access/add-sql-layer-and-lsp/#database-configuration-for-sql-lsp","title":"Database configuration for SQL LSP","text":"<p>Example database connection in JSON.</p> <pre><code>{\n  \"sqls\": {\n    \"connections\": [\n      {\n        \"driver\": \"mysql\",\n        \"dataSourceName\": \"user1:password1@tcp(localhost:3306)/sample_db\"\n      }\n    ]\n  }\n}\n</code></pre> <p>With <code>sql-lsp-sqls-workspace-config-path</code> set as <code>workspace</code> the configuration should be saved to the Emacs workspace directory, e.g. <code>~/.config/emacs/workspace/practicalli-database-connections.json</code></p> <p>Avoid saving plain-text passwords in projects</p> <p>Saving plain-text passwords in configuration files is a security risk. Passwords should definitely not be checked into a code sharing service (GitLab, GitHub, etc).</p> <p>Using the <code>workspace</code> option minimises the risk of adding passwords to a shared code service as it is not part of any source code projects, although it still presents some risk if security of the Operating System is breached.</p> <p>Add database connections securely via Elisp</p> <p>Connections can be defined in Elisp and added to the <code>dotspacemacs/user-config</code> section of the Spamcemacs configuration file, optionally using a PGP encrypted password for greater security.</p> <p>--&gt;</p>"},{"location":"database-access/connection-configuration/","title":"Configure connections","text":"<p>Commonly used databases are easier to work with when their connection details are defined in the Emacs configuration.</p> <p>Connection configuration should be added to the <code>dotspacemacs/user-config</code> section of the Spacemacs configuration file (<code>SPC f e d</code> )</p>"},{"location":"database-access/connection-configuration/#a-single-connection","title":"A single connection","text":"<p>Set the <code>sql-postgres-login-params</code> variable to define a single PostgreSQL connection.  There are similar variables for each type of database.</p> <pre><code>(setq sql-postgres-login-params\n      '((user :default \"username\")\n        (database :default \"database-name\")\n        (server :default \"localhost\")\n        (port :default 5432)))\n</code></pre> <p>, e e to evaluate with the cursor after the closing paren of the setq expression</p>"},{"location":"database-access/connection-configuration/#multiple-database-connections","title":"Multiple database connections","text":"<pre><code>(setq sql-connection-alist\n      '((game-scores (sql-product 'postgres)\n                     (sql-port 5432)\n                     (sql-server \"localhost\")\n                     (sql-user \"username\")\n                     (sql-password \"secret\")\n                     (sql-database \"game-scores\"))\n        (customer-accounts (sql-product 'postgres)\n                  (sql-port 5432)\n                  (sql-server \"123.ec2.aws.com\")\n                  (sql-user \"username\")\n                  (sql-password \"secret\")\n                  (sql-database \"\"))))\n</code></pre> <p>Use encrypted password</p> <p>Use an Encrypted password when connecting to databases containing sensitive data or leave out the password from the connection configuration and Emacs will prompt</p> <p>A password if okay if using a local database, or connecting to a database via a read-only account where the database contains only non-sensitive data</p>"},{"location":"database-access/connection-configuration/#connection-helper-functions","title":"Connection helper functions","text":"<pre><code>(defun practicalli/db-connect-sql-server (product connection)\n  ;; remember to set the sql-product, otherwise, it will fail for the first time\n  ;; you call the function\n  (setq sql-product product)\n  (sql-connect connection))\n</code></pre> <p>Define interactive functions that call a specific server, so they can be called without providing arguments and therefore be bound to keys very easily.</p> <pre><code>(defun practicalli/db-connect-sql-game-scores ()\n  (interactive)\n  (practicalli/db-connect-sql-server 'postgres 'game-scores))\n\n(defun practicalli/db-connect-sql-cutomer-accounts ()\n  (interactive)\n  (practicalli/db-connect-sql-server 'postgres 'customer-accounts))\n</code></pre> <p>Define key bindings to call the db connections, e.g. <code>SPC o d g</code> for game server and <code>SPC o d c</code> for customer accounts</p> <pre><code>  (spacemacs/set-leader-keys \"odg\" 'practicalli/db-connect-sql-game-scores)\n  (spacemacs/set-leader-keys \"odc\" 'practicalli/db-connect-sql-cutomer-accounts)\n</code></pre>"},{"location":"database-access/connection-configuration/#encrypt-connection-password","title":"Encrypt connection password","text":"<p>Create a <code>db-connection-secrets.el.gpg</code> file to hold one or more passwords, using the key name used to define the rest of the database connection in <code>sql-connection-alist</code></p> <p>Add your password to that file like this. Make sure the key of this alist is the same with the key you defined before in sql-connection-alist (in this case server1 and server2).</p> <pre><code>(setq practicalli/database-account-passwords\n      '((server1 \"password1\")\n        (server2 \"password2\")))\n(provide 'practicalli/database-account-passwords)\n</code></pre> <p>Save the file and choose the encryption method that you want, or just skip it to use the default symmetric encryption method.</p> <p>Now, remove the password info in the sql-connection-alist and modify the my-sql-connect function that we have defined in the previous step to load the password from file</p> <pre><code>(setq sql-connection-alist\n      '((server1 (sql-product 'postgres)\n                  (sql-port 5432)\n                  (sql-server \"localhost\")\n                  (sql-user \"user\")\n                  (sql-database \"db1\"))\n        (server2 (sql-product 'postgres)\n                  (sql-port 5432)\n                  (sql-server \"localhost\")\n                  (sql-user \"user\")\n                  (sql-database \"db2\"))))\n\n(defun my-sql-connect (product connection)\n  ;; load the password\n  (require my-password \"my-password.el.gpg\")\n\n  ;; update the password to the sql-connection-alist\n  (let ((connection-info (assoc connection sql-connection-alist))\n        (sql-password (car (last (assoc connection my-sql-password)))))\n    (delete sql-password connection-info)\n    (nconc connection-info `((sql-password ,sql-password)))\n    (setq sql-connection-alist (assq-delete-all connection sql-connection-alist))\n    (add-to-list 'sql-connection-alist connection-info))\n\n  ;; connect to database\n  (setq sql-product product)\n  (sql-connect connection))\n</code></pre> <p>When activated, the my-sql-connect function will prompt for the password to decrypt the my-password.el.gpg file. However, it will ask for password just once and only when you active the my-sql-connect function so that you will have to enter the password just when you need to use it.</p> <p>Ensure that the <code>db-connection-secrets.el.gpg</code> file can be located inside the Emacs <code>load-path</code>.</p>"},{"location":"database-access/external-dependencies/","title":"SQL Layer External dependencies","text":"<p>Linting and formatting of SQL queries is supported via externally installed binaries.</p> <p>SQL layer and LSP page documents installation of an LSP Server binary for the SQL layer</p>"},{"location":"database-access/external-dependencies/#sqlint-linting-tool","title":"SQLint Linting tool","text":"<p>The sqlint tool provides SQL syntax checking in Emacs via Flycheck.</p> <p>Install <code>ruby</code> and the <code>sqlint</code> gem.</p> <pre><code>gem install sqlint\n</code></pre>"},{"location":"database-access/external-dependencies/#add-git-pre-commit-hook","title":"Add Git pre-commit hook","text":"<p>When committing queries it is useful to define a Git pre-commit hook to check the syntax of the query before the commit completes</p> <p>If using pre-commit to manage hooks, edit the Git <code>.pre-commit-hooks.yaml</code></p> <pre><code>- repo: https://github.com/purcell/sqlint\n  rev: master\n  hooks:\n  - id: sqlint\n</code></pre>"},{"location":"database-access/external-dependencies/#sqlfmt-formatting-tool","title":"SQLfmt formatting tool","text":"<p>Formatting: Install sqlfmt and move it into your $PATH</p> <p>Download and extract the binary 0.4.0 for linux</p> <pre><code>wget -q -O - https://github.com/mjibson/sqlfmt/releases/latest/download/sqlfmt_0.4.0_linux_amd64.tar.gz | tar -xpvzf - --directory \"${installdir}/bin\"\n</code></pre>"},{"location":"database-access/using-sql/","title":"Using SQL from Spacemacs","text":"<p>Once the sql layer is installed and connections are configured, connect to a database and run queries from within an Emacs buffer.</p>"},{"location":"database-access/using-sql/#connect-to-postgresql","title":"Connect to PostgreSQL","text":"<p>Space Space <code>sql-postgres</code> will create a database connection using the <code>sql-postgres-login-params</code> and prompt for the password.</p> <p>If the connection is not defined, Emacs prompts for all the server connection information.</p> <p>An SQLi buffer is created and associated with the current SQL buffer.</p>"},{"location":"database-access/using-sql/#write-and-run-queries","title":"Write and run queries","text":"<p>Type SQL commands into the SQLi buffer to execute</p> <p>Compose queries in the SQL buffer.  Run a query by selecting the query and run the command <code>SPC SPC sql-send-region</code></p> <p>(bound to Ctrl+C Ctrl+R by default) to execute or sql-send-buffer (bound to Ctrl+C Ctrl+B by default) to execute all the buffer.</p>"},{"location":"database-access/using-sql/#sql-product","title":"SQL product","text":"<p>sql-product-interactive is an autoloaded interactive Lisp function in \u2018sql.el.gz\u2019.</p> <p>(sql-product-interactive &amp;optional PRODUCT NEW-NAME)</p> <p>Run PRODUCT interpreter as an inferior process.</p> <p>If buffer \u2018SQL\u2019 exists but no process is running, make a new process.</p> <p>If buffer exists and a process is running, just switch to buffer \u2018SQL\u2019.</p> <p>To specify the SQL product, prefix the call with SPC u.  To set the buffer name as well, prefix the call to M-x sql-product-interactive with SPC u SPC u.</p> <p>(Type C-h m in the SQL buffer for a list of commands.)</p>"},{"location":"database-access/using-sql/#tweaks","title":"Tweaks","text":"<pre><code>(add-hook 'sql-interactive-mode-hook\n          (lambda ()\n            (toggle-truncate-lines t)))\n</code></pre> <p>toggle-truncate-lines is an interactive native compiled Lisp function in \u2018simple.el\u2019.</p> <p>It is bound to C-x x t.</p> <p>(toggle-truncate-lines &amp;optional ARG)</p> <p>Toggle truncating of long lines for the current buffer.</p> <p>When truncating is off, long lines are folded.</p> <p>With prefix argument ARG, truncate long lines if ARG is positive, otherwise fold them.  Note that in side-by-side windows, this command has no effect if \u2018truncate-partial-width-windows\u2019 is non-nil.</p>"},{"location":"debug-clojure/","title":"Debug Clojure","text":"<p>Most functions in Clojure are easily explored using REPL driven development, so debugging is not usually the first tool to reach for.</p> <p>When unexpected results are returned from a function and its not clear why, then adding break points will step through the code of a function definition and show the intermediate values.  The more complex custom code becomes, the greater the need for debugging tools</p> <p>Cider provides <code>cider-debug</code> tool to instrument a function and step through breakpoints to see what each part of that function is doing.</p> <p>Sayid is a comprehensive debug and profile tool, useful when debugging needs are extensive.</p> Tool Description cider debug add breakpoints and step through values and expressions sayid debug debug the whole project (code must compile) and profile project cider inspector navigate through data structures, paging through large data data inspector: portal visualize and navigate through data structures <p> </p>"},{"location":"debug-clojure/#inspect-as-a-debug-tool","title":"Inspect as a debug tool","text":"<p>When the wrong shape of result is return or values are not correct, a data inspector tool can be an effective way to debug a function.</p> <p>Data inspector tools show the results of functions, visualising the shape and values of the data returned.  Some inspectors also capture the history of results (e.g. Portal).</p> <p>Data inspectors are especially useful as the size and complexity of the results data grows.</p> <p>Cider provides a data inspector to navigate nested data structures and page through large data sets.</p>"},{"location":"debug-clojure/#references","title":"References","text":"<ul> <li>docs.cider.mx - debugging</li> </ul>"},{"location":"debug-clojure/cider-debug/","title":"CIDER Debug","text":"<p>Instrument one or more expressions or function definitions to use the Cider step debug tool, showing intermittent values from evaluating each form in turn.</p> <p> </p>"},{"location":"debug-clojure/cider-debug/#debug-functions","title":"Debug functions","text":"<p>, d b  with the cursor over a function definition calls the <code>cider-debug-defn-breakpoint</code> command, setting breakpoints throughout the function definition. </p> <p>Evaluate a call to the function, e.g. <code>, e f</code>, to start the cider debug tool.</p> <p>A debug menu appears above the expression, press <code>n</code> to step through each expression and see the inline result.</p> <p></p> <p> Cider debug key bindings </p> Evil key conflict - switch to Emacs Edit mode for full menu <p><code>C-z</code> after starting cider-debug to use <code>c e i p s</code> menu keys as otherwise they call the Evil normal state commands.  <code>C-z</code> to switch back to Evil normal state once debug is complete.</p> #dbg tag to debug a form <p><code>#dbg</code> tag before a form is the same as calling <code>, d b</code> to create breakpoints throughout an expression or function definition</p>"},{"location":"debug-clojure/cider-debug/#skip-over-lazy-functions","title":"Skip over lazy functions","text":"<p><code>o</code> (out) will jump out of evaluating an expression.</p> <p>Use out to jump over evaluating code that has functions generating lazy infinite sequences, such as <code>range</code> or <code>cycle</code>.  Cider debug will then evaluate those functions in their outer expression where it should be safe to do so.</p>"},{"location":"debug-clojure/cider-debug/#debug-expressions","title":"Debug expressions","text":"<p>Debug an expression in the same way as a function definition.  </p> <p>Debug break point scope</p> <p>Using <code>, d b</code> on an expression that calls a function will not add break points to the function being called.</p>"},{"location":"debug-clojure/cider-debug/#remove-debug-instrumentation","title":"Remove debug instrumentation","text":"<p>Evaluate the function definition or expression to remove the debug instrumentation and all breakpoints.</p>"},{"location":"debug-clojure/cider-debug/#conditional-break-points","title":"Conditional break points","text":"<p><code>:break/when</code> metadata on a <code>#dbg</code> directive defines a condition when a breakpoint is triggered, allowing the evaluation to iterate until a desirable point is reached.</p> <p>Setting a condition is especially useful when there are many iterations required before reaching a point of issue, for example iterating through a large data set.</p> <p>A <code>#break</code> can be added on any Clojure form.  In this example the evaluation will break on each iteration of the sequence, showing the local value of the index.</p> <pre><code>(dotimes [index 10]\n  #break index)\n</code></pre> <p>Add a break condition within the expression to be evaluated and the evaluation will iterate until the condition is met and then break</p> <p><code>n</code> to continue to the next break point will complete the evaluation as the break condition is no longer met</p> <pre><code>(dotimes [index 10]\n  #dbg ^{:break/when (= index  7)}\n  index)\n</code></pre> <p>The evaluation will break each time a condition is met, so a break will occur multiple times when the value of index is odd</p> <pre><code>(dotimes [index 10]\n  #dbg ^{:break/when (odd? index)}\n   index)\n</code></pre>"},{"location":"debug-clojure/cider-debug/#references","title":"References","text":"<ul> <li>Conditional Breakpoints in the Cider debugger</li> </ul>"},{"location":"debug-clojure/classpath-issues/","title":"Diagnose Classpath issues","text":"<p><code>clojure -Spath &gt; project-classpath.txt</code> will write the output the project classpath to the <code>project-classpath.txt</code> file.  The command will first download project dependencies that are not currently satisfied</p> <p>The output is a single line of text, with each path in the class path separated by a colon character, <code>:</code></p> <p><code>SPC f f</code> to open the file in Spacemacs</p> <p>Separate the classpath output into individual lines with this vim command.  This makes the file easier to read and run diff comparisons upon.</p> <pre><code>:s/:/\\n/g\n</code></pre> <p>Diff - compare differences between files</p> <p><code>SPC D f f</code> and selecting two files will open <code>ediff</code> and show a comparison.   Navigate the changes using <code>j</code> and <code>k</code>.  <code>a</code> to copy a change from the left buffer to the right buffer, <code>b</code> to copy right to left.</p>"},{"location":"debug-clojure/core-async/","title":"core-async","text":""},{"location":"debug-clojure/core-async/#debug-coreasync","title":"Debug core.async","text":"<p>Push extra information onto the channel that can be ignored when debugging is not required.</p>"},{"location":"debug-clojure/core-async/#clojurescript-output-to-browser-console-log","title":"ClojureScript: Output to Browser console log","text":"<p>You can't have the put operation in the call stack of a dispatch error. That is why it is async.</p> <p>You need to e. g. pr-str the dispatched value and make an educated guess where it was sent from. If the error happens while calling put it usually means you you called put on sth. that is not a channel.</p> <p>Use an expression to wrap a form</p> <pre><code>(doto form (-&gt;&gt; (pr-str) (str \"DEBUG: \") js/console.log))\n</code></pre> <p>Logging to the console tends to be more effective than breakpoint debugging in the browser developer tools.</p> <p>Add more detail such as function name, vars and even line number</p> <p>Emacs Lisp function to wrap a form with the console log expression</p> <pre><code>(defun cljs-dbg ()\n  (interactive)\n  (forward-char)\n  (beginning-of-sexp)\n  (insert \"(doto \")\n  (end-of-sexp)\n  (insert \" (-&gt;&gt; pr-str (str \\\"DEBUG: \\\") js/console.log))\"))\n\n(global-set-key (kbd \"C-c C-d\") 'cljs-dbg)\n</code></pre> <p>Use structured editing raise to raise the original form to remove the debug code.</p>"},{"location":"debug-clojure/format-error-messages/","title":"Formatting Errors for clarity","text":"<p>io.aviso/pretty is a library to highlight the most important error lines from a potentially long stack trace.</p> <p>Pretty error output features</p> <ul> <li>Readable output for exceptions</li> <li>ANSI font and background color support</li> <li>Hex dump of binary data </li> <li>Hex dump of binary deltas </li> <li>Formatting data into columns</li> </ul> <p></p>"},{"location":"debug-clojure/format-error-messages/#in-the-repl","title":"In the REPL","text":"<p><code>io.aviso.repl</code> namespace contains functions for use in the REPL, which can copy stack traces from the system clipboard.</p> <p><code>(install-pretty-exceptions)</code> function overrides several internal Clojure functions to enable formatted exceptions using <code>io.aviso.exception/write-exception</code></p> <p><code>(pretty-print)</code> parses the content of the clipboard as EDN and prints it in human readable form</p> <p><code>(format-exception)</code> parse the stack trace and format it for readability</p> <p>Add the following in a comment block, typically in a <code>dev/user.clj</code> file or namespace that is generating a noticeable number of stack traces.</p> <pre><code>(comment\n  (require '[io.aviso.repl as pretty])\n\n  (-&gt; (pretty/copy)\n      pretty/format-exception\n      pretty/paste)\n)\n</code></pre>"},{"location":"debug-clojure/format-error-messages/#on-the-command-line","title":"On the command line","text":"<p>AvisoNovate/pretty can be used as a Leiningen plugin for command line use</p> <p>Add <code>pretty</code> as a profile to the project.clj or users .profiles.clj</p> <pre><code>lein with-profiles +pretty run\n</code></pre>"},{"location":"debug-clojure/inspect-values/","title":"Inspecting values in Clojure","text":"<p>The Clojure layer includes the <code>cider-inspector</code></p> <p><code>, d v</code> opens the <code>cider-inspector</code> on the current symbol, allowing you to traverse its value.</p> <p>Clojure Inspector in more detail</p> <p>The <code>cider-inspector</code> is covered in more detail in the Evaluate Clojure &gt; Inspect section</p> <p> </p>"},{"location":"debug-clojure/sayid-debug/","title":"Sayid debug and profile tool","text":"<p>Sayid, pronounced \"siy EED\", is an extensive debug and profile tool for Clojure projects. To debug or profile code it must be able to compile or sayid will fail to work.</p> <p>cider-debug - a simpler approach</p> <p>cider-debug is simpler and quicker approach to debugging.</p> <p>Sayid works by intercepting and recording the inputs and outputs of functions. It can even record function calls that occur inside of functions. The user can select which functions to trace. Functions can be selected individually or by namespace. The recorded data can be displayed, queried and profiled.</p> <p>Sayid currently has three components:</p> <ul> <li>core and its supporting namespaces</li> <li>nREPL middleware</li> <li>an emacs-cider nREPL client</li> </ul> Key Binding Description <code>SPC m d b</code> instrument expression at point <code>SPC m d e</code> display last stack trace <code>SPC m d r</code> reload namespaces <code>SPC m d v</code> inspect expression at point"},{"location":"debug-clojure/sayid-debug/#configure-sayid","title":"Configure Sayid","text":"<p>Sayid is an optional package in the Clojure layer for Spacemacs.</p> <p>To enable sayid, add the following <code>:variable</code> to the <code>clojure</code> layer in <code>.spacemacs</code></p> <pre><code>     (clojure :variables\n              clojure-enable-sayid t)\n</code></pre> Cider Jack-in approach problematic <p>Clojure CLI projects require the sayid middleware to be included in the <code>:main-opts</code> configuration.  Including an alias with the cider-jack-in approach will ignore any <code>:main-opts</code> configuration and use its own <code>:main-opts</code> injected into the cider-jack-in command</p> <p>Practicalli Clojure CLI Config contains several aliases that can be used with cider-connect</p> <p>For a Leiningen project, sayid can be run from cider-jack-in although the sayid library should be added as a dev-dependency and the Leiningen plugin <code>{:user {:plugins [[com.billpiel/sayid \"0.1.0\"]]}}</code></p>"},{"location":"debug-clojure/sayid-debug/#cider-connect","title":"Cider Connect","text":"<p>Clojure CLI projects will need to explicitly include the middleware configuration in the same alias that configures nrepl, e.g. Cider connect will only work if the sayid nrepl middleware is included in the last alias used to start a REPL</p> Practicalli Clojure CLI ConfigAlias Definitions <p>The following aliases are defined in Practicalli Clojure CLI Config</p> <ul> <li><code>:repl/debug</code> run basic REPL prompt with sayid, and cider-nrepl middleware</li> <li><code>:repl/debug-refactor</code> run basic REPL prompt with sayid, clj-refactor and cider-nrepl middleware</li> <li><code>:repl/rebel-debug</code> run Rebel rich UI REPL prompt with sayid, and cider-nrepl middleware</li> <li><code>:repl/rebel-debug-refactor</code> run Rebel rich UI REPL prompt with sayid, clj-refactor and cider-nrepl middleware</li> </ul> <p>Open a terminal in the root of a Clojure project to be debugged with sayid and start a REPL using one of these aliases, e.g. <pre><code>clojure -M:repl/rebel-debug\n</code></pre> Open a Clojure file from the project in Emacs and use the command <code>, m s</code> to run <code>sesman-start</code> and select <code>cider-connect-clj</code></p> <p>A prompt will ask to confirm the host and port of the REPL to connect to (details of which are printed in the terminal when starting the REPL).</p> <p>After a few seconds Emacs should be connected.</p> <p>Create one or more of these suggested alias definitions to run a REPL in the terminal with Sayid and nREPL and successfully connect to that REPL via cider-connect-clj</p> <pre><code>  :repl/debug\n  {:extra-deps {nrepl/nrepl        {:mvn/version \"0.9.0\"}\n                com.billpiel/sayid {:mvn/version \"0.1.0\"}\n                cider/cider-nrepl  {:mvn/version \"0.28.5\"}}\n   :main-opts  [\"-m\" \"nrepl.cmdline\"\n                \"--middleware\" \"[com.billpiel.sayid.nrepl-middleware/wrap-sayid,cider.nrepl/cider-middleware]\"\n                \"--interactive\"]}\n</code></pre> <p>If also using clj-refactor with Cider, then that nrepl middleware as well as sayid and cider will need to be included</p> <pre><code>  :repl/debug-refactor\n  {:extra-deps {nrepl/nrepl                   {:mvn/version \"0.9.0\"}\n                com.billpiel/sayid            {:mvn/version \"0.1.0\"}\n                cider/cider-nrepl             {:mvn/version \"0.28.5\"}\n                refactor-nrepl/refactor-nrepl {:mvn/version \"3.5.3\"}}\n   :main-opts  [\"-m\" \"nrepl.cmdline\"\n                \"--middleware\" \"[com.billpiel.sayid.nrepl-middleware/wrap-sayid,refactor-nrepl.middleware/wrap-refactor,cider.nrepl/cider-middleware]\"\n                \"--interactive\"]}\n</code></pre> <p>Now run the REPL process in a terminal with the following command</p> <pre><code>clojure -M:repl/debug\n</code></pre> <p>Leiningen projects must include the Sayid plugin in order to use Cider Connect. <pre><code>{:user {:plugins [[cider/cider-nrepl \"0.25.3\"]\n                  [com.billpiel/sayid \"0.1.0\"]]\n        :dependencies [[nrepl/nrepl \"0.7.0\"]]}}\n</code></pre></p>"},{"location":"debug-clojure/sayid-debug/#learn-sayid","title":"Learn Sayid","text":"<p>There is a noticeable learn curve to Sayid as it is quite comprehensive, although with a little patience very detailed information about the project can be discovered</p> <p> </p>"},{"location":"debug-clojure/understanding-errors/","title":"Understanding Clojure errors","text":"<p>When a run time error occurs in Clojure, a stack trace is generated which includes information from the Clojure code and the underlying Java platform.</p> <p>A stack trace can seem daunting as it provide so much information.  There are common errors that are useful to learn to help quickly understand the root cause.</p> <p>Clojure editors such as CIDER help navigation and information hiding.  Tools like AvisoNovate/pretty reformat stack traces to make them easier to understand.</p>"},{"location":"debug-clojure/understanding-errors/#structure-of-a-stack-trace","title":"Structure of a stack trace","text":"<p>The Clojure compiler will catch an error exception, unwrap, and re-throw exceptions up the call chain from where they originally occur.  This provides a history of all the expressions called that lead to the exception.</p> <p><code>Exception in thread...</code> should be at the top of the stack trace, followed by the call stack in descending chronological time</p>"},{"location":"debug-clojure/understanding-errors/#understanding-exception","title":"Understanding Exception","text":"<p>An exception should provide a general context for the error and the assumed path to the error.</p> <ul> <li><code>IllegalArgumentException</code></li> <li><code>ClassCastException</code></li> <li><code>ArityException</code></li> <li><code>ClassNotFound</code></li> </ul> <p>Example Exceptions include:</p> <ul> <li><code>Don't know how to create ISeq from: clojure.lang.Keyword</code> - a keyword was used when a sequence (list, vector) was expected</li> <li><code>Don't know how to create IFn from: clojure.lang.Integer</code> - an expression was evaluated that started with a value (specifically an Integer) rather than a symbol that points to a function definition.</li> </ul>"},{"location":"debug-clojure/understanding-errors/#answer-is-often-the-first-line","title":"Answer is often the first line","text":"<p>A stack trace is printed in descending time order, with the most recent call at the top of the stack.</p> <p>Between the <code>Exception</code> and the top of the call stack, most errors are quickly interpreted without the need to read the whole stack trace.</p>"},{"location":"debug-clojure/understanding-errors/#using-the-wrong-kind-of-value","title":"Using the wrong kind of value","text":"<p><code>IllegalArgumentException</code> is generated when using the wrong kind of value, e.g. using a value instead of a function name (symbol)</p> <p>Evaluating <code>(1 2 3)</code> will try and call <code>1</code> as a function as it is first in the list.  As 1 is a value (integer) and not a function, so 1 does not implement the function interface, <code>IFn</code>.</p>"},{"location":"debug-clojure/understanding-errors/#de-reference-values","title":"De-reference Values","text":"<p>Casting a value to a Future that has not been realised <code>java.util.concurrent.Future</code></p>"},{"location":"debug-clojure/understanding-errors/#diagnosing-classpath-issues","title":"Diagnosing Classpath issues","text":"<p><code>clojure -Spath &gt; project-classpath.txt</code> will write the output the project classpath to the <code>project-classpath.txt</code> file.  The command will first download project dependencies that are not currently satisfied</p> <p>The output is a single line of text, with each path in the class path separated by a colon character, <code>:</code></p> <p><code>SPC f f</code> to open the file in Spacemacs</p> <p>Separate the classpath output into individual lines with this vim command (<code>:</code> enters the command mode in the Emacs mini-buffer).  This makes the file easier to read and run diff comparisons upon.</p> <pre><code>:s/:/\\n/g\n</code></pre> <p>Diff - compare differences between files</p> <p><code>SPC D f f</code> and selecting two files will open <code>ediff</code> and show a comparison.   Navigate the changes using <code>j</code> and <code>k</code>.  <code>a</code> to copy a change from the left buffer to the right buffer, <code>b</code> to copy right to left.</p>"},{"location":"debug-clojure/understanding-errors/#reading-and-understanding-clojure-errors","title":"Reading and understanding Clojure errors","text":"<p>Define a function that explicitly throws an exception using the <code>throw</code> function</p> <pre><code>(defn explicit-exception [value]\n  (throw (ex-info (str \"Invalid value: \" value)\n                  {:value value})))\n\n(explicit-exception \"kaboom\")\nExecution error (ExceptionInfo) at user/explicit-exception (REPL:2).\nInvalid value: kaboom\n</code></pre> <p>Deconstructing the error message</p> <ul> <li><code>Execution</code> error: - in which Clojure phase the error occurred</li> <li><code>ExceptionInfo</code>: - name of the class of the exception. <code>ex-info</code> internally creates an instance of <code>clojure.lang.ExceptionInfo</code></li> <li><code>user/explicit-exception</code> - name of the function where exception was thrown</li> <li><code>REPL:2</code> - path and line of the file where exception was thrown. <code>REPL</code> means there is no file, the definition was created at the REPL prompt, on line 2</li> <li><code>Invalid value: kaboom</code>: - error message thrown (the message passed to <code>ex-info</code> in this example)</li> </ul> <p>Generate an exception by calling the function with the incorrect number of arguments</p> <pre><code>(explicit-exception)\n\nExecution error (ArityException) at user/eval137 (REPL:1).\nWrong number of args (0) passed to: user/explicit-exception\n</code></pre> <p>Deconstructing the error message</p> <ul> <li><code>Execution error</code> - the implicit execution error is the same as before</li> <li><code>ArityException</code> - class of the exception, i.e. <code>clojure.lang.ArityException</code></li> <li><code>user/eval137</code> -  every form evaluated in the REPL internally creates a function, generating a name in the form eval1234 and immediately executes the expression.</li> <li><code>REPL:1</code> - error path is the first line of the REPL prompt</li> <li><code>Wrong number of args (0) passed to: user/explicit-exception</code> - message generated from the exception</li> </ul> <p>Use an anonymous function to wrap the call to the expression, to provide an explicit name when evaluated</p> <pre><code>((fn named-for-context []\n   (explicit-exception)))\n\nExecution error (ArityException) at user/eval139$named-for-context (REPL:2).\nWrong number of args (0) passed to: user/explicit-exception\n</code></pre> <p>The error message function now includes a specific name making the error message more useful as it is more obvious in the code as to where the error occurred.</p>"},{"location":"debug-clojure/understanding-errors/#view-the-stack-trace","title":"View the stack trace","text":"<p><code>*e</code> is a dynamic var that always points to the last error in a running REPL process.</p> <p>Evaluate <code>*e</code> in the REPL to see the stack trace in detail, as an EDN hash-map</p> <pre><code>user =&gt; e*\n#error {\n :cause \"Wrong number of args (0) passed to: user/explicit-exception\"\n :via\n [{:type clojure.lang.ArityException\n   :message \"Wrong number of args (0) passed to: user/explicit-exception\"\n   :at [clojure.lang.AFn throwArity \"AFn.java\" 429]}]\n :trace\n [[clojure.lang.AFn throwArity \"AFn.java\" 429]\n  [clojure.lang.AFn invoke \"AFn.java\" 28]\n  [user$eval139$named-for-context__140 invoke \"NO_SOURCE_FILE\" 2]\n  ...]}\n</code></pre> <p>Adding <code>named-for-context</code> to the execution, anything before this context should not be relevant. Now let's try a harder one:</p>"},{"location":"debug-clojure/understanding-errors/#stack-trace-for-lazy-functions","title":"Stack trace for Lazy functions","text":"<pre><code>(map explicit-exception [1])\n\nError printing return value (ExceptionInfo) at user/explicit-exception (NO_SOURCE_FILE:2).\nInvalid value: 1\n</code></pre> <p><code>Error printing return value</code> at the start of the error shows it's not a Execution error anymore. The code was executed and returned a value.</p> <p><code>clojure.core/map</code> returns a lazy-seq and when the printer tries to print the result an exception is thrown.</p> <p>Use the <code>*e</code> dynamic var to see the full stack trace</p> <pre><code>*e\n#error {\n :cause \"Invalid value: 1\"\n :data {:x 1}\n :via\n [{:type clojure.lang.ExceptionInfo\n   :message nil\n   :data #:clojure.error{:phase :print-eval-result}\n   :at [clojure.main$repl$read_eval_print__9112 invoke \"main.clj\" 442]}\n  {:type clojure.lang.ExceptionInfo\n   :message \"Invalid value: 1\"\n   :data {:value 1}\n   :at [user$explicit_exception invokeStatic \"NO_SOURCE_FILE\" 2]}]\n :trace\n [[user$explicit_exception invokeStatic \"NO_SOURCE_FILE\" 2]\n  [user$explicit_exception invoke \"NO_SOURCE_FILE\" 1]              ;; 6\n  [clojure.core$map$fn__5885 invoke \"core.clj\" 2757]               ;; 5\n  [clojure.lang.LazySeq sval \"LazySeq.java\" 42]\n  [clojure.lang.LazySeq seq \"LazySeq.java\" 51]                     ;; 4\n  [clojure.lang.RT seq \"RT.java\" 535]\n  [clojure.core$seq__5420 invokeStatic \"core.clj\" 139]\n  [clojure.core$print_sequential invokeStatic \"core_print.clj\" 53]\n  [clojure.core$fn__7331 invokeStatic \"core_print.clj\" 174]\n  [clojure.core$fn__7331 invoke \"core_print.clj\" 174]\n  [clojure.lang.MultiFn invoke \"MultiFn.java\" 234]                 ;; 3\n  [clojure.core$pr_on invokeStatic \"core.clj\" 3662]\n  [clojure.core$pr invokeStatic \"core.clj\" 3665]\n  [clojure.core$pr invoke \"core.clj\" 3665]\n  [clojure.lang.AFn applyToHelper \"AFn.java\" 154]\n  [clojure.lang.RestFn applyTo \"RestFn.java\" 132]\n  [clojure.core$apply invokeStatic \"core.clj\" 667]\n  [clojure.core$prn invokeStatic \"core.clj\" 3702]\n  [clojure.core$prn doInvoke \"core.clj\" 3702]                      ;; 2\n  [clojure.lang.RestFn invoke \"RestFn.java\" 408]\n  [clojure.main$repl$read_eval_print__9112 invoke \"main.clj\" 442]  ;; 1\n  [clojure.main$repl$fn__9121 invoke \"main.clj\" 458]\n  [clojure.main$repl invokeStatic \"main.clj\" 458]\n  [clojure.main$repl_opt invokeStatic \"main.clj\" 522]\n  [clojure.main$main invokeStatic \"main.clj\" 667]\n  [clojure.main$main doInvoke \"main.clj\" 616]\n  [clojure.lang.RestFn invoke \"RestFn.java\" 397]\n  [clojure.lang.AFn applyToHelper \"AFn.java\" 152]\n  [clojure.lang.RestFn applyTo \"RestFn.java\" 132]\n  [clojure.lang.Var applyTo \"Var.java\" 705]\n  [clojure.main main \"main.java\" 40]]}\n</code></pre> <p>Deconstructing the stack trace</p> <ol> <li>Where clojure.main REPL starts the print parse</li> <li><code>clojure.main</code> uses <code>clojure.core/prn</code></li> <li><code>clojure.core/prn</code> uses <code>clojure.core/print-method</code>. Note: a multimethod adds complexity to stacktraces</li> <li>print method invoked the method to evaluare the lazy sequence</li> <li>the lazy sequence was created inside a call to <code>clojure.core/map</code></li> <li>The lazy sequence is called by explicit-exception</li> </ol> <p><code>clojure.core/munge</code> is the function that converts namespaces with hyphens, i.e. <code>explicit-exception</code> into the name used on the Java class path, i.e. <code>explicit_exception</code></p> <p><code>clojure.repl/pst</code> to get a nice looking stacktrace print</p>"},{"location":"debug-clojure/understanding-errors/#reference","title":"Reference","text":"<p>Clojure Error message catalogue contains example errors gathered by the Clojure community.</p> <p>Implementing interfaces</p> Name Interface Example IFn Function anonymous function or symbol that points to a function definition ISeq Sequence list, result from sequence function e.g. map, filter, etc. IPersistentCollection Persistent Collection list, vector, hash-map or set Error Description <code>Don't know how to create ISeq from:</code> Expecting a sequence (list, vector) rather than the value <code>Don't know how to create IFn from:</code> Expecting a symbol name that points to a function definition"},{"location":"documentation/","title":"Documentation","text":"<p>View the docstring documentation for Clojure functions (and vars) and Javadoc for Java classes and methods</p> <p>, h a to find functions by approximate name, <code>cider-apropos</code></p> <p>, h d view function signature, docstring and specification, <code>cider-doc</code></p> <p>, h j open Java docs in a web browser, <code>cider-javadoc</code></p> <p></p>"},{"location":"documentation/#lsp-documentation","title":"LSP Documentation","text":"<p>, h l to describe the thing under the cursor, showing any relevant documentation.</p> <p>When this is a Clojure function then examples of use from clojuredocs.org are shown.</p> <p></p>"},{"location":"documentation/apropos/","title":"Find similar named functions with cider-apropos","text":"<p>, h a shows a helm pop-up with a search pattern, showing functions that are relevant to the search pattern.</p> <p></p> <p>Requires REPL</p> <p>A REPL session must be connected to the project for cider-apropos to work</p> <p>Enter to select the function and its docstring is displayed.</p> <p></p>"},{"location":"documentation/cider-doc/","title":"Cider doc","text":"<p>View the documentation for function definitions and other vars, including links to browse the Clojure specification and source code.</p> <p>Evaluate a namespace to enable Help</p> <p>Help only works for special forms (<code>def</code>, <code>if</code>, etc.) until any namespace from a project is first evaluated.</p> <p>, ' (<code>sesman-start</code>) to start or connect to a REPL process</p> <p>, e f with the cursor on the namespace definition in the source code buffer. This loads the <code>clojure.core</code> functions and vars and the required namespaces for the current namespace.</p> <p>Or , e b to evaluate a source code buffer if all source code in that namespace is syntactically correct.</p> <p>, h d shows the documentation for the current function or var under the cursor, or prompts for a function or var name.</p> <p></p> <p>The documentation popup shows * the argument list of a function * meta data (version added, scope, etc) * doc-string describing the function or var * Clojure spec - argument, return specifications * Location and link to source code * Links to related functions</p>"},{"location":"documentation/cider-doc/#viewing-the-source-code","title":"Viewing the source code","text":"<p>Enter on the link to the source code will open the source in a separate buffer.</p> <p></p>"},{"location":"documentation/cider-doc/#viewing-the-specification","title":"Viewing the specification","text":"<p>Enter on the Browse Spec link will open the specification in a separate buffer.</p> <p></p>"},{"location":"documentation/cider-doc/#clojuredocs-examples","title":"Clojuredocs examples","text":"<p>Clojuredocs is a website with the documentation for the Clojure Standard Library.  Each entry also contains many code examples of using each function, contributed by the Clojure community.</p> <p></p>"},{"location":"documentation/comments/","title":"Spacemacs Comments","text":"<p>Meta , creates a line comment on a new line or adds a comment at the end of an existing line.</p> <p>g c c toggles a line commend for the current line, g c  to toggle the selected region.</p>"},{"location":"documentation/comments/#spacemacs-comment-key-bindings","title":"Spacemacs comment key bindings","text":"<p>Spacemacs uses the same keybindings and commands to comment any programming language or mode.  The character and style of comments is defined in each layer or package that layer includes.</p> <p>If a mode does not have a comment character, Spacemacs will prompt for one in the mode line.</p> Key binding Description <code>SPC ; ;</code> Toggle comment current line <code>SPC ; i i</code> Toggle comment current line indented <code>SPC ; p a</code> Toggle comment paragraph <code>g c c</code> Toggle comment current line <code>g c a p</code> Toggle comment selected paragraphs <code>g c SPC y</code> Comment up to a line with avy <code>g y</code> Paste a commented copy of the current line above <code>v</code> select region <code>g c</code> Comment selected region <code>M-;</code>  (any state) New comment line or add comment to end of line <p>Evil-commentary layer</p> <p>Spacemacs uses the evil-commentary layer to provide a commenting tool for all other layers.</p>"},{"location":"documentation/comments/#clojure-lsp-snippets","title":"Clojure LSP snippets","text":"<p>Logical sections within a namespace aid navigation and understanding, as well as identifying opportunities to refactor a namespace as it grows in size.</p> <p><code>comment-header</code> and <code>comment-section</code> are Clojure LSP snippets defined in practicalli/clojure-lsp-config</p> <p><code>comment-header</code> provides a comment block to describe the overall purpose of the namespace</p> <p><code>comment-section</code> provides a comment block to demarcate sections of the namespace, such as helper functions, state, system, etc.  Sections help identify groups of code that could be organised into their own namespace as the code grows.</p>"},{"location":"documentation/comments/#clojure-comments","title":"Clojure comments","text":"<p>Clojure uses line comments, the comment function and the <code>#_</code> reader macro.</p>"},{"location":"documentation/comments/#evaluating-forms-in-rich-comments","title":"Evaluating forms in Rich comments","text":"<p>Expressions contained within a <code>(comment ,,,)</code> form are not evaluated when a namespace is evaluated, i.e. <code>, e b</code> to evaluate the current buffer.  So its a useful form for code only evaluated directly by the developer.</p> <p>Setting <code>clojure-toplevel-inside-comment-form</code> to true in the Clojure layer enables expressions to be evaluated within the <code>(comment ,,,)</code> form using the usual evaluation commands, (i.e. <code>, e f</code>).</p> <pre><code>(clojure :variables clojure-toplevel-inside-comment-form t)\n</code></pre> <pre><code>(comment\n  ;; Stop / restart application server\n  (app-server-start 8888)\n  (app-server-restart 8888)\n  (app-server-stop)\n\n  ;; OS environment variables / Java properties\n  (System/getenv \"PORT\")\n  (System/getProperties)\n  )\n</code></pre> <p>Example rich comment from Banking on Clojure project in Practicalli Clojure Web Services</p>"},{"location":"documentation/javadoc/","title":"Javadoc - Java API documentation","text":"<p>, h j shows javadoc information for a Java method or class, opening the relevant page on the Oracle website for Java.</p> <p></p>"},{"location":"documentation/javadoc/#include-java-sources","title":"Include Java Sources","text":"<p>Include the Java JDK sources when starting the REPL, to be able to navigate to the source definitions of Java methods.</p> <p>Download the Java JDK sources or install via the operating system package manager, e.g. <code>sudo apt install openjdk-17-source</code></p> <p>Use an alias that adds the sources as an <code>:extra-deps</code> via a <code>:local/root</code></p> <p><code>:src/java17</code> alias includes the sources for Java 17 on the classpath, making them available for the Cider <code>clj-find-var</code> lookup.</p> <p>The alias assumes the sources are located at <code>/usr/lib/jvm/openjdk-17/lib/src.zip</code></p> <p><code>clojure -M:src/java17:repl/rebel</code> starts a rich terminal UI REPL including the Java sources on the class path.</p>"},{"location":"documentation/javadoc/#navigate-java-source-code","title":"Navigate Java Source code","text":"<p>, g g to run the command <code>clj-find-var</code> which shows</p> <p>Clojure LSP hijacks the <code>, g g</code> key binding, so use <code>SPC SPC clj-find-var</code> instead.</p> <p></p> <p>Selecting a specific Java package (namespace) will open the  Java source code in a buffer</p> <p></p>"},{"location":"documentation/javadoc/#clojure-lsp-java-sources","title":"Clojure LSP Java Sources","text":"<p><code>:source-aliases</code> key in the Clojure LSP configuration can be used to add Java JDK sources to the Clojure LSP class path.</p> <p>An alias in the project <code>deps.edn</code> can be used to include the Java JDK sources</p> <pre><code>{:source-paths [\"src\" \"test\" \"develop\"]\n :source-aliases #{\":src/java17\"}}\n</code></pre> <p>Clojure LSP currently doesn't use the user level <code>deps.edn</code> file, so the alias must be in the project <code>deps.edn</code> file.</p>"},{"location":"emacs-lisp/","title":"Emacs development","text":"<p>there are two aspects to Emacs Lisp: The basic language itself, and the interaction with Emacs. Separate these two in your mind. Focus first on the former (should not be too hard as you learned Lisp in the past). Use sites like Exercism to practice.</p> <p>Once you have a grip on the basics (loops, functions, variables, conditionals, etc), move on to the aspects that involve Emacs itself (changing text, switching buffers, etc). This is vast, and you'll likely get lost in a sea of details. There are a few things you should understand really well, as you'll use them often. They are:</p> <pre><code>interactive\nsave-excursion\nsave-restriction\nhooks\nadvising functions\nwith-current-buffer\n</code></pre> <p>Once you understand these, instead of spending all your time reading the ELisp reference, think of simple problems you have with Emacs that you want to write and try solving them with Elisp. You'll likely need help on some of the steps, and that's where Google can help you.</p> <p>Examples of problems I solved to practice my Elisp:</p> <pre><code>When you use org-capture, and you write text in the last line of the capture buffer, it does not put a newline at the end, and so if I had any headlines after the capture position, that headline would no longer be a headline. The fix was to make a hook that checks if there are any newlines, and if not, add one at the end of the capture.\n\nWhen I capture and refile in one step, it doesn't save the file the entry was refiled to. But if I capture without refiling, it does. I fixed this inconsistency.\n\nWhen writing minutes during a meeting (in an org file), if a TODO for someone comes up, I want to do a capture that will look for a headline called TODOs (under the top level headline I am in) and place the TODO in there. Each meeting has its own TODOs headline, and it should go to the one for the current meeting in the file. This involved writing a function that goes up the tree to the top level, and looks for a child called TODOs.\n\nKill all buffers of a certain mode (there may be an internal function that already does this, but I did not know it).\n</code></pre> <p>Finally, make sure you know the following keybindings:</p> <pre><code>C-x C-e (evaluate expression)\nC-h v (look up the meaning and value of a variable)\nC-h f (look up the description of an inbuilt function).\n</code></pre>"},{"location":"emacs-lisp/#todowork-in-progress-sorry","title":"TODO::work in progress, sorry","text":"<p>Just very rough notes at the moment</p>"},{"location":"emacs-lisp/#some-useful-functions","title":"Some useful functions","text":"<pre><code>(info \"(elisp) Lisp Data Types\")\n\ntoo many to easily count :)\n\n(info \"(elisp) Buffers\")\n\nway too many to easily count\n\n(info \"(elisp) A Sample Function Description\")\n\nyes: (defun thing (a b &amp;rest l) \u2026)\n\n(info \"(elisp) Backquote\")\n\n` and , are pretty simple once you get the hang of them. try them out :) (defmacro simple (a b c) `(,b ,a ,c))\n</code></pre> <p>i don't think reddit is the best place for that kind of documentation. you should read the elisp info manual: (info \"elisp\").</p>"},{"location":"emacs-lisp/#resources","title":"Resources","text":"<ul> <li>Learn Emacs Lisp while customizing Emacs</li> <li>Learning Emacs Lisp - Elisp code examples for common tasks</li> <li>Ergo Emacs - How to learn Emacs Lisp</li> <li>Ergo Emacs Visual Tutorial</li> <li>Exercisim: Lisp track</li> <li>An Introduction to Programming in Emacs Lisp - gnu.org</li> <li>An introduction to Programming in Emacs Lisp - comes with Emacs, may be an additional package (C-h i or <code>SPC h T e</code>)</li> <li>Emacs Lisp Development Tips with John Wiegley - Sacha Chua</li> <li>Learn Emacs Lisp - Emacs Wiki</li> <li>Learn elisp in Y minutes LearnXInYMinutes.com</li> <li>Emergency Elip</li> <li>Emacs Tutor 2</li> </ul> <p>http://harryrschwartz.com/2014/04/08/an-introduction-to-emacs-lisp.html</p> <p>https://yoo2080.wordpress.com/2014/07/04/it-is-not-hard-to-read-lisp-code/</p> <p>https://yoo2080.wordpress.com/2014/07/20/it-is-not-hard-to-edit-lisp-code/</p> <p>https://web.archive.org/web/20140912224825/http://cjohansen.no/an-introduction-to-elisp</p> <p>http://ergoemacs.org/emacs/elisp.html</p>"},{"location":"emacs-lisp/#hacking-cider","title":"Hacking CIDER","text":"<ul> <li>CIDER overview</li> <li>Hacking CIDER</li> </ul>"},{"location":"emacs-lisp/#general-lisp-resources","title":"General Lisp resources","text":"<ul> <li>Land of Lisp (commercial)</li> <li>Practical Common Lisp</li> </ul>"},{"location":"emacs-lisp/eshell/","title":"Command Line Shell with Spacemacs","text":"<p>A simple shell can be run with the <code>shell</code> function.  This <code>shell</code> function opens a new buffer with a shell prompt and displays that buffer, replacing the currently highlighted buffer.</p> <p>Space ' opens a popup shell buffer in the root of the user account. Consecutive presses toggle the shell popup buffer for quick access.</p> <p>Space p ' opens a popup buffer in the root of the current project directory.</p> <p><code>exit</code> command at the shell prompt to close the shell.</p>"},{"location":"emacs-lisp/eshell/#adding-the-shell-layer","title":"Adding the shell layer","text":"<p>Add the shell layer to <code>dotspacemacs-configuration-layers</code> section of <code>~/.spacemacs</code>. Or <code>SPC SPC eshell</code> will prompt to install the shell package if its not currently added.</p> <p>The shell popup is configured in the <code>dotspacemacs-configure-layers</code> section of the <code>~/.spacemacs</code> file.</p> <pre><code>(shell :variables\n       shell-default-height 30\n       shell-default-position 'bottom)\n</code></pre> <p><code>shell-default-position</code> can be top, bottom, left or right.</p> <p><code>shell-default-height</code> defines the percentage of the Spacemacs frame to use.</p>"},{"location":"emacs-lisp/eshell/#customising-eshell-prompt","title":"Customising eshell prompt","text":"<p>Practicalli created a custom Eshell prompt.  The code can be found in the practicalli/spacemacs.d configuration, in the <code>dotspacemacs/user-config</code> section.</p> <p></p>"},{"location":"emacs-lisp/eshell/#configure-shell-to-use-multi-term","title":"Configure shell to use multi-term","text":"<p>multi-term uses the default shell from the operating system.</p> <p>Set the <code>shell-default-shell</code> variable to <code>'multi-term</code> in the shell layer in the <code>~/.spacemacs</code> file.</p> <p>Here is an example with the multi-term shell set, along with popup size and location</p> <pre><code>     (shell :variables\n            shell-default-shell 'multi-term\n            shell-default-height 30\n            shell-default-position 'bottom)\n</code></pre> <p>Space '  now opens a shell buffer as a popup with the default shell of your operating system terminal.</p>"},{"location":"emacs-lisp/eshell/#configure-multi-term-to-use-zsh","title":"Configure multi-term to use zsh","text":"<p>I have zsh configured for my terminal window which uses prezto to provide extra shell features.</p> <p>Add the following to <code>dotspacemacs/user-config</code> in your <code>~/.spacemacs</code> file</p> <pre><code>(setq multi-term-program \"/usr/bin/zsh\")\n</code></pre> <p>Space f e to save the <code>~/.spacemacs</code> file.</p> <p>Space f e R to reload the configuration, or <code>SPC q r</code> to restart Spacemacs.</p>"},{"location":"encryption/","title":"Encryption in Emacs - EasyPG Assistant","text":"<p>EasyPG Assistant provides the following features.</p> <ul> <li>Key management.</li> <li>Cryptographic operations on regions.</li> <li>Cryptographic operations on files.</li> <li>Dired integration.</li> <li>Mail-mode integration.</li> <li>Automatic encryption/decryption of *.gpg files.</li> </ul> <p>EasyPG Assistant commands are prefixed by \u2018epa-\u2019. For example,</p> <ul> <li><code>SPC SPC epa-list-keys</code>    browse your keyring</li> <li><code>SPC SPC epa-sign-region</code>  create a cleartext signature of the region</li> <li><code>SPC SPC epa-encrypt-file</code> encrypt a file</li> </ul> <p>automatic encryption/decryption of *.gpg files is configured in Spacemacs</p>"},{"location":"encryption/#common-uses","title":"Common uses","text":"<ul> <li>Encrypting org mode files</li> <li>Encrypting personal access tokens and passwords, e.g <code>authinfo.gpg</code></li> </ul>"},{"location":"encryption/create-gpg-key/","title":"Creating a gpg key","text":"<p>Create a key <pre><code>gpg --gen-key\n</code></pre> There\u2019s a simple wizard that lets you set the encryption type, and asks for your name, email address and other comments. Those details will be associated with your key.</p> <p>Next, you\u2019ll be asked to create a passphrase. This is like the password to your secret key. If you lose it, you\u2019ll have no access to any of the information encrypted with this key. So don\u2019t ever lose it\u2026</p> <p>Here\u2019s how this flow looks like: <pre><code>~ $ gpg --gen-key\ngpg (GnuPG) 1.4.19; Copyright (C) 2015 Free Software Foundation, Inc.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\nPlease select what kind of key you want:\n   (1) RSA and RSA (default)\n   (2) DSA and Elgamal\n   (3) DSA (sign only)\n   (4) RSA (sign only)\nYour selection? 1\nRSA keys may be between 1024 and 4096 bits long.\nWhat keysize do you want? (2048)\nRequested keysize is 2048 bits\nPlease specify how long the key should be valid.\n         0 = key does not expire\n      &lt;n&gt;  = key expires in n days\n      &lt;n&gt;w = key expires in n weeks\n      &lt;n&gt;m = key expires in n months\n      &lt;n&gt;y = key expires in n years\nKey is valid for? (0)\nKey does not expire at all\nIs this correct? (y/N) y\n\nYou need a user ID to identify your key; the software constructs the user ID\nfrom the Real Name, Comment and Email Address in this form:\n    \"John Practicalli &lt;noreply@practical.li&gt;\"\n\nReal name: Jane Roe\nEmail address: jane@example.com\nComment: lorem ipsum\nYou selected this USER-ID:\n    \"Jane Roe (lorem ipsum) &lt;jane@example.com&gt;\"\n\nChange (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? O\nYou need a Passphrase to protect your secret key.\n\nWe need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\n..........+++++\n.+++++\nWe need to generate a lot of random bytes. It is a good idea to perform\nsome other action (type on the keyboard, move the mouse, utilize the\ndisks) during the prime generation; this gives the random number\ngenerator a better chance to gain enough entropy.\n..........+++++\n...+++++\ngpg: key 86B62C98 marked as ultimately trusted\npublic and secret key created and signed.\n\ngpg: checking the trustdb\ngpg: 3 marginal(s) needed, 1 complete(s) needed, PGP trust model\ngpg: depth: 0  valid:   2  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 2u\npub   2048R/86B62C98 2016-02-17\n      Key fingerprint = 42FD C031 BD51 4CC8 7C02  EA14 35D4 80A2 86B6 2C98\nuid                  Jane Roe (lorem ipsum) &lt;jane@example.com&gt;\nsub   2048R/8C0D5E5D 2016-02-17\n\n~ $\n</code></pre> Now that you've created a key, you can go ahead and sign the .authinfo file. Sign and encrypt the .authinfo file1</p> <p><pre><code>~ $ gpg -se .authinfo\n</code></pre> You'll be asked for your passphrase. Enter it, and the .authinfo will be signed, and renamed to .authinfo.gpg</p> <p>EmacsWiki suggests to limit permission to this file. I find it important:</p> <pre><code>~ $ chmod 600 .authinfo.gpg\n</code></pre>"},{"location":"encryption/create-gpg-key/#todowork-in-progress-sorry","title":"TODO::work in progress, sorry","text":""},{"location":"encryption/create-gpg-key/#specifying-encrypt-to-account","title":"Specifying encrypt-to account","text":"<p>TODO: Add a comment with who the file is encrypted to?  If using symmetrical encryption, it seems no. <pre><code># -*- epa-file-encrypt-to: (\"hacking@practical.li\") -*-\n</code></pre></p> <p>Encrypting the file uses GnuPG, free cryptographic software from the GNU Project which helps ensure the confidentiality, integrity and assurance of data.</p> <p>Is  <code>gpg --gen-key</code> necessary before using gpg-agent for .authinfo.gpg?  It would seem not.</p>"},{"location":"encryption/create-gpg-key/#add-authinfo-to-keyring","title":"Add .authinfo to keyring","text":"<p>With the <code>.authinfo.pgp</code> file in they keyring, it will be unlocked each time you login to the operating system with your usual login account.  Magit Forge will them be able to access the token until you logout of your operating system.</p> <p>TODO: Is this required if the file is encrypted via Emacs?</p> <ul> <li>org-mode: encrypting org files</li> <li>Configuring Forge - Forge uses the same method to authenticate.</li> </ul>"},{"location":"evaluating-clojure/","title":"Evaluating Clojure","text":"<p>Practicalli recommends evaluating Clojure expressions in the source code buffer, which displays the results next to the expression until you move the cursor.</p> <p> </p> <p>, e f evaluates the top-level expression at cursor.</p> <p>, e p f evaluates the top-level expression at cursor and pretty prints the result in a separate buffer. Useful for results that are collections and nested collections.  Use the cider inspector for large data sets.</p> <p>, e ++semi-colon++ evaluates the top-level expression at cursor and add the result as a comment. Useful for a design journal and when exploring a code base.</p> <p>Review the evaluating expressions page for more examples and a deeper explanation.</p>"},{"location":"evaluating-clojure/#pretty-print-results","title":"Pretty Print results","text":"<p>Pretty Print displays evaluation results in an expanded structure which is more human readable.</p> <p>, e p e displays the evaluation result from evaluating the last s-expression in a separate popup buffer window</p> <p>, e p f is the same, but for the top level expression</p> <p>, e p ++semi-colon++ and , e p ++semi-colon++ pretty print results as a comment under the evaluated form.</p> Displaying large results <p>, e p f or , e p e pretty prints the results into a new buffer.  This is excellent for evaluating expressions that return a large result, eg. a large map. Keep the Cider Inspector buffer open to see the results of further evaluation commands, until the inspector buffer is closed.</p> <p>, d v the <code>cider-inspector</code> is a great way to navigate through a large data structure, especially if it is nested.</p>"},{"location":"evaluating-clojure/#quick-reference","title":"Quick reference","text":"<p>, e menu provides many different ways of evaluating parts of an expression, or a complete expression.</p> Evil Normal Description , e ++semi-colon++ Evaluate the current expression and print the result as a comment , e b Evaluate all the code in the current buffer , e e Evaluate the previous expression and print the result , e f Evaluate the current expression and print the result , e p ++semi-colon++ Pretty print result of the top-level expression as comment , e p : Pretty print result of the top-level expression as comment , e p f Pretty print result of the top-level expression in a new buffer , e p e Pretty print result of the last expression in a new buffer , e r Evaluate code within the highlighted region , e w Evaluate the previous expression and replace it with the result , T e Toggle Enlighten mode, showing intermediate values"},{"location":"evaluating-clojure/enlighten/","title":"Showing Intermediary values - Enlighten mode","text":"<p>As a homage to LightTable live evaluation, you can enable <code>enlighten</code> minor mode to show the intermediary values during evaluation.</p> Evil Normal Description <code>, T e</code> Toggle Enlighten mode, showing intermediate values <p>This provides a basic version of the Cider inspector which is always on (until you toggle it off).</p> <p></p>"},{"location":"evaluating-clojure/evaluate-in-repl-buffer/","title":"Evaluate in the REPL Buffer","text":"<p>If you are used to working directly in the REPL, then you can easily open and work in a REPL buffer.  You will need a Clojure project open and must have started a REPL.</p> <p><code>, s a</code> toggles between the REPL buffer and a source code buffer.  The REPL buffer will be shown in a new window if it is not currently being displayed.</p> <p>Evaluate in the source file buffers</p> <p>Evaluating code source file buffers is typically more effective as the code is saved to a file.  The whole buffer can be evaluated, <code>, e b</code> or just a specific expression, <code>, e f</code>.  Even nested expressions can be evaluated, <code>, e e</code>.  Expressions results can be added as a comment, <code>, e ;</code>, to have a record of results and results can also be pretty printed <code>, e P</code>.</p>"},{"location":"evaluating-clojure/evaluate-in-repl-buffer/#change-repl-buffer-namespace","title":"Change REPL buffer namespace","text":"<p><code>user</code> is the default namespace of the REPL.  This namespace includes the <code>doc</code> and <code>source</code> functions from <code>clojure.repl</code>.  This namespace is different to that of your project, so you will need to change the namespace of the REPL before calling any code in a project.</p> <p><code>, s n</code> from the source code buffer will change the REPL namespace to the same as the source code namespace.</p> <p>The REPL prompt should now show the namespace you have changed into.</p>"},{"location":"evaluating-clojure/evaluate-in-repl-buffer/#using-the-repl-buffer-to-evaluate","title":"Using the REPL buffer to evaluate","text":"<p><code>i</code> for Evil insert state to use the REPL buffer.</p> <p>Type in expressions at the REPL prompt and press <code>RET</code> to evaluate them.</p> <p><code>C-RET</code> to add a new line and write an expression over multiple lines.  <code>RET</code> to evaluate the expression when ready.</p> <p><code>C-j</code> and <code>C-k</code> in Evil normal state cycle through the history of expressions entered in the REPL buffer.</p>"},{"location":"evaluating-clojure/evaluate-in-repl-buffer/#send-expressions-to-the-repl-buffer","title":"Send expressions to the REPL buffer","text":"<p><code>, s f</code> will send the current expression to the REPL to be evaluated.</p> <p></p> <p>To call a function, it must be in the namespace the REPL is currently set to.  Or you can send a function definition to the REPL before and then you are able to call that function.</p> <p><code>, s f</code> will send the current function definition to the REPL.  Then you can either call that function from the REPL buffer or use <code>, e f</code> to send an expression that calls the function to the REPL buffer.</p> <p></p>"},{"location":"evaluating-clojure/evaluate-in-repl-buffer/#changing-the-namespace-in-the-repl-buffer","title":"Changing the namespace in the REPL buffer","text":"<p>The <code>in-ns</code> function will change the REPL namespace to that specified in its argument.  For example:</p> <p><code>(in-ns 'spacemacs-workshop.core)</code> in the REPL buffer will change to the <code>spacemacs-workshop.core</code> namespace.</p> <p></p>"},{"location":"evaluating-clojure/evaluate-in-repl-buffer/#repl-buffer-shortcut-menu","title":"REPL Buffer shortcut menu","text":"<p><code>,</code> at the start of a line in Evil Insert state will open a list of command shortcuts for the REPL.</p> <p></p>"},{"location":"evaluating-clojure/evaluate-in-repl-buffer/#clojure-send-to-repl-menu","title":"Clojure send to REPL menu","text":""},{"location":"evaluating-clojure/evaluate-in-repl-buffer/#clojure-send-to-repl-quit-sub-menu","title":"Clojure send to REPL - quit sub menu","text":"<p>Clojure REPL tools</p> <p><code>, s u</code> adds the REPL utility functions <code>apropos</code>, <code>dir</code>, <code>dir-fn</code>, <code>doc</code>, <code>find-doc</code> and <code>source</code> into the current REPL namespace.</p> <p>These REPL utility functions are included in the <code>user</code> namespace by default. See the <code>clojure.repl</code> api documentation for full details</p>"},{"location":"evaluating-clojure/expressions/","title":"Evaluating individual Expressions","text":"<p>Evaluating individual expressions is a very effective way to test the actions of your code as you write it.  This approach helps keep expressions as simple as possible, leading to more effective Clojure code.</p> <p>, e f is the most commonly used command and evaluates the current top-level expression.  The cursor can be anywhere inside the expression or nested expressions.</p> <p>When defining functions, , e f to evaluate them.  Then underneath the function definition, write a call to that function with appropriate arguments and evaluate that expression to test your function.</p> <p> </p>"},{"location":"evaluating-clojure/expressions/#deconstructing-exploring-a-code-base","title":"Deconstructing / Exploring a code base","text":"<p>Understanding Clojure code can sometime require you to evaluate only parts of an expression.  These are the commands that help with that.</p> <p>, e e evaluates the expression before the cursor and is very useful for evaluating nested expressions.  You can also copy a nested expression <code>SPC v v</code> and paste it outside the parent expression and evaluate it with different values to see how it behaves.</p> <p>, e ++semi-colon++ evaluates the current top-level expression and prints result as a comment.  Very useful when developing new code or working with less familiar functions and useful to keep a living document in a design journal or spike.</p>"},{"location":"evaluating-clojure/expressions/#replace-code-with-result","title":"Replace code with result","text":"<p>A powerful way to understand your code or explain to others what an expression does is to replace the code with result of its evaluation.  This technique is especially useful for expressions that are nested within another expressions.</p> <p>, e w  - replace previous expression with its return value</p> <p>u to undo these changes and return to the original code.</p>"},{"location":"evaluating-clojure/inspect/","title":"Inspect Clojure values","text":"<p><code>, d v</code> is the Cider Inspector menu used to efficiently page through very large data sets and navigate through nested data structures.</p> <p><code>, d v l</code> shows the last evaluation in the inspector</p> <p><code>, d v f</code> evaluates the top level expression under the cursor and displays the result in the inspector</p> <p><code>, d v e</code> evaluates the previous expression before the cursor and displays the result in the inspector</p> <p>Following evaluation results in Cider Inspector</p> <p>Keep the Cider Inspector buffer open to update with the result of the latest expression evaluation, from <code>, e</code> or <code>, d v</code> menus.</p> Inspector in action <p>Clojure REPL workflow video includes using the Cider Inspector, 20 minutes into the video</p> <p><p> </p></p>"},{"location":"evaluating-clojure/inspect/#use-inspector-buffer","title":"Use Inspector buffer","text":"<p>Once Cider Inspector buffer is open:</p> <p><code>n</code>  and <code>p</code> page through the data if the number of elements in the data set is greater than the page size (default 32), (<code>cider-inspector-next-page</code>, <code>cider-inspector-prev-page</code>)</p> <p><code>TAB</code> and <code>S-TAB</code> to navigate forward and backward through the elements that can be further inspected, (<code>cider-inspector-next-inspectable-object</code>, <code>cider-inspector-previous-inspectable-object</code>).</p> <p><code>RET</code> to inspect the current value under the cursor (<code>cider-inspector-operate-on-point</code>)</p> <p><code>r</code> to refresh the inspector view (<code>cider-inspector-refresh</code>)</p> <p><code>s</code> interactively sets the page size, updating how many elements are shown in one page of the cider inspector buffer, (<code>cider-inspector-set-page-size</code>).</p> <p><code>q</code> quits the cider inspector buffer</p>"},{"location":"evaluating-clojure/inspect/#inspecting-simple-values","title":"Inspecting simple values","text":"<p>Inspecting a dynamic var shows its value along with the datafy view</p> <p> </p> <p>Inspect a system property shows </p> <p> </p>"},{"location":"evaluating-clojure/inspect/#inspecting-collections","title":"Inspecting Collections","text":"<p>Inspect a collection shows the underlying type, contents of that collection and index (where applicable).  Only the elements are shown.  The characters of the overall collection itself are not show, only the underlying type of collection (vector, map, lazy sequence, etc.).</p> <p> </p> <p>If there are collections within collections then those values can be navigated too.</p> <p><code>RET</code> on an nested element in a collection will inspect that element in the same detail (<code>cider-inspector-operate-on-point</code>).</p> <p><code>L</code> to back to parent of a nested element (<code>cider-inspector-pop</code>).</p>"},{"location":"evaluating-clojure/inspect/#inspecting-mutable-values","title":"Inspecting mutable values","text":"<p>Mutable containers, <code>atom</code>, <code>ref</code>, can also be inspected.  The class of the container is shown, along with the class of the value it contains along with its elements.</p> <p>Inspecting an atom or ref gives the value at the current time.  The inspector does not update if the value of the atom or ref is updated. Use <code>r</code> in the inspector buffer to refresh or restart the inspector with <code>, d v</code> each time you want to check if the value has changed.</p>"},{"location":"evaluating-clojure/inspect/#inspecting-var-meta-data","title":"Inspecting Var meta data","text":"<p>Inspecting a var from a <code>def</code> expression shows meta information, the class type and summary of the value. Meta data can include the file and position of the code, the name of the var and which namespace it is defined in.</p> <p> </p> <p>Inspecting a <code>defn</code> also shows the argument list as part of the meta data.</p> <p> </p> <p>Open API docs data structure example shows class, value, meta information and datafy data</p> <p> </p>"},{"location":"evaluating-clojure/interrupt/","title":"interrupt Evaluations","text":"<p>, e i calls <code>cider-interrupt</code> which will stop the current evaluation.</p> <p>A long running evaluation may occur when processing a large data set or in a non-terminating loop.</p>"},{"location":"evaluating-clojure/interrupt/#repl-status-in-buffer-mini-bar","title":"REPL status in buffer mini-bar","text":"<p>The REPL buffer shows a visual indicator of evaluation, known as a spinner e.g. <code>[=== ]</code>, in the mode line when the current evaluation is taking more than one seconds to complete.</p> <p>The visual indicator spinner shows the REPL is actively processing an evaluation, although is not an indicator of how much progress has been attained or time left for completion.</p> <p></p>"},{"location":"evaluating-clojure/interrupt/#configure-spinner-type","title":"Configure spinner type","text":"<p><code>cider-eval-spinner-type</code> defines the type of visual indicator to use in the REPL buffer mini-bar for long running evaluations.</p> <p><code>SPC h v spinner-types</code> to see the available types.  The default value <code>'progress-bar</code></p> <p><code>cider-eval-spinner-delay</code> defines in seconds when to show the spinner. The default is 1 second.</p> <p><code>cider-show-eval-spinner</code> set to <code>t</code> enables the spinner, set to <code>nil</code> disables the spinner (default <code>t</code>).</p>"},{"location":"evaluating-clojure/interrupt/#spinner-types-available","title":"Spinner types available","text":"<p><code>SPC h v spinner-types</code> show the following available spinner.el types</p> <pre><code>((3-line-clock .\n               [\"\u2524\" \"\u2518\" \"\u2534\" \"\u2514\" \"\u251c\" \"\u250c\" \"\u252c\" \"\u2510\"])\n (2-line-clock .\n               [\"\u2518\" \"\u2514\" \"\u250c\" \"\u2510\"])\n (flipping-line .\n                [\"_\" \"\\\\\" \"|\" \"/\"])\n (rotating-line .\n                [\"-\" \"\\\\\" \"|\" \"/\"])\n (progress-bar .\n               [\"[    ]\" \"[=   ]\" \"[==  ]\" \"[=== ]\" \"[====]\" \"[ ===]\" \"[  ==]\" \"[   =]\"])\n (progress-bar-filled .\n                      [\"|    |\" \"|\u2588   |\" \"|\u2588\u2588  |\" \"|\u2588\u2588\u2588 |\" \"|\u2588\u2588\u2588\u2588|\" \"| \u2588\u2588\u2588|\" \"|  \u2588\u2588|\" \"|   \u2588|\"])\n (vertical-breathing .\n                     [\"\u2581\" \"\u2582\" \"\u2583\" \"\u2584\" \"\u2585\" \"\u2586\" \"\u2587\" \"\u2588\" \"\u2587\" \"\u2586\" \"\u2585\" \"\u2584\" \"\u2583\" \"\u2582\" \"\u2581\" \" \"])\n (vertical-rising .\n                  [\"\u2581\" \"\u2584\" \"\u2588\" \"\u2580\" \"\u2594\"])\n (horizontal-breathing .\n                       [\" \" \"\u258f\" \"\u258e\" \"\u258d\" \"\u258c\" \"\u258b\" \"\u258a\" \"\u2589\" \"\u2589\" \"\u258a\" \"\u258b\" \"\u258c\" \"\u258d\" \"\u258e\" \"\u258f\"])\n (horizontal-breathing-long .\n                            [\"  \" \"\u258e \" \"\u258c \" \"\u258a \" \"\u2588 \" \"\u2588\u258e\" \"\u2588\u258c\" \"\u2588\u258a\" \"\u2588\u2588\" \"\u2588\u258a\" \"\u2588\u258c\" \"\u2588\u258e\" \"\u2588 \" \"\u258a \" \"\u258b \" \"\u258c \" \"\u258d \" \"\u258e \" \"\u258f \"])\n (horizontal-moving .\n                    [\"  \" \"\u258c \" \"\u2588 \" \"\u2590\u258c\" \" \u2588\" \" \u2590\"])\n (minibox .\n          [\"\u2596\" \"\u2598\" \"\u259d\" \"\u2597\"])\n (triangle .\n           [\"\u25e2\" \"\u25e3\" \"\u25e4\" \"\u25e5\"])\n (box-in-box .\n             [\"\u25f0\" \"\u25f3\" \"\u25f2\" \"\u25f1\"])\n (box-in-circle .\n                [\"\u25f4\" \"\u25f7\" \"\u25f6\" \"\u25f5\"])\n (half-circle .\n              [\"\u25d0\" \"\u25d3\" \"\u25d1\" \"\u25d2\"])\n (moon .\n       [\"\ud83c\udf11\" \"\ud83c\udf18\" \"\ud83c\udf17\" \"\ud83c\udf16\" \"\ud83c\udf15\" \"\ud83c\udf14\" \"\ud83c\udf13\" \"\ud83c\udf12\"]))\n</code></pre>"},{"location":"evaluating-clojure/macro-expand/","title":"Macro-expand - show code generated by macros","text":"<p>There are around 50 macros in <code>clojure.core</code> and to understand what they are doing it is useful to expand the macro into the code that it generates. Expanding a macro shows you the code generated by the macro reader. Code from the macro is displayed in a new buffer.</p> <p><code>. e m</code> expands a macro once, the most simple and commonly used command (<code>cider-macroexpand-1</code> ).</p> <p><code>, e M</code> expands until there are no more macros.  Less often there will be layers of macros in the expression, so this will show the code from complete resolution of all macros in the expression (<code>cider-macroexpand-all</code>).</p> <p>In this example we expand a simple <code>defn</code> macro</p> <pre><code>(defn foo\n  \"I don't do a whole lot.\"\n  [x]\n  (println x \"Hello, World!\"))\n</code></pre> <p></p>"},{"location":"evaluating-clojure/undefine/","title":"Un-define vars","text":"<p>Keeping the REPL state clean, free from stale var definitions (symbols), minimises the need to restart the REPL process.</p> <p><code>def</code>, <code>defn</code> names can change during development as code is refactored.  Un-define removes unwanted vars and keeps the REPL state clean, avoiding the need to restart the REPL.</p> <p><code>, e u</code>  (<code>cider-undef</code>) un-defines the current function name or var, e.g. <code>defn</code>/<code>def</code> / <code>deftest</code>, removing it from the running REPL.</p> <p>When cursor is not on a function name or any var, the mini-buffer prompts for the name to undefine.</p> Cider refresh or restart for multiple changes <p>Refresh or restart the REPL when there are multiple changes made to a namespace or across multiple namespaces.</p>"},{"location":"evaluating-clojure/undefine/#tests","title":"Tests","text":"<p>If the name of an existing test is changed, the original test will still run when calling the CIDER test runner commands (or other REPL based test runners).  </p> <p>Having stale test definitions leads to confusing test results.</p> <p><code>, e u</code> on a <code>deftest</code> expression before changing its name to ensure that the existing test is removed from the REPL state and no longer run.</p>"},{"location":"evaluating-clojure/undefine/#repl-buffer","title":"REPL buffer","text":"<p><code>, undef</code> in the REPL buffer (Evil Insert / Emacs state) prompts for a symbol to undefine.</p> <p><code>TAB</code> when typing the symbol name will popup a list of matching symbols available in the REPL.  Select the name you wish to undef</p> <p> </p>"},{"location":"evaluating-clojure/undefine/#clojure-core-functions","title":"Clojure core functions","text":"<p><code>ns-unmap</code> will remove a symbol from the running REPL.  Use <code>*ns*</code> dynamic variable to represent the current namespace.</p> <pre><code>(ns-unmap *ns* 'name-before-refactor)\n</code></pre> <p>Or specify the namespace if the symbol is not in the current namespace</p> <pre><code>(ns-unmap 'practicalli.service 'name-before-refactor)\n</code></pre> <p><code>ns-unalias</code> will remove an alias added via a require form</p> <pre><code>;; Require a neamespace\n(require '[practicalli.service :as service])\n\n;; The service alias should now be in the current nammespace\n(ns-aliases *ns*)\n;; =&gt; {service #namespace[practicalli.service]}\n\n(ns-unalias *ns* 'service)\n;; =&gt; nil\n</code></pre>"},{"location":"evaluating-clojure/undefine/#clojure-toolsnamespace","title":"Clojure tools.namespace","text":"<p>Clojure tools.namespace.repl provides utilities to manage namespaces.</p> <p><code>refresh</code> function scans all directories on the classpath for source files, read their ns forms, builds a graph of their dependencies and load them in dependency order. <code>set-refresh-dirs</code> defines directories that should be scanned.</p> <p>Add the library as a dependency to the project file</p> <pre><code>org.clojure/tools.namespace {:mvn/version \"1.4.5\"}\n</code></pre> <p>Require the namespace and refer the function </p> <pre><code>(require '[clojure.tools.namespace.repl :refer [refresh]])\n</code></pre> <p>Refresh the current namespace</p> <pre><code>(refresh)\n</code></pre> <p>The refresh function will load all namespaces found and list them as the output.</p> <pre><code>:reloading (com.example.util com.example.app com.example.app-test)\n:ok\n</code></pre> <p>Set directories to include</p> <p>Use <code>set-refresh-dirs</code> to only reload code from specific paths, e.g. <code>src</code>, <code>resources</code>, <code>test</code>.</p> <p><code>refresh</code> will not act on namespaces that are defined on other paths, e.g. <code>dev</code>, avoiding reloading code for REPL workflows (launching portal, log publishers, etc.)</p> All Code must be reloadable <p>If there are errors in one or more namespaces that prevent them from successfully loading, then reresh will error, showing which namespaces had issues to resolve.</p> <p>Either refactor the troublesome code or move the code to a path that is not defined by <code>set-refresh-dirs</code>.</p>"},{"location":"evaluating-clojure/undefine/#refresh-in-rich-comment","title":"refresh in rich comment","text":"<p>Use a rich comment to ensure the refresh function is only called when directly evaluated.</p> <p>Code inside the rich comment block will not be evaluated when evaluating the current buffer or loading the namespace.</p> <pre><code>(comment\n\n  (require '[clojure.tools.namespace.repl :refer [refresh]])\n\n  (refresh)\n)\n</code></pre> <p>Custom user namespace</p> <p>Include clojure.tools.namespace.repl in a custom user namespace and call from the REPL prompt or by switching to the <code>user.clj</code> file in the editor and calling <code>refresh</code></p> <p>Custom Starup - Reload Namespace: Practicalli Clojure </p> <p>Custom user namespace - Practicalli Project Templates </p>"},{"location":"external-repl/","title":"External Clojure REPL","text":"<p>Configure and connect to an externally run REPL.</p>"},{"location":"external-repl/#why","title":"Why","text":"<p>If you have a system that has a long running process, like a server.</p> <p>You need to connect to a environment that is already running, eg. pre-production or production (to fix a critical bug that cannot be fixed in other ways).</p>"},{"location":"external-repl/connect-to-running-repl/","title":"Connect to a running Repl","text":"<p>You can connect to a REPL started elsewhere, for example the command line with <code>lein repl</code>, then connect to it from inside Spacemacs.  You will need to know:</p> <ul> <li>host name / ip address</li> <li>port the repl is listening too</li> </ul> Spacemacs Major mode Emacs Evil Command <code>SPC m s c</code> <code>M-RET s c</code> <code>C-c M-c</code> <code>, s c</code> <code>cider-connect</code> <p>Use the <code>lein repl</code> command to run a new REPL on the command line.  Then connect to that REPL using <code>M-x cider-connect</code></p> <p></p>"},{"location":"external-repl/connect-to-running-repl/#configuration-required","title":"Configuration Required","text":"<p>If you are going to connect to an external repl from Spacemacs, you will need to add the Leiningen plugin called <code>cider-nrepl</code> and the Clojure <code>tools.nrepl</code> library.  Rather than add this to all projects, you add these to your Leiningen configuration <code>~/.lein/profiles.clj</code> file.  The versions of each library also had to be kept in sync with updates in the Spacemacs Clojure layer.</p> <pre><code>{:dev {:plugins      [[cider/cider-nrepl \"0.15.0-SNAPSHOT\"]\n                       [refactor-nrepl \"2.3.0-SNAPSHOT\"]]\n        :dependencies [[org.clojure/tools.nrepl \"0.2.12\"]]}}\n</code></pre> <p>Without this configuration, you will see warning messages in the repl buffer stating that the versions of ... are out of sync.</p> <p></p>"},{"location":"external-repl/repl-command-menu/","title":"REPL Command Menu","text":"<p>With the Clojure REPL buffer active, you can use the <code>,</code> character (in Vim Insert or Emacs state) to open a menu of REPL related commands</p> Vim Insert Emacs Description <code>,</code> <code>,</code> Open REPL Command menu <p></p>"},{"location":"external-repl/repl-command-menu/#hintvim-insert-or-emacs-state-only","title":"HINT::Vim Insert or Emacs state only","text":"<p><code>,</code> in Vim Normal state opens the Clojure major mode menu.</p> <p><code>i</code> to change to Vim Insert state</p> <p><code>C-z</code> to change to Emacs state</p>"},{"location":"external-repl/repl-history/","title":"REPL History","text":"<p>Scroll back through the history in the REPL buffer, allowing evaluation of previously entered expressions. Any of the previous expressions can be edited before evaluating.</p> <p>In Evil Insert state or Emacs state:</p> <p>Ctrl+Up - scrolls backwards through the history</p> <p>Ctrl+Up - scrolls forwards through the history</p> <p>History navigation not supported in Evil Normal state</p>"},{"location":"external-repl/repl-history/#cider-repl-history-complete-history","title":"<code>cider-repl-history</code> complete history","text":"<p>View the complete history of expressions in a separate buffer via the REPL Command menu, available when the REPL buffer is active.  This does not include the history of results (use a data inspector such as Portal).</p> <p>In Evil Insert state or Emacs state:</p> <p>, open the REPL command menu</p> <p>Type <code>history</code> at the REPL command menu prompt, press <code>RET</code> to select.</p> <p>A new buffer opens in Evil Normal mode and shows all the previous history, separated by comments.</p> <p>Spacemacs Clojure REPL history</p> <p>Switch to Vim insert or Emacs state</p> <p>The REPL History buffer only accepts commands when in Vim insert or Emacs state</p> <p>i evil insert state</p> <p>Ctrl+z emacs state</p> <p>In Evil Insert or Emacs state:</p> <p>Enter or Space will send the current expression under the cursor to the REPL buffer and close the repl-history buffer.</p> <p>In Evil Normal state:</p> <p>Space Space <code>cider-history-use-and-quit</code> sends the current expression to the REPL buffer and closes the REPL history.</p> <p></p>"},{"location":"external-repl/show-repl-on-connect/","title":"Show REPL Buffer","text":"<p>Spacemacs does not automatically show the Clojure REPL buffer when connecting to a REPL (<code>cider-jack-in-clj</code>).</p> <p><code>, s s</code> opens and switches to the REPL buffer. Once the REPL buffer is open, <code>, s s</code> toggles focus between the REPL and source code buffers.</p> <p>Alternatively, <code>SPC b b</code> opens the buffer list. Typing <code>repl</code> narrows to REPL buffers. <code>C-j</code> and <code>C-k</code> navigate the buffer list and <code>RET</code> selects the buffer.</p> <p>A buffer for each Clojure REPL &amp; ClojureScript REPL process will be shown in the buffer list.</p>"},{"location":"external-repl/show-repl-on-connect/#hintminimise-use-of-repl-buffer","title":"Hint::Minimise use of REPL buffer","text":"<p>When developing code it is more effective to evaluate in the source code buffers.</p>"},{"location":"external-repl/show-repl-on-connect/#configure-repl-buffer-size-limit","title":"Configure REPL Buffer size limit","text":"<p>By default, standard out (printlin and logs to console) will be printed in the REPL buffer.</p> <p>Logging into the REPL buffer, especially logs with verbose output, can slow down Emacs performance.</p> <p>Add <code>cider-repl-buffer-size-limit 100</code> to the <code>cider</code> layer to limit lines shown in REPL buffer.  Only that number of lines will be retailed in the buffer, with any more lines automatically deleted.  This should keep the REPL buffer more responsive.</p> <pre><code>(clojure :variables\n         cider-repl-buffer-size-limit 100)\n</code></pre>"},{"location":"external-repl/show-repl-on-connect/#show-repl-buffer-automatically","title":"Show REPL buffer automatically","text":"<p>To automatically show the REPL buffer once you have connected, add the following code to the <code>dotspacemacs/user-config</code> section of the <code>.spacemacs</code> file.</p> <pre><code>(clojure :variables\n         cider-repl-pop-to-buffer-on-connect t)\n</code></pre> <p>The REPL buffer will open as an additional window in the current frame.</p>"},{"location":"external-repl/show-repl-on-connect/#slow-repl-buffer","title":"Slow REPL buffer","text":"<p><code>SPC SPC fundamental-mode</code> will switch off the text formatting and help the REPL buffer should be faster to respond.</p> <p>However, fundamental-mode should be a last resource as it limits the usefulness of the REPL buffer.</p>"},{"location":"external-repl/switching-to-repl/","title":"Switching to the REPL","text":"<p><code>, s a</code> toggles between a Clojure code file buffer and the REPL buffer, opening the REPL buffer where required.</p> <p><code>, s n</code> evaluates the namespace of the current Clojure file in the REPL, changing the REPL to be in that namespace.</p>"},{"location":"external-repl/switching-to-repl/#todore-write-this-section","title":"Todo::re-write this section","text":"<p>Update for Clojure CLI tools</p>"},{"location":"external-repl/switching-to-repl/#hintto-repl-buffer-or-not-to-repl-buffer","title":"Hint::To REPL buffer or not to REPL buffer","text":"<p>Many developers simply evaluate functions and expressions within the Clojure code buffer itself.</p> <p>A REPL buffer is very useful for showing larger results from evaluating code and any side effect information such as logging and debugging.</p>"},{"location":"external-repl/switching-to-repl/#select-the-repl-namespace","title":"Select the REPL namespace","text":"<p><code>SPC SPC cider-repl-set-ns</code> displays a pop-up buffer of all the available namespaces.</p> <p>A running REPL is required.</p>"},{"location":"external-repl/switching-to-repl/#hintthe-user-namespace","title":"Hint::The <code>user</code> namespace","text":"<p>When starting a REPL the default namespace is called <code>user</code>.  This namespace contains the <code>clojure.repl</code> library allowing you to call functions useful for development, such as <code>(doc ,,,)</code>, <code>(source ,,,)</code>, etc.</p> <p>To use the <code>doc</code> and <code>source</code> tools, you can stay in the <code>user</code> namespace and use <code>require</code> function to include your own code in the <code>user</code> namespace.  For example:</p> <pre><code>(require 'my-custom-code.core)\n(require '[my-custom-code-time :as time])\n</code></pre>"},{"location":"external-repl/switching-to-repl/#setting-the-default-repl-namespace","title":"Setting the default REPL namespace","text":"<p>Set the namespace used when starting the REPL in the <code>project.clj</code> file by adding <code>:init-ns</code> to the <code>:repl-options</code></p> <pre><code>:repl-options {:init-ns the-default.namespace}\n</code></pre>"},{"location":"external-repl/switching-to-repl/#keybindings","title":"Keybindings","text":"Keybinding Description <code>, s a</code> toggle between source code and REPL buffer <code>, s o</code> Switch between CLJ &amp; CLJS REPLs in current project"},{"location":"external-repl/switching-to-repl/#repl-buffer","title":"REPL Buffer","text":"<p>The REPL buffer contains a detailed welcome message describing how to use the basics of the REPL.</p> <p></p>"},{"location":"improving-code/","title":"Improving Clojure code","text":"<p>Clojure code should be kept readable and consistently use idiomatic style, which can be managed by using a few additional tools</p> Tool Description Usage Linter Reports on code errors Continuously Formatter Formats the code for readability Automatically Static analyser Suggests idiomatic use of Clojure Regularly (before pushing) <p>Clojure style guide</p> <p>Linting and formatting follow the practices documented in the Clojure style guide.</p>"},{"location":"improving-code/#linting","title":"Linting","text":"<p>Linting tools can be added as a <code>flycheck</code> service so code is continually checked as you are writing it.  Continuously linting picks up little bugs as you type and reduces the amount of debugging required, as you are changing errors as you make them.</p> <p>Linting will get rid of all the little errors and typos that are easily made, yet take time to find and fix.</p>"},{"location":"improving-code/#static-analyser","title":"Static analyser","text":"<p>Kibit is a commonly used static analyser for Clojure projects, suggesting changes to the code it analyses to make it more idiomatic.</p>"},{"location":"improving-code/#formatting","title":"Formatting","text":"<p>A consistent format of your code base makes it much more readable and therefore understandable by the development team.  The <code>clojure-mode</code> does manage basic formatting of your code, especially code indentation.</p> <p>Spacemacs can be configured to automatically check and adjust any formatting as you type.</p>"},{"location":"improving-code/batch-linting/","title":"Batch Linting","text":"<p>squiggly can be used to provide live linting for Eastwood and kibit, however, squiggly continually reloads your code and can cause issues especially if your code has side effects when continually reloaded.</p> <p>Eastwood and kibit give a better experience when used in batch mode, either before push commits to a shared repository or with a CD/CI server.</p>"},{"location":"improving-code/batch-linting/#quick-usage","title":"Quick usage","text":"<p>Eastwood can be run from</p> <ul> <li>Clojure CLI tools - deps.edn</li> <li>Leiningen</li> <li>a REPL</li> </ul>"},{"location":"improving-code/batch-linting/#clojure-cli","title":"Clojure CLI","text":"<p>Define an alias for the Eastwood library and namespace.</p> <pre><code>{:aliases\n  {:eastwood\n      {:main-opts [\"-m\" \"eastwood.lint\" {:source-paths [\"src\"]}]\n       :extra-deps {jonase/eastwood {:mvn/version \"RELEASE\"}}}}}\n</code></pre> <p>Run Clojure with the <code>eastwood</code> alias to lint your project</p> <pre><code>clojure -M:lint/eastwood\n</code></pre> <p>An example output is as follows:</p> <pre><code>== Eastwood 0.2.4 Clojure 1.9.0-alpha16 JVM 1.8.0_31\nDirectories scanned for source files:\n  src test\n== Linting app.routes.users ==\nsrc/app/routes/users.clj:133:43: suspicious-expression: -&gt; called with 1 args.  (-&gt; x) always returns x.  Perhaps there are misplaced parentheses?\nsrc/app/routes/users.clj:115:3: constant-test: Test expression is always logical true or always logical false: true in form (if true (do (users/update-user-password {:hash (:id params), :pass (:pass params)}) (ok)) (bad-request))\n== Linting app.routes.login ==\n== Linting app.helpers.helpers ==\n== Linting app.routes.inbox ==\n== Linting app.middleware ==\n</code></pre> <p>You can see from the example output that Eastwood found an issue with users.clj line 133.</p> <p>The issue is caused by an expression threading x into nothing.</p>"},{"location":"improving-code/formatting/","title":"Formatting Code","text":"<p>Spacemacs automatically formats code as its written.</p> <p><code>, =</code> or <code>M-RET =</code> is the format menu in Spacemacs across all languages</p> <p><code>TAB</code> indents the current line of code (or selected region).  Not that <code>TAB</code> may also trigger auto-completion too.</p> <p>Clojure Style Guide</p> <p>The Clojure Style Guide is a detailed guide to common code styles and idioms.  Adopting a style guide that follows most of these recommentations will help ensure code is easier to read and maintain by future Clojure developers</p>"},{"location":"improving-code/formatting/#cider-format-tools","title":"Cider format tools","text":"<p><code>, = b</code> (<code>cider-format-buffer</code>) - format the Clojure code in the current buffer.</p> <p><code>, = l</code> (<code>clojure-align</code>) - vertically align the current line within the context of the top level form or selected area</p> <p>Vertically align the values in a map</p> <pre><code>;; Before aligning arguments\n(def my-map\n  {:a-key 1\n   :other-key 2})\n\n;; After aligning arguments\n(def my-map\n  {:a-key     1\n   :other-key 2})\n</code></pre> <p>Clojure automatic align</p> <p><code>clojure-indent-style 'align-arguments</code> clojure layer variable automatically aligns arguments when triggering indentation, i.e. pressing Tab</p> <p>practicalli/spacemacs-config already containes this variable in the clojure layer</p> <p>Indentation of function forms Vertically align s-expressions</p> Aggressive Indent mode and Clojure LSP clash <p><code>aggressive-indent-mode</code> set as a clojure layer variable will automatically adjust indentation as code is entered into the buffer.</p> <p>Aggressive indent mode and Clojure LSP live linting will interact with each others changes and cause very strange side effects.  Either use Clojure LSP live linting or aggressive indent mode, but never both together.</p> <p>Enable aggressive indent mode by adding the a hook in the <code>dotspacemacs/user-config</code> section of the Spacemacs user configuration dotspacemacs/user-config section of .config/spacemacs/init.el<pre><code>(add-hook 'clojure-mode-hook #'aggressive-indent-mode)\n</code></pre> To disable Clojure LSP live linting .config/clojure-lsp/config.edn<pre><code>{:linters {:clj-kondo {:level :off}\n           :clj-depend {:level :off}}}\n</code></pre> Auto-indent code automatically</p>"},{"location":"improving-code/formatting/#clojure-lsp","title":"Clojure LSP","text":"<p>Clojure LSP uses cljfmt which has a large number of very strict rules, although all rules can be tailored or disabled as required.</p> <p>Add format rules to <code>.config/clojure-lsp/cljfmt.edn</code> file, adding <code>:cljfmt-config-path \"cljfmt.edn\"</code> setting in <code>.config/clojure-lsp/config.edn</code> to make use of those rules.</p> cljfmt rules from Practicalli Clojure LSP Config <p> practicalli/clojure-lsp-config provides a cljfmt configuration used by Clojure LSP to automatically format code in the current buffer.</p> <p>Several of the more strict cljfmt rules have been disabled to help keep code readable, e.g. allowing more than one blank line between code expressions. .config/clojure-lsp/cljfmt.edn<pre><code>{;; Clojure format\n ;; https://github.com/weavejester/cljfmt\n\n :cljfmt\n {;; correct indentation - see cljfm indents\n  :indentation?                          true\n\n  ;; remove whitespace surrounding inner forms\n  :remove-surrounding-whitespace?        true\n\n  ;; remove trailing whitespace in lines\n  :remove-trailing-whitespace?           true\n\n  ;; insert whitespace missing from between elements\n  :insert-missing-whitespace?            true\n\n  ;; Delete more than one consecutive blank line - annoying\n  :remove-consecutive-blank-lines?       false\n\n  ;; Remove spaces not used for indentation\n  :remove-multiple-non-indenting-spaces? true\n\n  ;; break hashmaps onto multiple lines\n  :split-keypairs-over-multiple-lines?   true\n\n  ;; Use #re for regex indents configuration\n  ;; :cljfmt {:indents {#re \".*\" ns [[:inner 0] [:inner 1]]}}\n  :indents {}}}\n</code></pre></p>"},{"location":"improving-code/formatting/#command-line-format","title":"Command Line format","text":"<p>cljstyle is a binary tool for checking and updating formatting for all Clojure files, following the Clojure style guide and very similar to the format of cljfmt tool from Clojure LSP.</p> <p> cljstyle releases page contains operating system specific binary files.  Download and install the appropriate file in the operating system execution path.</p> Recommended Linux install location <p>Extract the <code>cljstyle</code> binary from <code>cljstyle_xxx_linux.tar.gz</code> archive file to <code>$HOME/.local/bin/</code> which should already be on the operating system path.</p> <p>Check the format of all clojure files and print a report that includes diff view of recommended format changes <pre><code>cljstyle check\n</code></pre></p> <p>Or automatically update all Clojure files with any changes to their formatting (recommend adding or committing changes into version control first, to help identify format changes and roll back any undesirable formatting)</p> <pre><code>cljstyle fix\n</code></pre> <p>Using cljstyle and zprint for clojure formatting</p>"},{"location":"improving-code/formatting/#continuous-integration","title":"Continuous Integration","text":"<p> Setup Clojure GitHub Action includes cljstyle and zprint as optional tools to run as part of a continuous integration workflow.</p> <p>Example GitHub workflow for code quality</p> <pre><code>name: Test and Package project\non:\n  pull_request:\n  push:\n    branches:\n      - main\njobs:\n  clojure:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Cache Clojure Dependencies\n        uses: actions/cache@v3\n        with:\n          path:\n            - ~/.m2\n            - ~/.gitlibs\n          key: cache-${{ hashFiles('**/deps.edn') }}\n          restore-keys: clojure-deps-\n\n      - name: Prepare java\n        uses: actions/setup-java@v3\n        with:\n          distribution: 'temurin'\n          java-version: '17'\n\n      - name: Install clojure tools\n        uses: DeLaGuardo/setup-clojure@9.5\n        with:\n          cli: 1.11.1.1165    # Clojure CLI based on tools.deps\n          cljstyle: 0.15.0 # cljstyle\n          clj-kondo: 2022.10.05 # Clj-kondo\n\n      - name: Run Unit tests\n        run: clojure -X:test/run\n\n      - name: \"Lint with clj-kondo\"\n        run: clj-kondo --lint deps.edn src resources test --config .clj-kondo/config-ci.edn\n\n      - name: \"Check Clojure Style\"\n        run: cljstyle check --report\n</code></pre> <p>Practicalli GitHub Workflow for a Clojure project Build and run Clojure with Multi-stage Dockerfile</p>"},{"location":"improving-code/idiomatic-code-checking/","title":"Idiomatic code with Kibit","text":"<p>kibit is a static code analyzer for Clojure, ClojureScript, cljx and other Clojure variants. It uses core.logic to search for patterns of code that could be rewritten with a more idiomatic function or macro. For example if kibit finds the code</p> <pre><code>(defproject project-name \"0.0.1\"\n  :description \"Eastwood Sample Project\"\n  :license \"Eclipse Public License 1.0\"\n  :url \"http://www.bradcypert.com\"\n  :dependencies [[org.clojure/Clojure \"1.10.1\"]]\n  :plugins [[lein-tar \"3.2.0\"]\n            [jonase/eastwood \"0.2.4\"]\n            [lein-kibit \"0.1.5\"]])\n</code></pre> <p><code>lein kibit</code> in a terminal will run the analysis on your project and output recommendations</p> <pre><code>At /Users/brad/Projects/podcasts/app/src/app/db/processors.clj:14:\nConsider using:\n  (update-in podcast [:feed] podcast-service/parse-feed)\ninstead of:\n  (assoc podcast :feed (podcast-service/parse-feed (:feed podcast)))\n\nAt /Users/brad/Projects/podcasts/app/src/app/db/processors.clj:30:\nConsider using:\n  (when (not exists?)\n    (doall\n      (map\n        (partial notifications/new-episode podcast episode)\n        subscribed-users)))\ninstead of:\n  (if (not exists?)\n    (doall\n      (map\n        (partial notifications/new-episode podcast episode)\n        subscribed-users))\n    nil)\n\nAt /Users/brad/Projects/podcasts/app/src/app/modules/auth.clj:17:\nConsider using:\n  (if-not (some nil? [item source]) (hashers/check item source) false)\ninstead of:\n  (if (not (some nil? [item source])) (hashers/check item source) false)\n</code></pre> <p>Kibit will scan your code and check it against idiomatic code patterns (using <code>core.logic</code>) and recommend how to simplify and reduce your code complexity.</p> <p>The output excerpt shows two different suggestions: Simplifying an <code>if</code> to a <code>when</code> and condensing an <code>if</code> and <code>not</code> to an <code>if-not</code>.</p> <p><code>lein kibit --replace</code> will fix these issues for you.</p> <p><code>lein kibit --replace --interactive</code> will automatically walk you through each recommendation and ask if want to use it.</p>"},{"location":"improving-code/live-linting/","title":"Live linting","text":"<p>Clojure LSP includes clj-kondo which provides live static code analysis of Clojure code as its entered into the buffer.</p> <p>Linting is supported in all Clojure files (<code>.clj</code>, <code>.cljs</code>, <code>.cljc</code>, <code>.edn</code>).</p> <p>A mark appears in the margin showing line contain code that generates a warning or error.  A wavy underscore shows where on the line the issue is.  Moving the cursor to the underscore will show a pop-up describing the error.</p> <p>The total number of errors and warnings are show in in the modeline.</p> <p> </p>"},{"location":"improving-code/live-linting/#navigate-lint-errors","title":"Navigate lint errors","text":"<p><code>SPC e L</code> opens a window with a buffer containing the list of linting errors for the current file. Navigate between linting errors using <code>j</code> and <code>k</code>. <code>RET</code> to select an error, focusing the cursor in the other buffer on that error</p> <p><code>SPC b x</code> to close the buffer and window when you have finished.</p> <p> </p> <p>/home/practicalli/projects/practicalli/graphic-design/editors/spacemacs/screenshots/spacemacs-clojure-modeline-lsp-warnings-errors.png</p> <p>Keeping the flycheck buffer open will update as you move to linting errors in the source code buffer.</p>"},{"location":"improving-code/live-linting/#lsp-peek-errors","title":"LSP Peek Errors","text":"<p><code>, G e</code> opens LSP peek popup and shows a full list of errors in the project</p> <p> </p>"},{"location":"install-spacemacs/","title":"Install Spacemacs","text":"<p>Install prerequisites: Emacs, Java 17, Clojure CLI and Command Line tools </p> <ol> <li>Clone or download Spacemacs, first removing <code>~/.emacs.d</code> if it exists</li> <li>Clone practicalli/spacemacs-config user configuration.  Or start Emacs and use the Spacemacs install wizard, follow the manual configuration section</li> <li>Install Fira Code font (or update <code>dotspacemacs-default-font</code> to a name of a font on your operating system in the Spacemacs user configuration)</li> <li>Install All The Icons fonts  to support the doom modeline theme</li> </ol> <p> </p>"},{"location":"install-spacemacs/#clone-spacemacs","title":"Clone Spacemacs","text":"<p>Use your favourite git client or the following command in a terminal window to clone Spacemacs:</p> Free Desktop XDG configClassic config <pre><code>git clone https://github.com/syl20bnr/spacemacs ~/.config/emacs\n</code></pre> <pre><code>git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d\n</code></pre>"},{"location":"install-spacemacs/#clone-practicalli-spacemacs-configuration","title":"Clone Practicalli Spacemacs configuration","text":"<p>Clone  practicalli/spacemacs-config configuration or first create a fork and clone that fork</p> Free Desktop XDG configClassic config <p>Using SSH <pre><code>git clone git@github.com:practicalli/spacemacs-config.git ~/.config/spacemacs\n</code></pre></p> <p>Using HTTPS <pre><code>git clone https://github.com/practicalli/spacemacs-config ~/.config/spacemacs\n</code></pre> <code>~/.config/spacemacs/init.el</code> is the main configuration file, ensure <code>~/.spacemacs</code> file does not exist as that file would take precedence.</p> <p>Set the <code>SPACEMACSDIR</code> environment variable to the <code>~/.config/spacemacs</code> directory so that Spacemacs will find this location.  Add to <code>~/.profile</code> to support launching Emacs from a desktop launcher and the shell configuration, e.g. <code>~/.bashrc</code> for bash, <code>~/.zshenv</code> for Zshell. SPACEMACSDIR and XDG configurations<pre><code>export XDG_CONFIG_HOME=$HOME/.config\nexport XDG_DATA_HOME=$HOME/.local/share\nexport XDG_STATE_HOME=$HOME/.local/state\nexport XDG_CACHE_HOME=$HOME/.cache\n\n# Set XDG location of Emacs Spacemacs configuration\nexport SPACEMACSDIR=\"$XDG_CONFIG_HOME/spacemacs\"\n</code></pre></p> <p>Using SSH <pre><code>git clone git@github.com:practicalli/spacemacs-config.git ~/.spacemacs.d\n</code></pre></p> <p>Using HTTP <pre><code>git clone https://github.com/practicalli/spacemacs-config ~/.spacemacs.d\n</code></pre></p> <p><code>~/.spacemacs.d/init.el</code> is the main configuration file, ensure <code>~/.spacemacs</code> file does not exist as that file would take precedence.</p> Emacs custom settings <p><code>init.el</code> configuration separates Emacs custom settings into a <code>emacs-custom-setting</code> file.  <code>emacs-custom-setting</code> should be added to version control if the Emacs <code>customize</code> menu has been used to define settings. <code>emacs-custom-file</code> is defined in the <code>dotspacemacs/user-init</code> of the Spacemacs configuration <pre><code>  (setq custom-file (file-truename (concat dotspacemacs-directory \"emacs-custom-settings.el\")))\n  (load custom-file)\n</code></pre> A specific path could also be used to define the location of the custom file: <code>(setq custom-file \"~/.emacs.d/.cache/custom-settings\")</code></p>"},{"location":"install-spacemacs/#install-fira-code-font","title":"Install Fira Code font","text":"<p> Install Fira Code</p> <p> practicalli/spacemacs-config uses Fira Code, a mono-spaced font designed for source code and includes  ligatures and  many other features.</p> <p></p> <p>Use a different font with practicalli/spacemacs-config</p> <p>To use a different font when using the  practicalli/spacemacs-config, edit <code>init.el</code> and update the value for <code>dotspacemacs-default-font</code> to a name of a font on your system.</p>"},{"location":"install-spacemacs/#emacs-packages","title":"Emacs Packages","text":"<p>Spacemacs automatically downloads and compiles Emacs packages when Emacs is run.</p> <p>If Emacs supports native compilation, then the compilation process can take longer, although Emacs should run many tasks faster or more efficiently.</p> <p>Space a p opens <code>proced</code> showing active Emacs processes, such as native compilation</p>"},{"location":"install-spacemacs/#icon-fonts","title":"Icon Fonts","text":"<p> practicalli/spacemacs-config configuration uses the modern looking doom modeline theme, which requires fonts icons.</p> <p>Once Spacemacs is running, issue the following commands to install a wide range of fonts.</p> <ul> <li><code>SPC SPC all-the-icons-install-fonts</code></li> <li><code>SPC SPC nerd-icons-install-fonts</code></li> </ul> <p>Space q r to restart Spacemacs and see the finished results</p> <p> </p>"},{"location":"install-spacemacs/#spacemacs-ready-for-action","title":"Spacemacs ready for action","text":"<p>Spacemacs is now up and running and ready to take on the world.</p> <p>Already know how to use Spacemacs? jump to the  Clojure Projects section</p> <p>Otherwise look through the  Spacemacs Basics section to learn how to use Vim style editing and work with files, buffers and windows in Spacemacs.</p>"},{"location":"install-spacemacs/change-font/","title":"Fonts and Zooming","text":"<p>Any font currently installed in the operating system can be used for Spacemacs.</p> <p> practicalli/spacemacs-config sets Fira Code font, which is designed for working with source code and also supports ligatures.</p> <p>Spacemacs will use Source Code Pro by default.</p>"},{"location":"install-spacemacs/change-font/#fira-code","title":"Fira Code","text":"<p>Fira Code is a free mono-spaced font with programming ligatures, with specific ligatures for Clojure.</p> <p></p> <p>Space f e d to open the Spacemacs configuration file and edit the <code>dotspacemacs-default-font</code> values</p> <pre><code>   dotspacemacs-default-font '(\"Fira Code\"\n                               :size 12.0\n                               :weight normal\n                               :width normal)\n</code></pre>"},{"location":"install-spacemacs/change-font/#ubuntu-mono","title":"Ubuntu Mono","text":"<p>Ubuntu Mono is also a great font to use for code.  This font is available from the Ubuntu Font Family and on all Ubuntu operating systems (and derivatives).</p> <p>Space f e d to open the Spacemacs configuration file and edit the <code>dotspacemacs-default-font</code> values</p> <pre><code>   dotspacemacs-default-font '(\"Ubuntu Mono\"\n                               :size 16\n                               :weight normal\n                               :width normal)\n</code></pre>"},{"location":"install-spacemacs/change-font/#zoom-emacs-frame-and-font-size","title":"Zoom Emacs Frame and Font Size","text":"<p>If you attach an external monitor, share your screen, give demos or presentations in Emacs, then you may need to scale the font size of your buffer or if using multiple buffers, zoom the size of your Emacs frame.</p> <p>Use the Spacemacs Zoom menu to enter a transient state that will let you zoom text or frame size.</p> Key binding Description Space z f Zoom all Emacs frames, including the which-key and helm pop-up buffers Space z x Scale the font of the current buffer <p>Update font size</p> <p>If font or frame size is often changed, edit your <code>.spacemacs</code> configuration, <code>SPC f e d</code> and change the <code>:size</code> setting in <code>dotspacemacs-default-font</code>.</p>"},{"location":"install-spacemacs/clojure-layer/","title":"Adding Clojure support to Spacemacs","text":"<p>Adding Clojure support to Spacemacs is as easy as adding the Clojure layer to the Spacemacs configuration.</p> <p>Spacemacs can add the Clojure layer automatically, when you open a Clojure or ClojureScript file (<code>.clj</code> <code>.cljc</code> <code>.cljs</code>) for the very first time.  Spacemacs will prompt you, asking if you wish to install the Clojure layer.</p> <p>Saying yes will add <code>clojure</code> to the <code>~/.spacemacs</code> configuration and download all the relevant Emacs packages.</p> <p>Once the Clojure packages have downloaded, you are ready to use all the Clojure features.</p> <p> </p> <p>Restart Spacemacs after larger changes</p> <p>Space q r to restart Spacemacs when significant changes are made or something is not working correctly</p>"},{"location":"install-spacemacs/emacsclient-git-commit-messages/","title":"Emacsclient for Git commit messages","text":"<p>Configure the <code>core.editor</code> property with <code>emacsclient</code> to open Emacs for editing Git commit messages (assuming you do not specify the <code>-m \"commit message\"</code>option to the <code>git</code> command).</p> <p>You can run <code>emacsclient</code> in one of several ways (try these approaches until you find which one worked best for your operating system).</p> <p>1) in the same terminal as your <code>git</code> command, preferably with Emacs persistent server running.</p> <pre><code>git config --global core.editor \"emacsclient --tty\"\n</code></pre> <p>2) create a new Emacs frame, if you have Emacs persistent server running.</p> <pre><code>git config --global core.editor \"emacsclient --no-wait --create-frame\"\n</code></pre> <p>3) open in an existing Emacs application, if you are always running Emacs.</p> <pre><code>git config --global core.editor \"emacsclient --no-wait\"\n</code></pre> <p>4) Running Emacs as a daemon</p> <pre><code>git config --global core.editor \"emacsclient --alternate-editor\"\n</code></pre> <p>Or configure an operating system environment variable called <code>ALTERNATE_EDITOR</code> as an empty string, <code>\"\"</code>, which will call <code>emacs --daemon</code> if emacs is not running.</p> <p>Beware of old Emacs installs shipped with MacOSX</p> <p>If <code>emacsclient</code> is not working correctly, check to see which Emacs version it run, <code>SPC SPC emacs-version</code>.  Some MacOSX versions shipped with a very old version of Emacs (version 22).</p>"},{"location":"install-spacemacs/emacsclient-server/","title":"emacsclient and persistent server","text":"<p><code>emacsclient</code> will instantly open files in Emacs once an Emacs server process is running.</p> <p>Emacs persistent server will run in the background, even when Emacs is not running, listening for requests to open files.</p> <p>Run Spacemacs once per OS login</p> <p>Emacs is typically run once and kept open, as its feature rich enough to do all your tasks from Emacs.  Therefore the few seconds startup time is not seen as an issue.  If you stop and start Emacs constantly, as you may do with Vim, then you will of course notice this short delay.</p>"},{"location":"install-spacemacs/emacsclient-server/#configure-emacs-persistent-server","title":"Configure Emacs persistent server","text":"<p>Space f e d to edit your <code>.spacemacs</code> configuration</p> <p>Set <code>dotspacemacs-enable-server</code> and <code>dotspacemacs-persistent-server</code> to <code>t</code> (true).</p> <pre><code>   ;; If non-nil, start an Emacs server if one is not already running.\n   ;; (default nil)\n   dotspacemacs-enable-server t\n\n   ;; Set the emacs server socket location.\n   ;; If nil, uses whatever the Emacs default is, otherwise a directory path\n   ;; like \\\"~/.emacs.d/server\\\". It has no effect if\n   ;; `dotspacemacs-enable-server' is nil.\n   ;; (default nil)\n   dotspacemacs-server-socket-dir nil\n\n   ;; If non-nil, advise quit functions to keep server open when quitting.\n   ;; (default nil)\n   dotspacemacs-persistent-server t\n</code></pre> <p>Old Emacs installs shipped with MacOSX</p> <p>If <code>emacsclient</code> is not working correctly, check to see which Emacs version it run, <code>SPC SPC emacs-version</code>.  Some MacOSX versions shipped with a very old version of Emacs (version 22).</p>"},{"location":"install-spacemacs/line-numbers/","title":"Line Numbers","text":"<p>Space t n menu toggles line numbers, showing consecutive (absolute) A, relative R or visual V layout.</p> <p>Configure <code>dotspacemacs-line-numbers</code> in Spacemacs configuration file to show line numbers by default.</p> <p></p>"},{"location":"install-spacemacs/line-numbers/#relative-line-numbers-for-evil","title":"Relative line numbers for Evil","text":"<p>A relative numbering style (<code>visual</code>, <code>relative</code>) is highly recommended for vim-style editing as it provides an effective way to apply actions to multiple lines</p> <p>1 0 j jumps 10 lines forward</p> <p>g c 9 j comments 9 lines from current, downwards</p> <p>2 4 g r j selects multiple cursors for the next 24 lines</p> <p>Relative line numbering shows the current line number with all other numbers the relative number of lines away from the current line.  Relative numbering is useful for jumping to different parts of your file or running commands on a number of lines, eg. delete, indent, multiple cursors (g r)</p>"},{"location":"install-spacemacs/line-numbers/#visual-style-line-number-configuration","title":"Visual style line number configuration","text":"<p>Practicalli recommends using visual line numbers for Vim style editing, which provides relative numbering that does not count hidden or folded code.</p> <p>Space f e d open the Spacemacs user configuration file. Space s s <code>dotspacemacs-line-numbers</code> to jump to the configuration option.</p> <p>Change the <code>dotspacemacs-line-numbers</code> configuration to the preferred method. Space f s to save the file.   Space f e R reloads the configuration (or Space q r to restart Spacemacs).</p> <pre><code>dotspacemacs-line-numbers '(:visual t\n                            :disabled-for-modes dired-mode\n                                                doc-view-mode\n                                                pdf-view-mode\n                            :size-limit-kb 1000)\n</code></pre> <p>The configuration provides visual line numbers for buffers all buffers except dired, doc-view and pdf-view buffers.</p> <p>Line numbers are also disabled for large files, as it can slow Emacs down considerably (although this may be less of a problem with Emacs 26.3 onward and native line numbers).</p> <p>Turn line numbers off for all buffers by setting the <code>dotspacemacs-line-numbers</code> value to the default <code>nil</code> value.</p> <pre><code>dotspacemacs-line-numbers nil\n</code></pre> <p>Jumping to a line without line numbers</p> <p>Space j l labels each line with a unique letter combination providing a quick way to a line even if there are no line numbers.</p>"},{"location":"install-spacemacs/manual-configuration/","title":"Manual Configuration","text":"<p>When not using  practicalli/spacemacs-config configuration, use the Spacemacs configuration wizzard to set the preferred editing style and Spacemacs distribution.</p> <p><code>~/.spacemacs</code> configuration file is created by the Spacemacs Wizard.</p> <p>Space f e d to open the <code>~/.spacemacs</code> configuration file for manual editing</p>"},{"location":"install-spacemacs/manual-configuration/#spacemacs-install-wizard","title":"Spacemacs install Wizard","text":"<p>Run Emacs as normal.</p> <p>Spacemacs prompts how it should configure the fundamentals of Spacemacs operation.</p> <p>For the preferred style, select Among the stars aboard the Evil flagship (vim)</p> <p></p> <p>For the distribution, select The Standard Distribution (spacemacs)</p> <p></p> <p>Spacemacs will now download all its Emacs packages and this will take several minutes, depending on the speed of your connection to the Internet.</p> <p>Space q r to restart Spacemacs once all the packages have downloaded.  This is not strictly necessary, but helps ensure the packages are working correctly.</p>"},{"location":"install-spacemacs/manual-configuration/#spacemacs-is-ready-for-action","title":"Spacemacs is ready for action","text":"<p>Spacemacs is now up and running and ready to take on the world.</p> <p>Next task is to configure Spacemacs for Clojure.</p> <p>Space f e d to open the <code>~/.spacemacs</code> configuration file for manual editing and customising layers any any other options.</p>"},{"location":"install-spacemacs/maximised-full-screen/","title":"Maximised or Fullscreen at startup","text":"<p>You can configure Emacs to start in maximised mode (just like maximising an applications window) or in fullscreen mode for minimum distraction.</p> <p>Change one of the following option in the <code>dotspacemacs/init</code> function of the Spacemacs configuration. The fullscreen option overrides the maximised option.</p> <pre><code>dotspacemacs-fullscreen-at-startup t\n\ndotspacemacs-maximized-at-startup t\n</code></pre> <p>To find these lines quickly, use <code>SPC s s to search and start typing the name of the option.</code>C-j<code>to move down the matches,</code>C-k<code>to move up.</code>RET` to jump to the current line.</p> <p>Practicalli uses the following settings for these options:</p> <pre><code>   ;; If non nil the frame is fullscreen when Emacs starts up. (default nil)\n   ;; (Emacs 24.4+ only)\n   dotspacemacs-fullscreen-at-startup nil\n   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.\n   ;; Use to disable fullscreen animations in OSX. (default nil)\n   dotspacemacs-fullscreen-use-non-native nil\n   ;; If non nil the frame is maximized when Emacs starts up.\n   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.\n   ;; (default nil) (Emacs 24.4+ only)\n   dotspacemacs-maximized-at-startup t\n</code></pre> <p>Option values</p> <p>For all options, <code>t</code>  represents true, <code>nil</code> represents false. Where a name is used for a value it should be preceded with a single quote character, eg, <code>'all</code></p>"},{"location":"install-spacemacs/pre-install/","title":"Pre-install","text":"<p>Spacemacs is a configuration for Emacs, so naturally Emacs should be installed before Spacemacs can be used.</p> <p>Clojure CLI should be installed to support Clojure development, along with several supporting development tools.</p> <p>Command Line Tools support searching for files and spell checking.</p>"},{"location":"install-spacemacs/pre-install/#install-emacs","title":"Install Emacs","text":"<p>Emacs is available for Linux, MacOSX and Windows.  The Spacemacs Readme suggested ways to install Emacs</p> Emacs Version 29 recommended <p>Emacs 29.x is the current stable release and includes optomised JSON support which is valuable for Language Server Protocol servers.  Native compilation is also supported, although this is still a relatively new approach so there may be issues.</p> Debian PackagesHomebrewWindowsMsys2 <p><code>apt-cache show emacs</code> to check available versions of Emacs in the Ubuntu package manager. If version 29 is available, install Emacs using the Ubuntu package manager.</p> <pre><code>apt install emacs\n</code></pre> <p>vterm compile packages</p> <p>vterm is compiled during the package install when first starting Spacemacs with the Practicalli Spacemaca Config.</p> <p>Install packages to support compile of vterm <pre><code>apt install cmake libvterm-bin libtool-bin\n</code></pre></p> Emacs snapshot packages built from source <p>Ubuntu Emacs Lisp team Personal Package Archive provides daily snapshot Emacs packages build from the latest changes commited to the Emacs source code repository.  </p> <p>Installing a snapshot package essentially installs the unreleased version of Emacs, e.g. Emacs 30.</p> <p><code>apt install emacs-snapshot</code> package to use the latest nightly build of Emacs, although be aware that some things may break.</p> Build Emacs 29 from source <p>Building Emacs 29 from source code on Ubuntu is relatively straight forward task, although it will take a little time to compile.  Building Emacs allows customisation of some features, such as native compilatin of elisp to enhance the performance of Emacs.</p> <p>Emacs Plus from Homebrew provides many options, including native compilation and Spacemacs Icon for application launchers.</p> <p><pre><code>brew tap d12frosted/emacs-plus\nbrew install emacs-plus@29 --with-spacemacs-icon\n</code></pre> Or install with native compilation support <pre><code>brew tap d12frosted/emacs-plus\nbrew install emacs-plus@29 --with-native-comp --with-spacemacs-icon\n</code></pre></p> <p>Emacs.app is installed to: <code>/usr/local/opt/emacs-plus@28</code></p> <p>Optionally run Emacs plus as a service <pre><code>brew services start d12frosted/emacs-plus/emacs-plus@28\n</code></pre></p> <p>Run <code>emacs</code></p> <p>If Ntative Compilation option was included, take a break whilst Emacs compiles all the things.</p> <p>The Spacemacs README lists other options for MacOSX.</p> <p>Download Emacs 29 zip archive from the GNU repository for Windows and extract the zip file to <code>%AppData%/local/Programs/emacs</code>.</p> <p>Alternatively, if you are using the Chocolatey package manager then install Emacs version 28</p> <p>Add the Emacs directory to the <code>PATH</code> variable in your user account environment variables.</p> <p>To start Emacs run the command <code>runemacs.exe</code>.  You can also pin this to the start menu or task bar.</p> Access to common Unix tools <p>Command line tools, such as <code>diff</code>, are used by Emacs.  To have these command line tools available in Windows, install Emacs as above but then run emacs from a Unix shell such as GitBash.</p> <p>Install Emacs (64bits build) with the following:</p> <pre><code>pacman -S mingw-w64-x86_64-emacs\n</code></pre>"},{"location":"install-spacemacs/pre-install/#install-clojure-cli","title":"Install Clojure CLI","text":"<p>Practicalli Clojure Install Guide</p> <p>Clojure CLI provide a simple and configurable way to:</p> <ul> <li>Run Clojure programs and tools</li> <li>Run an interactive REPL (Read-Eval-Print Loop) and evaluate Clojure expressions, usually with a Clojure aware editor</li> <li>Managing dependencies (via tools.deps) from Maven and Git repositories</li> </ul> <p>Using community tools on top of Clojure CLI tools provides tasks to create, develop, build and deploy Clojure applications and services</p> <p>Follow the Practicalli Clojure Install Guide to install Clojure and supporting tools.</p>"},{"location":"install-spacemacs/pre-install/#command-line-tools","title":"Command Line Tools","text":"<p>Emacs uses several external command line tools.  There are some very efficient search tools that are recommended (ripgrep, silver searcher).</p> <p>Consider installing these tools to enhance your Spacemacs experience.</p>"},{"location":"install-spacemacs/pre-install/#spell-check","title":"spell check","text":"<p>spell-checking layer in Spacemacs supports ispell, hunspell, and aspell command line tools. Aspell is the recommended spell checking tool.</p> Debian PackagesHomebrewManual <p>Aspell binary is usually installed on Unix systems by default.  Use <code>apt instal aspell</code> if not already present.</p> <p><code>brew install aspell</code></p> <p>Aspell Install</p>"},{"location":"install-spacemacs/pre-install/#text-search","title":"Text search","text":"<p>Search text buffers uses an external search tool. Although grep is available in most operating systems, ripgrep (rg) or silver-searcher (ag) offer far greater performance and have more search options.</p> <p><code>dotspacemacs-search-tools '(\"rg\" \"ag\" \"pt\" \"ack\" \"grep\")</code> in the Spacemacs configuration defines the order of preference for the search tool to use.</p> <p>ripgrep (rg) Silver Searcher (ag)</p>"},{"location":"install-spacemacs/pre-install/#find-files","title":"Find files","text":"<p>Space p opens the projectile menu for finding files relative to the current project.</p> <p>Projectile uses the external command line tool <code>find</code> to index files that are not part of a version controlled project (using <code>git</code> for projects versioned with Git).</p> <p><code>fd</code> is an external command line binary that is faster than the <code>find</code> command.  If installed, projectile will automatically use <code>fd</code> instead of <code>find</code></p> <p>fd install instructions by operating system </p>"},{"location":"install-spacemacs/pre-install/#helm-locate","title":"helm-locate","text":"<p>The <code>locate</code> binary is used by Space f L (<code>helm-locate</code>) to find files and directories on the operating system file space.</p> <p><code>helm-locate</code> is the fastest way to search for files across the whole file space on your computer as it uses the updatedb database.  Run <code>updatedb</code> to ensure all files are in the database, especially very recent changes.</p> Debian PackagesHomebrew <pre><code>apt install locate\n</code></pre> <p>findutils Homebrew findutils <pre><code>brew install findutils\n</code></pre></p>"},{"location":"install-spacemacs/themes/","title":"Themes","text":"<p>Space T s opens a helm selection menu to select from all available themes</p> <p>You can select a different theme or cycle through the currently added themes.</p> Spacemacs Description Space T n Next theme in list Space T p Previous theme in list Space T s Select theme from list (all themes from gallery) Space T s Ctrl+c Ctrl+f Apply themes when scrolling through the list of names (helm-follow-mode) <p> </p>"},{"location":"install-spacemacs/themes/#adding-themes-to-spacemacs","title":"Adding Themes to Spacemacs","text":"<p>Themes are set by adding the theme name to the <code>dotspacemacs-themes</code> list.  The first theme in the list is loaded when Spacemacs starts.</p> <pre><code>dotspacemacs-themes '(doom-gruvbox-light\n                      doom-gruvbox\n                      spacemacs-dark\n                      spacemacs-light\n                      cyberpunk)\n</code></pre> <p>The order of the themes in the list is the order Spacemacs will cycle through those themes, <code>SPC T n</code> for the next theme and <code>SPC T p</code> for the previous theme.</p> <p>The first time you select a theme it will be automatically downloaded, installed and used.  This may take a few seconds to load. There are many themes available for Spacemacs that will change the colours of text, background, etc.</p> <p><code>doom-gruvbox</code> and <code>doom-gruvbox-light</code> themes are used for the screenshots in this guide and doom-modeline theme provides an uncluttered Emacs modeline theme.</p> <p> </p> Original Emacs theme <p>Add <code>(disable-theme)</code> to <code>dotspacemacs/user-config</code> section of <code>.spacemacs</code> to remove any custom theme and use the Emacs default colors.  Or set <code>(dotspacemacs-themes '(default))</code> in <code>.spacemacs</code> to use a theme similar to the Emacs colors.</p>"},{"location":"install-spacemacs/troubleshooting/","title":"Troubleshooting","text":"<p>Space q r (<code>restart-emacs</code>) is a quick way to resolve some issues, especially when installing multiple packages.  Some Emacs packages depend on others being present, which may not be the case when first installing.</p> <p>Space f e D (<code>ediff</code>) to compare your Spacemacs configuration with the default Spacemacs configuration. j and k to navigate the differences, b to copy a change from the Spacemacs configuration to your own.  q to quit comparing, ? for more help.</p> <p>Switch to the Spacemacs develop branch to get the latest fixes and features (until version 0.300 is release to master).</p> <p>Read the latest docs at develop.spacemacs.org or the layer specific README.org files on GitHub</p>"},{"location":"install-spacemacs/troubleshooting/#reviewing-issues","title":"Reviewing issues","text":"<p>View the Spacemacs issues on GitHub before submitting a new issue.  You may find a fix to your problem, even if only a temporary solution.</p> <p>Space h d s generates system information in the kill ring that should be added to help confirm an existing issue with meaningful data, helping to identify the root cause.</p> <p>Also review the GitHub issues for a specific package that may be causing issues.  A search for <code>emacs package-name</code> should help you find its GitHub repository.</p>"},{"location":"install-spacemacs/troubleshooting/#ask-the-community","title":"Ask the community","text":"<p>If you are unsure if you have found an issue, or do not understand why some behavior is happening, then ask the Spacemacs community, they are very helpful and friendly.</p> <ul> <li>Spacemacs Gitter chat - any aspects of Spacemacs</li> <li>#Spacemacs on Clojurians Slack community - Clojure specific discussions (create a free account)</li> </ul>"},{"location":"install-spacemacs/troubleshooting/#reporting-issues","title":"Reporting Issues","text":"<p>Space h I to create an issue on the Spacemacs GitHub repository which includes Spacemacs environment details, helping others understand and resolve the issue effectively.</p> <p>Read how to make a great bug report</p> <p>https://github.com/syl20bnr/spacemacs/wiki/Debugging#how-to-make-a-great-bug-report</p> <p>Please do not raise an issue directly via the GitHub website.  If you do, you will slow down the response to this issue and the first response to your issue will be to provide system information.</p>"},{"location":"install-spacemacs/troubleshooting/#specific-package-issue","title":"Specific Package Issue","text":"<p>If there are issues with a particular package, delete the package directory from the <code>~/.emacs.d/elpa/&lt;emacs-version&gt;/develop/</code> directory.</p> <p>Space q r to restart Spacemacs and download the package again.</p>"},{"location":"install-spacemacs/troubleshooting/#issues-after-package-update","title":"Issues after package update","text":"<p>If multiple packages are causing issues after an update, or you are short on time to diagnose an issue, then rollback to the packages used before the update.</p> <p>Space b h to visit the Spacemacs home page and select Rollback Package Update</p> <p></p> <p>Restore individual packages</p> <p>Instead of a full rollback, copy specific package directories from <code>~/.emacs.d/.cache/.rollback/&lt;emacs-version&gt;/develop</code> to the elpa directory <code>~/.emacs.d/elpa/&lt;emacs-version&gt;/develop</code></p>"},{"location":"install-spacemacs/troubleshooting/#emacs-package-recipe-for-specific-version","title":"Emacs package recipe for specific version","text":"<p>Spacemacs installs packages from MELPA, which builds Emacs packages from the latest commit (GitHub/GitLab).</p> <p>If a newly installed package has an issue, rather than rollback all the packages upgraded, configure a package recipe to point to an older version of the package.</p> <p>For example, pin the <code>cider</code> package to a specific Git commit by adding the following recipe to <code>dotspacemacs-additional-packages</code></p> <pre><code>(cider :location\n   (recipe :fetcher github\n           :repo \"clojure-emacs/cider\"\n           :commit \"ae376429a8cf22b82a9e18ff844bdfbe5fc7ecc1\"))\n</code></pre> <p>Delete the package from <code>~/.emacs.d/elpa/</code> directory and reload the Spacemacs configuration, <code>SPC f e R</code> (or restart Emacs <code>SPC q r</code>)</p> <p>Related or dependent packages may also need a recipe or at least their packages removed from the elpa directory.</p>"},{"location":"install-spacemacs/troubleshooting/#scorched-earth-approach","title":"Scorched Earth approach","text":"<p>Delete <code>~/.emacs.d/elpa</code> director and <code>SPC q r</code> to restart Spacemacs.  This will remove any complied Emacs packages that may have become corrupted or replace older packages that are now causing issues.</p> <p>As there are 100's of packages, the scorched earth approach of just deleting them and downloading fresh copies can be surprisingly effective at resolving issues with very little effort.</p>"},{"location":"install-spacemacs/troubleshooting/#debugging-spacemacs","title":"Debugging Spacemacs","text":"<p>The Spacemacs debugging page explains concepts needed to debug Spacemacs and to report issues in an useful way.</p> <ul> <li>Debugging memory issues</li> </ul>"},{"location":"install-spacemacs/troubleshooting/#issues-with-spawned-processes","title":"Issues with spawned processes","text":"<p><code>SPC a p</code> (<code>list-processes</code>) lists the processes started by or from within Spacemacs, eg. for Clojure its <code>nrepl-server</code> and <code>nrepl-connection</code> processes when running <code>cider-jack-in</code>. Use <code>SPC a P</code> (<code>proced</code>) to see all operating system processes.</p> <p></p> <p><code>d</code> to immediately kill a process (no prompt is given to confirm kill action).</p> <p>The process list shows the command used to start the process, which can be useful in diagnosing issues.</p> <p><code>RET</code> on buffer name in the process list will open that buffer in a separate window.</p> <p>If there are problems shutting down the REPL, <code>, s q q</code> (<code>cider-quit</code>),  check to see if the CIDER nrepl-server or nrepl-connection process has been killed.</p> <p><code>q</code> to quit the process list buffer.</p> <p>Identify rogue processes</p> <p>Space a P lists all operating system processes Space Space helm-top displays a list of running processes</p>"},{"location":"install-spacemacs/troubleshooting/#profiling-emacs","title":"Profiling Emacs","text":"<p>Space Space profiler-start to start monitoring how much CPU and memory resources that different parts of Emacs are using.  The profiler is especially useful if there are slow running commands or Emacs is unresponsive at times.</p> <p>Space Space profiler-report displays buffers showing the results of profiling Emacs.</p> <p></p> <p>Space Space profiler-stop to stop profiling Emacs.</p>"},{"location":"install-spacemacs/update/","title":"Update Spacemacs and Packages","text":"<p>Updating Spacemacs comes in three sections:</p> <ul> <li>Pull latest Spacemacs commits</li> <li>Compare changes with <code>.spacemacs-template</code> file</li> <li>Install Packages</li> </ul> <p> </p>"},{"location":"install-spacemacs/update/#update-spacemacs-project-files","title":"Update Spacemacs project files","text":"<p>Open <code>$XDG_CONFIG_HOME/emacs/README.md</code> or <code>$HOME/.emacs.d/README.md</code></p> <p>Space g s  opens Magit status for the Spacemacs project</p> <p><code>F</code> pop-ups the pull menu, use <code>-r</code> to set rebase to <code>true</code></p> <p><code>u</code> to pull from upstream.</p> <p>If upstream is not set, Spacemacs will prompt you with a list of available remotes, there will be only one (the remote added when you first cloned the repository).</p> <p>Spacemacs should update itself using Git in a few seconds.</p> <p><code>q</code> to quit Magit status buffer.</p>"},{"location":"install-spacemacs/update/#update-the-spacemacs-configuration","title":"Update the Spacemacs configuration","text":"<p>Space f e D opens an <code>ediff</code> session, comparing your current <code>.spacemacs</code> file with the latest <code>.spacemacs-template</code>.</p> <p>N, P navigates (down/up) between each difference in the file.  B copies a change from the template to your <code>.spacemacs file</code>.  Accept all the changes from the template unless you know you made a specific change to your <code>.spacemacs</code> file.</p> <p>Q to quit the ediff session and Space f s to save the changes to the Spacemacs configuration.</p>"},{"location":"install-spacemacs/update/#update-packages","title":"Update Packages","text":"<p>Space f e U  updates shows the list of packages that will be updated</p> <p>Y to confirm you want to install the packages</p> <p>Wait until Spacemacs prompts to restart</p> <p>Space q r to restart Spacemacs.  The new versions of the packages are install when Spacemacs starts up again.</p> <p>If downloading a considerable number of packages, or you see a lot of warnings, then using <code>SPC q r</code> for a second time can be useful to ensure that all new packages have been loaded correctly.</p>"},{"location":"install-spacemacs/clojure-lsp/","title":"Clojure LSP","text":"<p>Clojure LSP provides a standard set of features for editing and manipulating source code, e.g. autocompletion, code navigation, refactor code, inline syntax errors and idiom warnings.</p> <p>LSP and the REPL</p> <p>The REPL is used to design Clojure effectively by providing instant feedback on code expressions as they are written and evaluated.  A REPL based workflow supports the most effective approach to development of Clojure apps and services.</p> <p>Clojure LSP supports the editing activities to write Clojure code effectively, providing a static analysis of the code base that drives advance editing, navigation and refactor tasks.</p>"},{"location":"install-spacemacs/clojure-lsp/#install-clojure-lsp","title":"Install Clojure LSP","text":"<p>Many editors that provide an LSP client also manage an install of Clojure LSP </p> <ul> <li>Spacemacs with LSP layer enabled</li> <li>Neovim with Mason Plugin</li> </ul> <p>Otherwise download the relevant file from the  Clojure LSP Releases.</p> <p> Clojure LSP Releases</p>"},{"location":"install-spacemacs/clojure-lsp/#lsp-layer-configuration","title":"LSP layer configuration","text":"<p>Adding the <code>lsp</code> layer to <code>.spacemacs</code> will automatically use LSP for Clojure formatting, autocompletion and syntax checking.</p> <p>LSP will override some features provided by CIDER, so you may wish to configure lsp and lsp UI.</p> <p>practicalli/spacemacs.d provides an LSP configuration with minimal UI elements and no conflicts with CIDER.</p> <pre><code>     (lsp :variables\n          lsp-ui-doc-enable nil       ;; disable all doc popups\n          lsp-ui-sideline-enable nil  ;; disable sideline bar for less distraction\n          treemacs-space-between-root-nodes nil) ;; no spacing in treemacs views\n</code></pre>"},{"location":"install-spacemacs/clojure-lsp/#specification","title":"Specification","text":"<p>The Language Server Protocol (LSP) is a specification for tooling developers, defining a protocol for editors to talk to a language server and provide static analysis features, such as refactoring, symbol navigation, code completion, syntax highlighting.</p> <p>A standard protocol means an LSP server implementation can support a wide range of tools, reducing the work of editor maintainers and helping ensure common features are available across all editors. LSP does not provide any implementation, this is left to tooling and editor developers.</p>"},{"location":"install-spacemacs/clojure-lsp/#references","title":"References","text":"<ul> <li>Configure Emacs as a Clojure IDE guide</li> <li>A guide on disabling/enabling lsp-mode features</li> <li>Emacs LSP UI website and emacs-lsp/lsp-ui repository</li> </ul>"},{"location":"install-spacemacs/clojure-lsp/configure-lsp-and-cider/","title":"Configure LSP and Cider","text":"<p>Lsp layer defines a common configuration for all languages in Spacemacs.</p> <p>The LSP Mode website provides examples of LSP features and there is a long list of LSP settings</p> <p>Disable LSP for Clojure</p> <p>Set the clojure layer variable <code>clojure-backend</code> to <code>cider</code> to disable LSP features and use CIDER for auto-completion and formatting of code.</p> Start with Minimal Features and add when useful <p>Practicalli recommends starting with a minimal LSP configuration to avoid conflict with features that are present in Cider.  LSP features can be enabled when you find them valuable.</p> <p>practicalli/spacemacs.d configuration for Spacemacs included a minimal configuration for Cider and Clojure-lsp. This configuration uses predominately CIDER features.  Minimal LSP UI elements and features are added without distracting from the minimal Spacemacs experience.</p>"},{"location":"install-spacemacs/clojure-lsp/configure-lsp-and-cider/#pre-requisites","title":"Pre-requisites","text":"<p>LSP UI requires icons provides by the all-the icons font to support the breadcrumbs on headerline feature and Treemacs visual elements.</p> <p><code>SPC SPC all-the-icons-install-fonts</code> command installs the required icons</p> <p> </p>"},{"location":"install-spacemacs/clojure-lsp/configure-lsp-and-cider/#disable-live-linting-tools","title":"Disable Live Linting tools","text":"<p>clojure-lsp includes the latest clj-kondo binary which is used to generate the static analysis of the project code.</p> <p>Remove <code>clojure-enable-linters 'clj-kondo</code> from the <code>clojure</code> layer variable in the Spacemacs configuration to avoid duplication of results.</p>"},{"location":"install-spacemacs/clojure-lsp/configure-lsp-and-cider/#spacemacs-clojure-layer-configuration","title":"Spacemacs Clojure layer configuration","text":"<p>practicalli/spacemacs.d configuration uses clojure-mode features for indenting and aligning forms as you type.  Optomisations include using fipp to generate pretty print output and limiting the size of the repl buffer to keep Emacs responsive.</p> Spacemacs configuration - `dotspacemacs-configuration-layers`<pre><code>     (clojure :variables\n     ;; clojure-backend 'cider               ;; use cider and disable lsp\n     ;; clojure-enable-linters 'clj-kondo    ;; clj-kondo included in lsp\n     cider-repl-display-help-banner nil      ;; disable help banner\n     cider-pprint-fn 'fipp                   ;; fast pretty printing\n     clojure-indent-style 'align-arguments   ;; vertically align forms\n     clojure-align-forms-automatically t     ;; align form while typing\n     clojure-toplevel-inside-comment-form t  ;; evaluate expressions in comment as top level\n     cider-result-overlay-position 'at-point ;; results shown right after expression\n     cider-overlays-use-font-lock t          ;; use font face everywhere\n     cider-repl-buffer-size-limit 100        ;; limit lines shown in REPL buffer\n     )\n</code></pre>"},{"location":"install-spacemacs/clojure-lsp/configure-lsp-and-cider/#aligning-forms","title":"Aligning forms","text":"<p><code>SPC m = l</code> aligns arguments in the current line or selected region.  Automatic aligning of forms is not yet supported in LSP for Clojure.</p> <p>LSP aligning forms not fully supported</p> <p>Support for associative syntax alignment is an issue to add aligning forms to cljfmt, which is used by LSP for formatting.</p> <p>Aggressive Indent Mode conflicts with LSP</p> <p>Adding aggressive-indent-mode as a hoot to clojure-mode when Clojure LSP is configured to format and align code will cause a serious conflict, with each tool trying to change the alignment of the other tool, leading to very unpredictable events. <code>(add-hook 'clojure-mode-hook #'aggressive-indent-mode)</code></p>"},{"location":"install-spacemacs/clojure-lsp/configure-lsp-and-cider/#lsp-layer-variables","title":"LSP layer variables","text":"<p>Add the <code>lsp</code> layer to <code>.spacemacs</code> and include the following variables for an uncluttered LSP UI.</p> Spacemacs configuration - dotspacemacs/user-config<pre><code>(lsp :variables\n          ;; Formatting and indentation - use Cider instead\n          lsp-enable-on-type-formatting t\n          ;; Set to nil to use CIDER features instead of LSP UI\n          lsp-enable-indentation t\n          lsp-enable-snippet t  ;; to test again\n\n          ;; symbol highlighting - `lsp-toggle-symbol-highlight` toggles highlighting\n          ;; subtle highlighting for doom-gruvbox-light theme defined in dotspacemacs/user-config\n          lsp-enable-symbol-highlighting t\n\n          ;; Show lint error indicator in the mode line\n          lsp-modeline-diagnostics-enable t\n          ;; lsp-modeline-diagnostics-scope :workspace\n\n          ;; popup documentation boxes\n          ;; lsp-ui-doc-enable nil          ;; disable all doc popups\n          lsp-ui-doc-show-with-cursor nil   ;; doc popup for cursor\n          ;; lsp-ui-doc-show-with-mouse t   ;; doc popup for mouse\n          ;; lsp-ui-doc-delay 2             ;; delay in seconds for popup to display\n          lsp-ui-doc-include-signature t    ;; include function signature\n          ;; lsp-ui-doc-position 'at-point  ;; positioning of doc popup: top bottom at-point\n          lsp-ui-doc-alignment 'window      ;; relative location of doc popup: frame window\n\n          ;; code actions and diagnostics text as right-hand side of buffer\n          lsp-ui-sideline-enable nil\n          lsp-ui-sideline-show-code-actions nil\n          ;; lsp-ui-sideline-delay 500\n\n          ;; lsp-ui-sideline-show-diagnostics nil\n\n          ;; reference count for functions (assume their maybe other lenses in future)\n          lsp-lens-enable t\n\n          ;; Efficient use of space in treemacs-lsp display\n          treemacs-space-between-root-nodes nil\n\n          ;; Optimization for large files\n          lsp-file-watch-threshold 10000\n          lsp-log-io nil)\n</code></pre>"},{"location":"install-spacemacs/clojure-lsp/configure-lsp-and-cider/#customising-symbol-highlighting","title":"Customising symbol highlighting","text":"<p>Symbol highlighting can be toggled using the command <code>lsp-toggle-symbol-highlighting</code> and the startup state can be set using the lsp layer configuration variable <code>lsp-enable-symbol-highlighting</code></p> <p>The face used for highlighting will vary by theme.  Use the Emacs <code>customize</code> command to configure the <code>lsp-syntax-highlight-read</code> face or add the <code>theming</code> layer to <code>.spacemacs</code> and add a custom face to <code>dotspacemacs/user-init</code> section of <code>.spacemacs</code></p> <p>In this example, the default orange background color is removed and the font weigh set to bold.</p> Spacemacs configuration - dotspacemacs/user-init<pre><code>(setq-default\n    theming-modifications\n      '((doom-gruvbox-light\n         (lsp-face-highlight-read :background nil :weight bold))))\n</code></pre>"},{"location":"install-spacemacs/clojure-lsp/snippets/","title":"Clojure LSP snippets","text":"<p>Clojure LSP contains several  built-in snippets. </p> <p> practicalli/clojure-lsp-config repository enhances and extends the available snippets.</p> <p> Design of Practicalli Clojure LSP Snippets</p>"},{"location":"install-spacemacs/clojure-lsp/snippets/#install-practicalli-clojure-lsp-snippets","title":"Install Practicalli Clojure LSP snippets","text":"<p> practicalli/clojure-lsp-config contains a wide range of snippets for Clojure LSP, some of which were contributed to the Clojure LSP project</p> Free Desktop XDG ConfigClassic Config <p>Clone via SSH <pre><code>git clone -o practicalli git@github.com:practicalli/clojure-lsp-config.git $XDG_CONFIG_HOME/clojure-lsp\n</code></pre></p> <p>Clone via HTTPS <pre><code>git clone -o practicalli https://github.com/practicalli/clojure-lsp-config.git $XDG_CONFIG_HOME/clojure-lsp\n</code></pre></p> <p>Clone via SSH <pre><code>git clone -o practicalli git@github.com:practicalli/clojure-lsp-config.git $HOME/.clojure-lsp\n</code></pre></p> <p>Clone via HTTPS <pre><code>git clone -o practicalli https://github.com/practicalli/clojure-lsp-config.git $HOME/.clojure-lsp\n</code></pre></p> <p>Clojure LSP should automatically pick up the new changes without having to restart.</p> <p>Restart LSP Workspace</p> <p>, b r will restart the current LSP workspace in the event snippets are not showing</p>"},{"location":"install-spacemacs/clojure-lsp/snippets/#using-snippets","title":"Using snippets","text":"<p>Start typing the name of the snippet and it should appear in the auto-completion pop-up menu.  Matching entry names end with <code>(Snippet)</code>.</p> <p> </p> <p>Enter to expand the highlighted snipped</p> <p>Tab / Ctrl+j &amp; Ctrl+k or arrow-keys navigate the auto-completion pop-up list when there are multiple entries.</p>"},{"location":"install-spacemacs/clojure-lsp/snippets/#adding-custom-snippets","title":"Adding custom snippets","text":"<p>Edit the <code>config.edn</code> file.</p> <p>The <code>:additional-snippets</code> key has a collection of hash-maps, with each hash-map representing a snippet.</p> <p><code>$n</code> represents a tab-stop, where the <code>TAB</code> key will jump throughout the snippet. <code>n</code> is an integer number to define the order of the tab-stops, e.g. <code>$1</code>, <code>$2</code>, $3.</p> <p><code>$0</code> is a special tab-stop that denotes the end of the tab-stops, ending the snippet interaction.</p> <p><code>${n:placeholder text}</code> allows text to be placed at the tab-stop to give an indication as to the value to be completed.  The placeholder text is automatically highlighted when tabbing into the tab-stop, so typing a new value replaces the placeholder text.</p> <p>Highlighting and replacing the text does not work for the <code>$0</code> tab-stop, so placeholder text should not be used with this specific tab-stop.</p>"},{"location":"install-spacemacs/enhance-clojure-experience/","title":"Enhanced Clojure experience","text":"<p>Enhance the clojure layer by adding automatic linting and refator tools with Clojure LSP and recommended CIDER options.  Complement the Clojure layer with general development tools including a git client (Magit), markdown and org-mode support.</p> <p>Practicalli Spacemacs user config</p> <p> practicalli/spacemacs-config provides a comprehensive configuration for Clojure development</p> Layer name Description <code>auto-completion</code> complete names of functions and symbol names, also list snippets. <code>clojure</code> CIDER, optionally with clj-refactor and clj-kondo linter <code>git</code> git version control with Magit in full screen, with fringe highlighting of changes in buffers <code>github</code> GitHub API for remote repositories and gists <code>lsp</code> language server protocol - static analysis driven editing features <code>markdown</code> writing project descriptions in README.md and other markdown files <code>multiple-cursors</code> multiple concurrent edits with more than one cursor <code>g r</code> <code>org</code> write documentation, organize tasks with org-mode <code>spell-checking</code> spell check as you type using your Operating System spell checker <code>SPC S s</code> <code>syntax-checking</code> syntax checking / linting as you type (flycheck with clj-kondo for Clojure) <code>treemacs</code> visual file system browser (file explorer) <code>SPC p t</code> <code>version-control</code> general version control features, eg. ediff, fringe highlights <p>Install clj-kondo binary</p> <p>Automatic linting requires the clj-kondo binary installed on the operating system path, or the Clojure LSP server which contains clj-kondo. Practicalli Clojure contains install instructions for these tools.</p>"},{"location":"install-spacemacs/enhance-clojure-experience/#add-layers","title":"Add layers","text":"<p><code>SPC f e d</code> opens the <code>.spacemacs</code> configuration file (<code>M-m f e d</code> holy mode)</p> <p>Use <code>SPC s s</code> and start typing <code>configuration-layers</code> to search for the <code>dotspacemacs-configuration-layers</code> section.  <code>RTN</code> to jump to the highlighted line, <code>C-j</code> to move down the matching lines, <code>C-k</code> to move up.</p> <p>Either copy the <code>dotspacemacs-configuration-layers</code> from practicalli/spacemacs.d or copy the individual configurations in the rest of this page.</p> <p><code>SPC f s</code> to save the file.</p> <p><code>SPC q r</code> to restart Spacemacs which will load and configure all the new layers and their Emacs packages.</p> <p>Reload Configuration or Restart Emacs</p> <p>Space q r to restart Emacs with a new configuration is recommended when making a big change or adding layers. Space f e ++R++ to reload the <code>~/.spacemacs</code> configuration for smaller changes.</p> <p>Practicalli Spacemacs Example Configuration</p>"},{"location":"install-spacemacs/enhance-clojure-experience/#auto-completion","title":"Auto-completion","text":"<p>Enable auto-completion for programming languages.  In Clojure this includes functions, namespaces and other symbols.</p> <p>Yasnippet are included in the auto-completion popup and are sorted with the most frequently used snippets first.</p> <pre><code>(auto-completion :variables\n                 auto-completion-enable-help-tooltip t\n                 auto-completion-enable-snippets-in-popup t\n                 auto-completion-enable-sort-by-usage t)\n</code></pre> <p>To have auto-completion as soon as typing starts, add <code>auto-completion-idle-delay nil</code> to the auto-completion variables</p>"},{"location":"install-spacemacs/enhance-clojure-experience/#clojure","title":"Clojure","text":"<p>Enable Clojure support but differ the backend to Clojure LSP rather than CIDER.  The clojure-lsp binary should be downloaded automatically.</p> <p>Enable the kaocha-runner to use Kaocha test runner from within the REPL.</p> <pre><code>(clojure :variables\n         cider-repl-display-help-banner nil      ;; disable help banner\n         cider-pprint-fn 'fipp                   ;; fast pretty printing\n         cider-overlays-use-font-lock t\n         cider-repl-buffer-size-limit 100        ;; limit lines shown in REPL buffer to prevent performance issues\n         clojure-indent-style 'align-arguments\n         clojure-align-forms-automatically t\n         clojure-toplevel-inside-comment-form t  ;; evaluate expressions in comment as top level\n         clojure-enable-kaocha-runner t)\n</code></pre> <p>Add the variable <code>cider-result-overlay-position 'at-point</code> to show results shown right after expression (useful for evaluated a nested expression). Otherwise results from evaluating expressions show at the end of the top-level expression.</p>"},{"location":"install-spacemacs/enhance-clojure-experience/#git-and-github","title":"Git and GitHub","text":"<p>Enable Magit Git client in Emacs and open Magit Status, <code>SPC g s</code> full screen (q restores previous layout). Show word-granularity differences in current diff hunk.</p> <p>Enable GitHub features to clone repositories, push commits and create pull requests (Magit Forge) all from within Emacs.</p> <p>Enable fringe highlight of version control (Git) changes in buffers</p> <pre><code>(git :variables\n     git-magit-status-fullscreen t\n     magit-diff-refine-hunk t\n     git-enable-magit-todos-plugin t)\ngithub\n(version-control :variables\n                 version-control-diff-tool 'diff-hl\n                 version-control-global-margin t)\n</code></pre>"},{"location":"install-spacemacs/enhance-clojure-experience/#language-server-protocol-lsp","title":"Language Server Protocol (LSP)","text":"<p>Clojure LSP provides common editor features across all Clojure aware editors.  A configuration with minimal visual impact.</p> <pre><code>(lsp :variables\n     ;; Formatting and indentation\n     lsp-enable-on-type-formatting t\n     lsp-enable-indentation t\n     lsp-enable-snippet t\n\n     lsp-enable-symbol-highlighting t\n\n     ;; popup documentation\n     lsp-ui-doc-enable t               ;; documentation popups\n     lsp-ui-doc-show-with-cursor nil   ;; doc popup triggered by cursor\n     lsp-ui-doc-show-with-mouse nil    ;; doc popup triggered by mouse\n     lsp-ui-doc-delay 1                ;; delay in seconds for popup to display\n     lsp-ui-doc-include-signature t    ;; include function signature\n     ;; lsp-ui-doc-position 'top       ;; top bottom at-point\n     ;; lsp-ui-doc-alignment 'window   ;; frame window\n\n     ;; code actions and diagnostics text as right-hand side of buffer\n     lsp-ui-sideline-enable nil\n     lsp-ui-sideline-show-code-actions nil\n     ;; lsp-ui-sideline-delay 500\n     ;; lsp-ui-sideline-show-diagnostics nil\n\n     ;; function reference count and test coverage\n     lsp-lens-enable t\n\n     ;; Efficient use of space in treemacs-lsp display\n     treemacs-space-between-root-nodes nil\n\n     ;; Optimization for large files\n     lsp-file-watch-threshold 10000\n     lsp-log-io nil)\n</code></pre>"},{"location":"install-spacemacs/enhance-clojure-experience/#multiple-cursors","title":"Multiple cursors","text":"<p>Edit multiple lines of text concurrently by creating multiple cursors, especially useful for editing the form of lines which have different values.</p> <pre><code>multiple-cursors\n</code></pre>"},{"location":"install-spacemacs/enhance-clojure-experience/#org-mode","title":"Org-mode","text":"<p>Enable Spacemacs Org-mode with support for a range of additional features useful for development, including a custom TODO list workflow.</p> <pre><code>(org :variables\n     org-enable-github-support t\n     org-enable-bootstrap-support t\n     org-enable-reveal-js-support t\n     org-want-todo-bindings t\n     org-enable-org-journal-support t\n     org-journal-dir \"~/projects/journal/\"\n     org-journal-file-format \"%Y-%m-%d\"\n     org-journal-date-prefix \"#+TITLE: \"\n     org-journal-date-format \"%A, %B %d %Y\"\n     org-journal-time-prefix \"* \"\n     org-journal-time-format \"\"\n     org-journal-carryover-items \"TODO=\\\"TODO\\\"|TODO=\\\"DOING\\\"|TODO=\\\"BLOCKED\\\"|TODO=\\\"REVIEW\\\"\"\n\n     ;; org-enable-jira-support t\n     ;; jiralib-url \"https://org-domain.atlassian.net:443\"\n     )\n</code></pre>"},{"location":"install-spacemacs/enhance-clojure-experience/#layouts","title":"Layouts","text":"<p>spacemacs-layouts layer added to set variables, <code>SPC TAB</code> restricted to current layout buffers</p> <p>Kill buffers when killing layer - SPC l x</p> <pre><code>(spacemacs-layouts :variables\n                   spacemacs-layouts-restrict-spc-tab t\n                   persp-autokill-buffer-on-remove 'kill-weak)\n</code></pre>"},{"location":"install-spacemacs/enhance-clojure-experience/#configure-doom-modeline","title":"Configure Doom modeline","text":"<p>Configuration used by Practicalli for the Doom modeline, based on the configuration: seagle0128/doom-modeline</p> <pre><code>(spacemacs-modeline :variables\n                    doom-modeline-height 12\n                    doom-modeline-major-mode-color-icon t\n                    doom-modeline-buffer-file-name-style 'relative-to-project\n                    doom-modeline-display-default-persp-name t\n                    doom-modeline-minor-modes nil\n                    doom-modeline-modal-icon nil)\n</code></pre>"},{"location":"install-spacemacs/enhance-clojure-experience/#spell-checking","title":"Spell checking","text":"<p>Spell as you type with Flyspell package, which requires external command such as ispell, hunspell, aspell</p> <p><code>SPC S s</code> to check the spelling of the current word</p> <pre><code>spell-checking\n</code></pre>"},{"location":"install-spacemacs/enhance-clojure-experience/#programming-ligatures","title":"Programming Ligatures","text":"<p>Support font ligatures (fancy symbols) in all programming language modes, when using Fira Codes and other fonts that support ligatures.</p> <p>Including ligatures for text-mode may cause issues with org-mode and magit.</p> <pre><code>(unicode-fonts :variables\n               unicode-fonts-enable-ligatures t\n               unicode-fonts-ligature-modes '(prog-mode))\n</code></pre>"},{"location":"install-spacemacs/enhance-clojure-experience/clj-kondo-via-lsp/","title":"clj-kondo Server","text":"<p>For environments where the <code>clj-kondo</code> binary does not run, configure clj-kondo-lsp-server as an language server protocol (LSP) server.  This provides the same features as using clj-kondo as a linter.</p> <p>Example configuration is provided in practicalli/spacemacs.d</p> <p>Not designed as a full LSP implementation</p> <p>clj-kondo server only provides static analysis data and is not a full implementation of the Language Server Protocol. Clojure LSP is implementing the Language Server Protocol in full for Clojure and is built on top of the analytic data generated by clj-kondo</p>"},{"location":"install-spacemacs/enhance-clojure-experience/clj-kondo-via-lsp/#a-process-for-each-project","title":"A process for each project","text":"<p>When opening a Clojure project, a prompt asks if the project should be imported. Every imported project will spawn an LSP process. LSP will remember which projects are imported and spawns an LSP process if Emacs is restarted, adding a few seconds to the startup time.</p> <p> </p> <p><code>SPC a p</code> calls the <code>list-process</code> command which includes all the <code>clojure-lsp</code> processes if you are concerned about resource usage, although this is very low.  <code>j</code>/<code>k</code> navigates the list of processes, <code>d</code> deletes a process and <code>q</code> quits the process list browser.</p>"},{"location":"install-spacemacs/enhance-clojure-experience/clj-kondo-via-lsp/#ui-differences","title":"UI differences","text":"<p>Using clj-kondo via LSP shows the text of its messages on the right hand side of the buffer when you move the cursor over an error. When using clj-kondo as a linter, the messages are shown in a popup.</p>"},{"location":"install-spacemacs/enhance-clojure-experience/clj-kondo-via-lsp/#install-and-configure-clj-kondo-via-lsp","title":"Install and Configure clj-kondo via LSP","text":"<p>Download the clj-kondo-lsp-server-standalone.jar</p> <p>Save the clj-kondo jar file to the path to <code>~/.local/apps/clj-kondo-lsp-server-standalone.jar</code> or preferred location.</p> <p>Create a script called <code>clojure-lsp-server-clj-kondo</code> and add the java command to run the LSP server, updating the path to the .jar file if required.</p> <pre><code>#!/bin/sh\njava -jar ~/.local/apps/clj-kondo-lsp-server-standalone.jar\n</code></pre> <p>Space f e d to open the Spacemacs configuration file</p> <p>Add <code>lsp</code> to the <code>dotspacemacs-layers-configuration</code></p> <p>Add the following code to <code>dotspacemacs/user-config</code></p> Spacemacs Configuration - dotspacemacs/user-config<pre><code> (use-package lsp-mode\n   :ensure t\n   :hook ((clojure-mode . lsp))\n   :commands lsp\n   :custom ((lsp-clojure-server-command '(\"clojure-lsp-server-clj-kondo\")))\n   :config (dolist  (m '(clojure-mode clojurescript-mode))\n             (add-to-list 'lsp-language-id-configuration `(,m . \"clojure\"))))\n</code></pre> <p>Space f s to save the file and Space q r to restart Emacs.  This will download the required packages and load in the LSP configuration in order.</p>"},{"location":"install-spacemacs/enhance-clojure-experience/evil-structural-editing/","title":"Evil Safe Structural Editing","text":"<p>The Clojure layer also includes evil-cleverparens which ensures Clojure code structure is respected.</p> <p>Safe structural editing in Evil normal state respects structural editing too, meaning the standard evil commands can be used for cutting and deleting text without breaking Clojure or Lisp code structures.</p> <p>Safe structural editing is provided by the package evil-cleverparens which is included in the Clojure layer. By default this mode is not activated.</p> Spacemacs Evil Description <code>SPC m T s</code> <code>, T s</code> Enable evil safe structural editing for the current buffer <p><code>\ud83c\udd82</code> is displayed in the mode-line when safe structural editing is enabled.</p>"},{"location":"install-spacemacs/enhance-clojure-experience/evil-structural-editing/#configuration","title":"Configuration","text":"<p>Enable for all Clojure buffers by adding the following function in <code>dotspacemacs/user-config</code></p> <pre><code>(spacemacs/toggle-evil-safe-lisp-structural-editing-on-register-hook-clojure-mode)\n</code></pre> <p>Or to enable evil safe structural editing for all supported major modes, use this function instead:</p> <pre><code>(spacemacs/toggle-evil-safe-lisp-structural-editing-on-register-hooks)\n</code></pre>"},{"location":"install-spacemacs/enhance-clojure-experience/evil-structural-editing/#manually-managing-structure","title":"Manually managing structure","text":"<p>Although it is not structural editing, in Evil you can delete to a particular character. Clojure code inside of <code>()</code> can be deleted without deleting the closing <code>)</code></p> <ol> <li>Enter normal mode</li> <li>Move to the starting point of the text you wish to delete</li> <li><code>d t )</code> - delete everything up to, but not including the closing parenthesis</li> </ol>"},{"location":"install-spacemacs/enhance-clojure-experience/smartparens/","title":"Smartparens","text":"<p>Clojure and other lisp languages are defined as data structures, so expressions always start with parentheses, <code>( )</code>.  If there is an imbalanced pairing of open and closing parentheses, then the code fails to work and causes an error.</p> <p>smartparens in strict mode ensures balanced parentheses by adding a closing parentheses when you type an open parentheses.  This works for <code>()</code>, <code>[]</code>, <code>{}</code> and <code>\"\"</code>.</p>"},{"location":"install-spacemacs/enhance-clojure-experience/smartparens/#configure-smartparens","title":"Configure Smartparens","text":"<p>Smartparens is part of the standard distribution of Spacemacs, so no install is necessary.</p> <p>Enable smartparens global strict mode to maintain the structure of Clojure and Emacs Lisp code, ensuring that a closing paren cannot be deleted without the content of that structure being deleted first.</p> <p>Smart closing parentheses means you can jump over closing structure characters by typing <code>)</code></p> <p>Highlighting all delimiters gives a visual guide to pairs of structural characters, to complement the rainbow parens that also comes with the Clojure layer.</p> <pre><code>   ;; If non-nil `smartparens-strict-mode' will be enabled in programming modes.\n   ;; (default nil)\n   dotspacemacs-smartparens-strict-mode t\n\n   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes\n   ;; over any automatically added closing parenthesis, bracket, quote, etc\u2026\n   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)\n   dotspacemacs-smart-closing-parenthesis t\n\n   ;; Select a scope to highlight delimiters. Possible values are `any',\n   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and\n   ;; emphasis the current one). (default 'all)\n   dotspacemacs-highlight-delimiters 'all\n</code></pre>"},{"location":"introduction/additional-resources/","title":"Resources","text":"<p>Additional support for learning Spacemacs and Clojure development.</p>"},{"location":"introduction/additional-resources/#spacemacs","title":"Spacemacs","text":"<ul> <li> Spacemacs Website</li> <li> Spacemacs ABC - walk-through of features in alphabetical order</li> <li> SimpleTutorials: Spacemacs</li> </ul>"},{"location":"introduction/additional-resources/#clojure-books","title":"Clojure Books","text":"<p>Practicalli Clojure Practicalli Clojure WebApps Practicalli Clojurescript</p> <p> Clojure cookbook</p>"},{"location":"introduction/additional-resources/#clojure-challenges","title":"Clojure Challenges","text":"<ul> <li> 4Ever Clojure exercises &amp;  4Clojure walk-through videos</li> <li> Exercism.io Clojure track</li> </ul>"},{"location":"introduction/additional-resources/#clojure-reference","title":"Clojure Reference","text":"<ul> <li> Clojure.org,  features and  rational</li> <li> Clojure documentation</li> <li> Clojure Cheatsheet</li> <li> Clojure Toolbox</li> </ul>"},{"location":"introduction/contributing/","title":"Contributing to Practicalli","text":"<p>Practicalli books are written in markdown and use MkDocs to generate the published website via a GitHub workflow.  MkDocs can also run a local server using the <code>make docs</code> target from the <code>Makefile</code></p> <p> Issues  Pull requests  practicalli/spacemacs.d</p> <p> practicalli/spacemacs is written in markdown and uses MkDocs to generate the website via a GitHub action.</p> <p> practicalli/spacemacs-config contains the complete Spacemacs configuration used in this guide written in Emacs Lisp, with its own  Issues and  pull requests</p> <p>By submitting content ideas and corrections you are agreeing they can be used in this workshop under the  Creative Commons Attribution ShareAlike 4.0 International license.  Attribution will be detailed via  GitHub contributors.</p> <p>All content and interaction with any persons or systems must be done so with respect and within the Practicalli Code of Conduct.</p>"},{"location":"introduction/contributing/#book-status","title":"Book Status","text":""},{"location":"introduction/contributing/#submit-and-issue-or-idea","title":"Submit and issue or idea","text":"<p> Raise an issue via the GitHub repository when</p> <ul> <li>a page contains examples or explaintions that are not clear, suggesting an alternative where relevant.</li> <li>a topic is not covered or further examples are required</li> </ul> <p>For small issues or if a discussion is required, post a message on  #practicalli channel of the Clojurians Slack community.</p>"},{"location":"introduction/contributing/#considering-a-pull-request","title":"Considering a Pull request?","text":"<p>Pull Request Commits must be cryptographically signed</p> <p>All commits contributed to Practicalli must be signed via a legitimate SSH or GPG key to avoid the risk of commit spoofing.</p> <p>Configure commit signing with SSH key - Practicalli Engineering</p> <p>All pull requests must include an entry in CHANGELOG.md or will not be merged.  A changelog entry allows the community to follow the changes to the book.</p> <p>Each pull request will have a number of CI workflows run against the contribution, checking the format of the content and if a changelog entry has been provided.</p> <p>Please keep pull requests small and focused, as they are much quicker to review and easier to accept.  Ideally PR's should be for a specific page or at most a section.</p> <p>A PR with a list of changes across different sections will be closed without merging as these take considerable time to review.</p> <p>Issues such as grammar improvements are typically a sign of a rushed section that requires a rewrite, so a pull request to fix a typeographic error will probably not be merged.  Raise an issue, or post a thread in the  Clojurians Slack #practicall channel</p>"},{"location":"introduction/contributing/#contributing-to-spacemacs","title":"Contributing to Spacemacs","text":"<p>The  Spacemacs contribution guidelines details how to get help, report issues and contribute to the project.</p> <p><code>SPC h I</code> to raise an issue on the  Spacemacs GitHub issue tracker, automatically including your Spacemacs and Operating system details.</p> <p>Please review issues and leave feedback, especially confirming issues are reproducible on your Spacemacs configuration. <code>SPC h d s</code> to include your system configuration.</p> <p>Contribute changes via pull requests:</p> <ol> <li>Fork the Spacemacs project on GitHub and clone your fork</li> <li>Make changes and update relevant README files and the CHANGELOG.develop file</li> <li>Commit changes to the new branch and push to your fork.</li> <li>Visit your fork on GitHub and create a pull request (or  setup forge and create PR from Magit)</li> </ol> <p> </p> <p>Making a change to a pull request you have created is also easy to do</p> <p> </p>"},{"location":"introduction/contributing/#thank-you-to-all-contributors","title":"Thank you to all contributors","text":"<p>A huge thank you to Rich Hickey and the team at Cognitect for creating and continually guiding the Clojure language.  Special thank you to Alex Miller who has provided excellent advice on working with Clojure and the CLI tooling.</p> <p>I would also like to thank everyone that has joined in with the  London Clojurins community,  ClojureBridgeLondon,  Clojurians Slack community,  Clojurians Zulip community and  Clojureverse community.</p> <p>Thank you to everyone who sponsors the Practicalli websites and videos and for the recent  Clojurists Together sponsorship, it helps me continue the work at a much faster pace.</p> <p>Special thanks to Bruce Durling for getting me into Cloure in the first place.</p> <p> duianto for discussions and accepting my pull requests to Spacemacs</p> <p>In no specific order, the following people have provided valuable input to this work</p> <ul> <li>Chris Howe-Jones - @agile-geek</li> <li>Colin Yates - @yatesco</li> <li>Jun Tian</li> <li> Stefan Pfeiffer</li> </ul>"},{"location":"introduction/repl-workflow/","title":"REPL Driven Development","text":"<p>Always be REPL'ing</p> <p>Coding without a REPL feels limiting. The REPL provides fast feedback from code as its crafted, testing assumptions and design choices every step of the journey to a solution  - John Stevenson, Practical.li</p> <p>Clojure is a powerful, fun and highly productive language for developing applications and services.  The clear language design is supported by a powerful development environment known as the REPL (read, evaluate, print, loop).  The REPL gives you instant feedback on what your code does and enables you to test either a single expression or run the whole application (including tests).</p> <p>REPL driven development is the foundation of working with Clojure effectively</p> <p>An effective Clojure workflow begins by running a REPL process.  Clojure expressions are written and evaluated immediately to provide instant feedback. The REPL feedback helps test the assumptions that are driving the design choices.</p> <ul> <li>Read - code is read by the Clojure reader, passing any macros to the macro reader which converts those macros into Clojure code.</li> <li>Evaluate - code is compiled into the host language (e.g. Java bytecode) and executed</li> <li>Print - results of the code are displayed, either in the REPL or as part of the application.</li> <li>Loop - the REPL is a continuous process that evaluates code, either a single expression or the whole application.</li> </ul> <p>Design decisions and valuable data from REPL experiments can be codified as specifications and unit tests</p> <p>Practicalli REPL Reloaded Workflow</p> <p>The principles of REPL driven development are implemented in practice using the Practicalli REPL Reloaded Workflow and supporting tooling.  This workflow uses Portal to inspect all evaluation results and log events, hot-load libraries into the running REPL process and reloads namespaces to support major refactor changes.</p>"},{"location":"introduction/repl-workflow/#evaluating-source-code","title":"Evaluating source code","text":"<p>A REPL connected editor is the primary tool for evaluating Clojure code from source code files, displaying the results inline.</p> <p>Source code is automatically evaluated in its respective namespace, removing the need to change namespaces in the REPL with (<code>in-ns</code>) or use fully qualified names to call functions.</p> <p>Evaluate Clojure in Spacemacs</p> <p><code>, e f</code> evaluates the top level form under the cursor, <code>, e e</code> evaluated the expression immediately before the cursor (useful for evaluating nested expressions)</p> <p> </p> <p>Hint</p> <p><code>, e ;</code> (<code>cider-eval-defun-to-comment</code>) evaluates the current form and prints the result under the expression as a comment</p> <p>Adding result comment is an effective way to show the expected results of the code design, especially as a journal.</p> Evaluate Clojure in a Terminal UI REPL <p>Entering expressions at the REPL prompt evaluates the expression immediately, returning the result directly underneath  </p>"},{"location":"introduction/repl-workflow/#rich-comment-blocks-living-documentation","title":"Rich Comment blocks - living documentation","text":"<p>The <code>(comment ,,,)</code> function wraps code that is only run directly by the developer using a Clojure aware editor.</p> <p>Expressions in rich comment blocks can represent how to use the functions that make up the namespace API.  For example, starting/restarting the system, updating the database, etc.  Expressions provide examples of calling functions with typical arguments and make a project more accessible and easier to work with.</p> <p>Clojure Rich Comment to manage a service</p> <pre><code>(ns practicalli.gameboard.service)\n\n(defn app-server-start [port] ,,,)\n(defn app-server-start [] ,,,)\n(defn app-server-restart [] ,,,)\n\n(defn -main\n  \"Start the service using system components\"\n  [&amp; options] ,,,)\n\n(comment\n  (-main)\n  (app-server-start 8888)\n  (app-server-stop)\n  (app-server-restart 8888)\n\n  (System/getenv \"PORT\")\n  (def environment (System/getenv))\n  (def system-properties (System/getProperties))\n  ) ; End of rich comment block\n</code></pre> <p>Rich comment blocks are very useful for rapidly iterating over different design decisions by including the same function but with different implementations.  Hide clj-kondo linter warnings for redefined vars (<code>def</code>, <code>defn</code>) when using this approach.</p> <pre><code>;; Rich comment block with redefined vars ignored\n#_{:clj-kondo/ignore [:redefined-var]}\n(comment\n  (defn value-added-tax []\n    ;; algorithm design - first idea)\n\n  (defn value-added-tax []\n    ;; algorithm design - second idea)\n\n  ) ;; End of rich comment block\n</code></pre> <p>The \"Rich\" in the name is an honourary mention to Rich Hickey, the author and benevolent dictator of Clojure design.</p>"},{"location":"introduction/repl-workflow/#design-journal","title":"Design Journal","text":"<p>A journal of design decisions makes the code easier to understand and maintain.  Code examples of design decisions and alternative design discussions are captured, reducing the time spent revisiting those discussions.</p> <p>Journals simplify the developer on-boarding processes as the journey through design decisions are already documented.</p> <p>A Design Journal is usually created in a separate namespace, although it may start as a rich comment at the bottom of a namespace.</p> <p>A journal should cover the following aspects</p> <ul> <li>Relevant expressions use to test assumptions about design options.</li> <li>Examples of design choices not taken and discussions why (saves repeating the same design discussions)</li> <li>Expressions that can be evaluated to explain how a function or parts of a function work</li> </ul> <p>The design journal can be used to create meaningful documentation for the project very easily and should prevent time spent on repeating the same conversations.</p> <p>Example design journal</p> <p>Design journal for TicTacToe game using Reagent, ClojureScript and Scalable Vector Graphics</p>"},{"location":"introduction/repl-workflow/#viewing-data-structures","title":"Viewing data structures","text":"<p>Pretty print shows the structure of results from function calls in a human-friendly form, making it easier for a developer to parse and more likely to notice incorrect results.</p> <p>, e p on the Spacemacs Clojure menu has several commands to Pretty Print data structure results when evaluating code.</p> <p>, d v is the Cider Inspect menu for paging through very large data sets and navigate nested data structures in detail.</p> <p></p> <p>, d is the Cider debug menu which can inspect view intermediate values and data structures during the debugging of Clojure function calls.</p> <p>Cider inspector is an effective way to navigate nested data and page through large data sets.</p> <p>Tools to view and navigate code</p> <ul> <li> Cider inspector is an effective way to navigate nested data and page through large data sets.</li> <li> Portal Inspector to visualise many kinds of data in many different forms.</li> </ul> <p></p>"},{"location":"introduction/repl-workflow/#code-style-and-idiomatic-clojure","title":"Code Style and idiomatic Clojure","text":"<p>Clojure aware editors should automatically apply formatting that follows the  Clojure Style guide.</p> <p>Live linting with clj-kondo suggests common idioms and highlights a wide range of syntax errors as code is written, minimizing bugs and therefore speeding up the development process.</p> <p> </p> <p>Clojure LSP is build on top of clj-kondo</p> <p> Clojure LSP uses clj-kondo static analysis to provide a standard set of development tools (format, refactor, auto-complete, syntax highlighting, syntax &amp; idiom warnings, code navigation, etc).</p> <p>Clojure LSP can be used with any Clojure aware editor that provides an LSP client, e.g.  Spacemacs,  Doom Emacs,  Neovim, VSCode.</p> <p>Clojure Style Guide</p> <p>The  Clojure Style guide provides examples of common formatting approaches, although the development team should decide which of these to adopt.  Emacs <code>clojure-mode</code> will automatically format code and so will Clojure LSP (via cljfmt).  These tools are configurable and should be tailored to the teams standard.</p>"},{"location":"introduction/repl-workflow/#data-and-function-specifications","title":"Data and Function specifications","text":"<p> Clojure spec is used to define a contract on incoming and outgoing data, to ensure it is of the correct form.</p> <p>As data structures are identified in REPL experiments, create data specification to validate the keys and value types of that data.</p> <pre><code>;; ---------------------------------------------------\n;; Address specifications\n(spec/def ::house-number string?)\n(spec/def ::street string?)\n(spec/def ::postal-code string?)\n(spec/def ::city string?)\n(spec/def ::country string?)\n(spec/def ::additional string?)\n\n(spec/def ::address   ; Composite data specification\n  (spec/keys\n   :req-un [::street ::postal-code ::city ::country]\n   :opt-un [::house-number ::additional]))\n;; ---------------------------------------------------\n</code></pre> <p>As the public API is designed, specifications for each functions arguments are added to validate the correct data is used when calling those functions.</p> <p> Generative testing provides a far greater scope of test values used incorporated into unit tests. Data uses clojure.spec to randomly generate data for testing on each test run.</p>"},{"location":"introduction/repl-workflow/#test-driven-development-and-repl-driven-development","title":"Test Driven Development and REPL Driven Development","text":"<p>Test Driven Development (TDD) and REPL Driven Development (RDD) complement each other as they both encourage incremental changes and continuous feedback.</p> <p>Test Driven Development fits well with Hammock Time, as good design comes from deep thought</p> <ul> <li>RDD enables rapid design experiments so different approaches can easily and quickly be evaluated .</li> <li>TDD focuses the results of the REPL experiments into design decisions, codified as unit tests.  These tests guide the correctness of specific implementations and provide critical feedback when changes break that design.</li> </ul> <p> Unit tests should support the public API of each namespace in a project to help prevent regressions in the code.  Its far more efficient in terms of thinking time to define unit tests as the design starts to stabilize than as an after thought.</p> <p><code>clojure.test</code> library is part of the Clojure standard library that provides a simple way to start writing unit tests.</p> <p> Clojure spec can also be used for generative testing, providing far greater scope in values used when running unit tests.  Specifications can be defined for values and functions.</p> <p>Clojure has a number of  test runners available.  Kaocha is a test runner that will run unit tests and function specification checks.</p> <p>Automate local test runner</p> <p>Use  kaocha test runner in watch mode to run tests and specification check automatically (when changes are saved) <pre><code>clojure -X:test/watch\n</code></pre></p>"},{"location":"introduction/repl-workflow/#continuous-integration-and-deployment","title":"Continuous Integration and Deployment","text":"<p>Add a  continuous integration service to run tests and builds code on every shared commit.  Spin up testable review deployments when commits pushed to a pull request branch, before pushing commits to the main deployment branch, creating an effective pipeline to gain further feedback.</p> <ul> <li> CircleCI provides a simple to use service that supports Clojure projects.</li> <li> GitHub Workflows and GitHub actions marketplace to quickly build a tailored continuous integration service, e.g. Setup Clojure GitHub Action.</li> <li> GitLab CI</li> </ul> <p></p>"},{"location":"introduction/repl-workflow/#live-coding-with-data-stuart-halloway","title":"Live Coding with Data - Stuart Halloway","text":"<p>There are few novel features of programming languages, but each combination has different properties. The combination of dynamic, hosted, functional and extended Lisp in Clojure gives developers the tools for making effective programs. The ways in which Clojure's unique combination of features can yield a highly effective development process.</p> <p>Over more than a decade we have developed an effective approach to writing code in Clojure whose power comes from composing many of its key features. As different as Clojure programs are from e.g. Java programs, so to can and should be the development experience. You are not in Kansas anymore!</p> <p>This talk presents a demonstration of the leverage you can get when writing programs in Clojure, with examples, based on my experiences as a core developer of Clojure and Datomic.</p> <p> </p>"},{"location":"introduction/writing-tips/","title":"Writing tips for MkDocs","text":"<p>Making the docs more engaging using the mkdocs-material theme reference guide</p> Configuring Colors <p>Material for MkDocs - Changing the colors lists the primary and accent colors available.</p> <p>HSL Color Picker for codes to modify the theme style, overriding colors in <code>docs/assets/stylesheets/extra.css</code></p>"},{"location":"introduction/writing-tips/#hypertext-links","title":"Hypertext links","text":"<p>Links open in the same browser window/tab by default.</p> <p>Add <code>{target=_blank}</code> to the end of a link to configure opening in a new tab</p> <pre><code>[link text](url){target=_blank}\n</code></pre>"},{"location":"introduction/writing-tips/#buttons","title":"Buttons","text":"<p>Convert any link into a button by adding <code>{.md-button}</code> class names to end of the markdown for a link, which uses <code>.md-button-primary</code> by default.  Include <code>target=_blank</code> for buttons with links to external sites.</p> <pre><code>[link text](http://practical.li/blog){.md-button target=_blank}\n</code></pre> <p>Or specify a different class</p> <pre><code>[link text](http://practical.li/blog){.md-button .md-button-primary}\n</code></pre> <p>Add an icon to the button</p> <p> Practicalli Issues  Practicalli Blog</p> <pre><code>[:fontawesome-brands-github: Practicalli Issues](http://practical.li/blog){ .md-button .md-button-primary }\n[:octicons-heart-fill-24: Practicalli Blog](http://practical.li/blog){ .md-button .md-button-primary }\n</code></pre> <p>Search all supported icons</p>"},{"location":"introduction/writing-tips/#youtube-video","title":"YouTube video","text":"<p>Use an iframe element to include a YouTube video, wrapping in a paragraph tag with center alignment to place the video in a centered horizontal position</p> <pre><code>&lt;p style=\"text-align:center\"&gt;\n&lt;iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/rQ802kSaip4\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;\n&lt;/p&gt;\n</code></pre> <p>mkdocs material does not have direct support for adding a YouTube video via markdown.</p>"},{"location":"introduction/writing-tips/#admonitions","title":"Admonitions","text":"<p>Supported admonition types</p> <p>Note</p> <p>Use <code>!!!</code> followed by <code>NOTE</code></p> <p>Adding a title</p> <p>Use <code>!!!</code> followed by <code>NOTE</code> and a <code>\"title in double quotes\"</code></p> <p>Shh, no title bar just the text... Use <code>!!!</code> followed by <code>NOTE</code> and a <code>\"\"</code> empty double quotes</p> <p>Abstract</p> <p>Use <code>!!!</code> followed by <code>ABSTRACT</code></p> <p>Info</p> <p>Use <code>!!!</code> followed by <code>INFO</code></p> <p>Tip</p> <p>Use <code>!!!</code> followed by <code>TIP</code></p> <p>Success</p> <p>Use <code>!!!</code> followed by <code>SUCCESS</code></p> <p>Question</p> <p>Use <code>!!!</code> followed by <code>QUESTION</code></p> <p>Warning</p> <p>Use <code>!!!</code> followed by <code>WARNING</code></p> <p>Failure</p> <p>Use <code>!!!</code> followed by <code>FAILURE</code></p> <p>Danger</p> <p>Use <code>!!!</code> followed by <code>DANGER</code></p> <p>Bug</p> <p>Use <code>!!!</code> followed by <code>BUG</code></p> <p>Example</p> <p>Use <code>!!!</code> followed by <code>EXAMPLE</code></p> <p>Quote</p> <p>Use <code>!!!</code> followed by <code>QUOTE</code></p>"},{"location":"introduction/writing-tips/#collapsing-admonitions","title":"Collapsing admonitions","text":"Note <p>Collapse those admonitions using <code>???</code> instead of <code>!!!</code></p> Replace with a title <p>Use <code>???</code> followed by <code>NOTE</code> and a <code>\"title in double quotes\"</code></p> Expanded by default <p>Use <code>???+</code>, note the <code>+</code> character,  followed by <code>NOTE</code> and a <code>\"title in double quotes\"</code></p>"},{"location":"introduction/writing-tips/#inline-blocks","title":"Inline blocks","text":"<p>Inline blocks of text to make a very specific callout within text</p> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Adding something to then end of text is probably my favourite</p> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"introduction/writing-tips/#code-blocks","title":"Code blocks","text":"<p>Code blocks include a copy icon automatically</p> <p>Syntax highlighting in code blocks</p> <pre><code>(defn my-function  ; Write a simple function\n  \"With a lovely doc-string\"\n  [arguments]\n  (map inc [1 2 3]))\n</code></pre> <p>Give the code block a title using <code>title=\"\"</code> after the backtics and language name</p> src/practicalli/gameboard.clj<pre><code>(defn my-function\n  \"With a lovely doc-string\"\n  [arguments]\n  (map inc [1 2 3]))\n</code></pre> <p>We all like line numbers, especially when you can set the starting line</p> src/practicalli/gameboard.clj<pre><code>(defn my-function\n  \"With a lovely doc-string\"\n  [arguments]\n  (map inc [1 2 3]))\n</code></pre> <p>Add <code>linenums=42</code> to start line numbers from 42 onward</p> <pre><code>clojure linenums=\"42\" title=\"src/practicalli/gameboard.clj\"\n</code></pre>"},{"location":"introduction/writing-tips/#annotations","title":"Annotations","text":"<p>Annotations in a code block help to highlight important aspects.  Use the comment character for the language followed by a space and a number in brackets</p> <p>For example, in a shell code block, use <code># (1)</code> where 1 is the number of the annotation</p> <p>Use a number after the code block to add the text for the annotation, e.g. <code>1.</code>. Ensure there is a space between the code block and the annotation text.</p> <pre><code>ls -la $HOME/Downloads  # (1)\n</code></pre> <ol> <li> I'm a code annotation! I can contain <code>code</code>, formatted text, images, ... basically anything that can be written in Markdown.</li> </ol> <p>Code blocks with annotation, add <code>!</code> after the annotation number to suppress the <code>#</code> character</p> <p>Code block with suppressed comment character</p> <pre><code>(defn helper-function\n  \"Doc-string with description of function purpose\" ; (1)!\n  [data]\n  (merge {:fish 1} data)\n  )\n</code></pre> <ol> <li>Always include a doc-string in every function to describe the purpose of that function, identifying why it was added and what its value is.</li> </ol> <p>GitHub action example with multiple annotations</p> <pre><code>name: ci # (1)!\non:\n  push:\n    branches:\n      - master # (2)!\n      - main\npermissions:\n  contents: write\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: 3.x\n      - run: pip install mkdocs-material # (3)!\n      - run: mkdocs gh-deploy --force\n</code></pre> <ol> <li> <p>You can change the name to your liking.</p> </li> <li> <p>At some point, GitHub renamed <code>master</code> to <code>main</code>. If your default branch     is named <code>master</code>, you can safely remove <code>main</code>, vice versa.</p> </li> <li> <p>This is the place to install further [MkDocs plugins] or Markdown     extensions with <code>pip</code> to be used during the build:</p> <pre><code>pip install \\\n  mkdocs-material \\\n  mkdocs-awesome-pages-plugin \\\n  ...\n</code></pre> </li> </ol>"},{"location":"introduction/writing-tips/#highlight-lines-in-code-blocks","title":"Highlight lines in code blocks","text":"<p>Add highlight line meta data to a code block after the opening backticks and code block language.</p> <p><code>hl_lines=\"2\"</code> highlights line 2 in the codeblock</p> <p>Code block with highlighted lines</p> <pre><code>(defn my-function\n  \"With a lovely doc-string\"\n  [arguments]\n  (map\n   inc\n   [1 2 3]))\n</code></pre>"},{"location":"introduction/writing-tips/#embed-external-files","title":"Embed external files","text":"<p><code>--8&lt;--</code> in a code block inserts code from a source code file or other text file</p> <p>Specify a local file from the root of the book project (the directory containing mkdocs.yml)</p> Scheduled Version Check GitHub Workflow from source code file scheduled version check<pre><code>\n</code></pre> Practicalli Project Templates Emacs project configuration - .dir-locals.el<pre><code>((clojure-mode . ((cider-preferred-build-tool . clojure-cli)\n                  (cider-clojure-cli-aliases . \":test/env:dev/reloaded\"))))\n</code></pre> <p>Code example reuse</p> <p>Use an embedded local or external file (URL) when the same content is required in more than one place in the book.</p> <p>An effective way of sharing code and configuration mutliple times in a book or across multiple books.</p>"},{"location":"introduction/writing-tips/#content-tabs","title":"Content tabs","text":"<p>Create in page tabs that can also be</p> <p>Setting up a project</p> Clojure CLILeiningen <pre><code>clojure -T:project/new :template app :name practicalli/gameboard\n</code></pre> <pre><code>lein new app practicalli/gameboard\n</code></pre> <p>Or nest the content tabs in an admonition</p> <p>Run a terminal REPL</p> Clojure CLILeiningen <pre><code>clojure -T:repl/rebel\n</code></pre> <pre><code>lein repl\n</code></pre>"},{"location":"introduction/writing-tips/#diagrams","title":"Diagrams","text":"<p>Neat flow diagrams</p> <p>Diagrams - Material for MkDocs</p> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> <p>UML Sequence Diagrams</p> <pre><code>sequenceDiagram\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre> <p>state transition diagrams</p> <pre><code>stateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]</code></pre> <p>Class diagrams - not needed for Clojure</p> <p>Entity relationship diagrams are handy though</p> <pre><code>erDiagram\n  CUSTOMER ||--o{ ORDER : places\n  ORDER ||--|{ LINE-ITEM : contains\n  LINE-ITEM {\n    customer-name string\n    unit-price int\n  }\n  CUSTOMER }|..|{ DELIVERY-ADDRESS : uses</code></pre>"},{"location":"introduction/writing-tips/#keyboard-keys","title":"Keyboard keys","text":"<p>Represent key bindings with Keyboard keys. Each number and alphabet character has their own key.</p> <ul> <li>1 <code>++1++</code> for numbers</li> <li>l <code>++\"l\"++</code> for lowercase character</li> <li>U <code>++u++</code> for uppercase character or <code>++\"U\"++</code> for consistency</li> </ul> <p>Punctionation keys use their name</p> <ul> <li>Space <code>++spc++</code></li> <li>, <code>++comma++</code></li> <li>Left <code>++arrow-left++</code></li> </ul> <p>For key sequences, place a space between each keyboard character</p> <ul> <li>Space g s <code>++spc++ ++\"g\"++ ++\"s\"++</code></li> </ul> <p>For key combinations, use join they key identifies with a <code>+</code></p> <ul> <li>Meta+X <code>++meta+x++</code></li> <li>Ctrl+Alt+Del <code>++ctrl+alt+del++</code></li> </ul> <p>MkDocs keyboard keys reference</p>"},{"location":"introduction/writing-tips/#images","title":"Images","text":"<p>Markdown images can be appended with material tags to set the size of the image, whether to appear on light or dark theme and support lazy image loading in browsers</p> SizeLazy LoadingAlignTheme SpecificAll Image Attributes <p><code>{style=\"height:150px;width:150px\"}</code> specifies the image size <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png#only-dark){style=\"height:150px;width:150px\"}\n</code></pre></p> <p></p> <p><code>{loading=lazy}</code> specifies an image should lazily load in the browser <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png){loading=lazy}\n</code></pre></p> <p><code>{aligh=left}</code> or <code>{aligh=right}</code> specifies the page alignment of an image. <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png#only-dark){align=right}\n![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-dark.png#only-light){align=right}\n</code></pre></p> <p>  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p><code>![Kitty Logo](image/kitty-light.png#only-dark)</code> or <code>![Kitty Logo](image/kitty-light.png#only-light)</code>  specifies the theme the image should be shown, allowing different versions of images to be shown based on the theme. <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png#only-dark){style=\"height:150px;width:150px\"}\n![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-dark.png#only-light){style=\"height:150px;width:150px\"}\n</code></pre> Use the theme toggle in the top nav bar to see the icon change between light and dark.  </p> <p>Requires the color pallet toggle</p> <p>Alight right, lazy load and set image to 150x150</p> <pre><code>![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-light.png#only-dark){align=right loading=lazy style=\"height:64px;width:64px\"}\n![Kitty Logo](https://raw.githubusercontent.com/practicalli/graphic-design/live/icons/kitty-dark.png#only-light){align=right loading=lazy style=\"height:64px;width:64px\"}\n</code></pre> <p>  Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"introduction/writing-tips/#lists","title":"Lists","text":"<p>Task lists</p> <ul> <li> Lorem ipsum dolor sit amet, consectetur adipiscing elit</li> <li> Vestibulum convallis sit amet nisi a tincidunt<ul> <li> In hac habitasse platea dictumst</li> <li> In scelerisque nibh non dolor mollis congue sed et metus</li> <li> Praesent sed risus massa</li> </ul> </li> <li> Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque</li> </ul> <p>Task List example</p> <pre><code>- [x] Lorem ipsum dolor sit amet, consectetur adipiscing elit\n- [ ] Vestibulum convallis sit amet nisi a tincidunt\n    * [x] In hac habitasse platea dictumst\n    * [x] In scelerisque nibh non dolor mollis congue sed et metus\n    * [ ] Praesent sed risus massa\n- [ ] Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque\n</code></pre>"},{"location":"introduction/writing-tips/#tooltips","title":"Tooltips","text":"<p>The humble tool tip</p> <p>Hover me</p> <p>with references</p> <p>Hover me</p> <p>Icon tool tip with a title</p> <p></p>"},{"location":"introduction/writing-tips/#abreviations","title":"Abreviations","text":"<p>The HTML specification is maintained by the W3C.</p> <p>[HTML]: Hyper Text Markup Language [W3C]: World Wide Web Consortium</p>"},{"location":"introduction/writing-tips/#magic-links","title":"Magic links","text":"<p>MagicLink can auto-link HTML, FTP, and email links. It can auto-convert repository links (GitHub, GitLab, and Bitbucket) and display them in a more concise, shorthand format.</p> <p>Email Practicalli</p> <p>Practicalli Neovim</p>"},{"location":"introduction/why-spacemacs/","title":"Why Spacemacs","text":"<p>Spacemacs provides highly productive tooling for any software development, supporting numerous programming languages and tool configuration syntax (Dockerfile, Makefile, Yaml, etc)</p> <p>Spacemacs takes the raw power of Emacs and adds years of experience from the community.</p> <p>Spacemacs uses Vim-style modal editing, providing simple use and learn key bindings for common tasks, dramatically enhancing productivity and fun.</p> <p>Spacemacs is fast to startup and lightweight thanks to its lazy loading of features.  So it only loads in those features you need.</p> <p> </p> <p>The rest of this section goes into more details as to why you would choose Spacemacs for your developer life, including:</p> <ul> <li>easy to configuration using  layers removing the need to configure individual packages<ul> <li>Clojure layer provides  CIDER and clj-kondo support</li> </ul> </li> <li> Consistently discoverable commands with mnemonic menu</li> <li> narrowing &amp; completion to quickly find files and commands</li> <li> Effective editing with multiple states</li> <li> Structural editing with Smartparens and Lisp mode</li> <li> Fast project &amp; file management with Projectile, simple window &amp; buffer management</li> </ul>"},{"location":"introduction/why-spacemacs/clojure-layer/","title":"Spacemacs Clojure Layer Overview","text":"<p>The Clojure layer provides full language support and tooling including, autocomplete, refactor, inspector and debug, etc.</p> <p>Projects managed by Leiningen, Boot and Clojure CLI (<code>deps.edn</code>) are supported and automatically detected when running the REPL.</p> <p>CIDER is provided by the Clojure layer</p> <p>CIDER is the predominant package for Clojure development with Emacs and includes a range of supporting Emacs packages, curated to ensure those packages work well together.</p> <p>The Clojure layer uses the latest version of CIDER on Melpa, either release or latest snapshot.</p>"},{"location":"introduction/why-spacemacs/clojure-layer/#features-of-the-clojure-layer","title":"Features of the Clojure layer","text":"<p>CIDER provides a comprehensive range of tools to create quality Clojure code.</p> <p>Start a REPL (Clojure runtime environment) from Spacemacs and evaluate one or more expressions to see the results in the source code buffer, giving extremely fast feedback on the behavior of that code.</p> <ul> <li>REPL based Test runner and test reports</li> <li>smart code completion</li> <li>live static analysis with clj-kondo and Clojure LSP</li> <li>Documentation and source navigation</li> <li>Error report filtering</li> <li>Value inspector to visualise and navigate evaluation results</li> <li>Interactive debugging</li> <li>nREPL session management</li> </ul>"},{"location":"introduction/why-spacemacs/clojure-layer/#further-reading","title":"Further reading","text":"<ul> <li>Official CIDER docs for comprehensive details</li> <li>Cider Emacs style key bindings</li> <li>Clojure on Emacs - A CIDER workflow hack - Kris Jenkins, December 2013</li> </ul>"},{"location":"introduction/why-spacemacs/extensive-language-support/","title":"Extensive Language Support","text":""},{"location":"introduction/why-spacemacs/helm/","title":"Helm &amp; completion","text":"<p>Spacemacs helps you find things quickly with a minimum of typing, using Emacs Helm - Helm documentation wiki.</p> <p>Helm is an incremental completion and selection narrowing framework.  Its the central control tower of Spacemacs, it is used to manage buffers, projects, search results, configuration layers, toggles and more.</p> <p>For example, Helm helps you navigate files and directory names, only showing the matching names to the pattern you type.  This minimises the need to type directory and file names in full.</p> <p></p> Helm Keybinding Helm action Ctrl+h Up to parent directory Ctrl+l Into sub directory / open file Ctrl+j Move down the helm menu Ctrl+k Move up the helm menu Tab Tab completion Meta+p Traverse Helm history Ctrl+y Paste kill ring into helm Space+w+b Switch to minibuffer"},{"location":"introduction/why-spacemacs/helm/#helm-transient-state","title":"Helm Transient State","text":"<p>Use the Helm transient state to navigate the Helm results using Vim keybindings (<code>hjkl</code>) and call additional actions on those results.</p> <p>Enter this transient state with <code>M-SPC</code> or <code>S-M-SPC</code> while in a Helm buffer, for example, when navigating the results such as file find <code>SPC f f</code>, buffer list <code>SPC b b</code>, or Emacs commands list <code>SPC SPC</code>.</p> <p> </p> <p>Gnome desktop binding clash</p> <p><code>M-SPC</code> is used by the Gnome desktop for the window menu, so recommend you change the Gnome keyboard settings to use a different binding, i.e. <code>Super w</code>.</p> Key Binding Description Meta+Space initiate the transient state q quit transient state Tab switch to actions page and leave the transient state 1 execute action 0 2 execute action 1 3 execute action 2 4 execute action 3 5 execute action 4 6 execute action 5 7 execute action 6 8 execute action 7 9 execute action 8 0 execute action 9 a switch to actions page g go to first candidate G go to last candidate h go to previous source j select next candidate k select previous candidate l go to next source t mark current candidate T mark all candidates v execute persistent action"},{"location":"introduction/why-spacemacs/helm/#helm-actions-for-buffer-list","title":"Helm actions for Buffer list","text":"<p>The transient state menu is really great for running actions over multiple files.</p> <p>In this example Helm Transient State menu is used to select and kill multiple buffers easily.  Combining the pattern based searching with marking files (<code>T</code> marks all files listed for a particular pattern) makes it really easy to kill lots of Magit buffers that are no longer needed.</p> <p> </p> <p>Prompt when using layouts</p> <p>Layouts in Spacemacs show a prompt when killing a buffer that is not in the current layout, as seen at the end of the video when killing all magit buffers.</p> <p>Layers separate projects into their own groups of buffers so its easier to switch between multiple projects.</p> <p>Select <code>a</code> switches to the actions page, or using <code>C-z</code> displays the list off all the available actions for a buffer.</p> <p> </p>"},{"location":"introduction/why-spacemacs/layers/","title":"Simple Layers and Configuration","text":"<p>Programming language support and a vast array of tools can be added to Emacs from the many hundreds of packages created by the community. </p> <p>Spacemacs uses Layers that organise packages and configuration to make those packages work seamlessly together.  For example, the Clojure layer is composed of 9 different packages that you would otherwise have to be manually installed and configured to work together.  </p> <p>Add the name of a layer to the Spacemacs configuration file and Spacemacs will manage everything else.</p> Butterfly <p><code>SPC SPC butterfly</code> to activate in Spacemacs.  Use this great power very carefully.</p> <p></p>"},{"location":"introduction/why-spacemacs/layers/#simple-configuration","title":"Simple Configuration","text":"<p>Spacemacs provides a well tested and comprehensive configuration, provides lots of sensible defaults.</p> <p><code>~/.spacemacs</code> file is generated during the Spacemacs installation if a configuration does not already already exist  </p> <p><code>~/.spacemacs.d/init.el</code> or <code>SPACEMACSDIR/init.el</code> are valid locations for a Spacemacs configuration and as they are directories they are easier to manage changes via version control.</p> <p>The three important sections of the Spacemacs user configuration file:</p> Section Purpose dotspacemacs/layers Layers provide a simple way to add language support and tooling to Spacemacs.  A layer can contain elisp configuration and packages from Melpa/Elpa.  Individual Emacs packages can also be added (if they do not exist in any layer) dotspacemacs/init configuration applied when Spacemacs first starts, eg evil or holy mode(emacs), themes, fonts, full screen, recent files, etc dotspacemacs/user-config Add your own customisation here using Elisp code <p>Spacemacs dotfile configuration</p> <p> dotfile configuration details installation and syncronisation options </p>"},{"location":"introduction/why-spacemacs/layers/#opening-and-reloading-the-configuration-file","title":"Opening and reloading the configuration file","text":"<p>Spacemacs provides specific keybindings for opening and reloading the <code>~/.spacemacs</code> configuration file.</p> Vim Normal Emacs Description <code>SPC f e d</code> <code>M-m f e d</code> open the Spacemacs user configuration file <code>SPC f e R</code> <code>M-m f e R</code> reload the Spacemacs user configuration <p>Restart after changing configuration</p> <p><code>SPC q r</code> after changes to the Spacemacs configuration file is recommended, especially after significant changes, e.g. adding multiple layers </p> <p><code>SPC F e R</code> to update the Spacemacs configuration without restarting Emacs.</p>"},{"location":"introduction/why-spacemacs/layers/#adding-a-layer","title":"Adding a Layer","text":"<p>Open the Spacemacs user configuration file and add the name of the layer required in the section <code>dotspacemacs-configuration-layers</code>.  </p> <p>Add Layer variables to change the default configuraiton, wrapping the layer name in a list.</p> Spacemacs Configuration - Clojure layer with layer variables<pre><code>(clojure :variables\n         ;; clojure-backend 'cider                 ; use cider and disable lsp\n         clojure-enable-kaocha-runner t            ; enable Kaocha test runner\n         cider-repl-display-help-banner nil        ; disable help banner\n         cider-print-fn 'puget                     ; pretty printing with sorted keys / set values\n         clojure-indent-style 'align-arguments\n         clojure-align-forms-automatically t\n         clojure-toplevel-inside-comment-form t    ; clashes with LSP\n         ;; cider-result-overlay-position 'at-point   ; results shown right after expression\n         ;; cider-overlays-use-font-lock t\n         cider-font-lock-dynamically nil           ; prefer LSP semantic tokens\n         cider-eldoc-display-for-symbol-at-point nil ; prefer LSP\n         cider-prompt-for-symbol nil\n         cider-repl-buffer-size-limit 100          ; limit lines shown in REPL buffer\n         nrepl-use-ssh-fallback-for-remote-hosts t ; connect via ssh to remote hosts\n         )\n</code></pre> <p>See the Spacemacs documentation for a list of layers or open the help in Spacemacs <code>SPC h SPC</code> to list all the layers, pressing <code>RET</code> on a layer name to read about it.</p>"},{"location":"introduction/why-spacemacs/layers/#available-layers","title":"Available Layers","text":"<p><code>SPC h l</code> (or <code>M-m h l</code> in holy mode) displays a list of all layers available in Spacemacs.  Type the layer name or scroll down (<code>C-j</code>) to a layer name and press <code>TAB</code> to preview the documentation for that layer or <code>RTN</code> to open the docs for that layer in a buffer.</p> <p> </p> <p>Create your own layers with <code>SPC SPC configuration-layer/create-layer</code>.  See the Spacemacs docs and  Configuring Spacemacs, a tutorial for more information.</p>"},{"location":"introduction/why-spacemacs/layers/#existing-emacs-users","title":"Existing Emacs users","text":"<p>Consider the Spacemacs user configuration file as a replacement for the <code>init.el</code> file that would otherwise be use to define an Emacs configuration.</p> <p>Installing packages via the <code>packages-list-packages</code> method is ignored by Spacemacs.  Any packages installed in this way will be ignored and deleted on Emacs startup.</p> <p>If a desired package is not included in any layer,  a package can be used without a layer.</p> <p>dotspacemacs/user-config section of the Spacemacs user configuration file should contain personal Emacs Lisp configuration and is the last section of the Spacemacs configuration to load.</p>"},{"location":"introduction/why-spacemacs/layouts/","title":"Layouts","text":"<p>Layouts are used to manage projects separately. Each layout keeps its own list of open buffers, making it quick to navigate to specific buffers.</p> <p>Space l opens the layout menu</p> <p>Space l l to list all layouts, typing to narrow down to a match. Enter to open the layout.  Type a new layer name to create a new layer.</p> <p>Space l s to save the layouts to file (layouts should be saved automatically when restarting of exiting Emacs).</p> <p>Space l Tab switches to the previous layout, providing a quick way to jump between two projects. </p> Limit Space Tab  to current layout <p>Set the <code>spacemacs-layouts-restrict-spc-tab</code> variable to true to limit Space Tab to toggle between the last current and last buffer from the current layout.  The <code>spacemacs-layouts</code> layer is automatically included in Spacemacs, however, to specify variables it must be added to the <code>dotspacemacs-configuration-layers</code> in the Spacemacs configuration file dotspacemacs-configuration-layers<pre><code>(spacemacs-layouts :variables spacemacs-layouts-restrict-spc-tab t)  ; (1)!\n</code></pre> 1.  practicalli/spacemacs.d contains this configuration</p>"},{"location":"introduction/why-spacemacs/layouts/#layer-indicator","title":"Layer Indicator","text":"<p>The layer name shows in the mode line.</p> <p> </p>"},{"location":"introduction/why-spacemacs/layouts/#layouts-transient-state","title":"Layouts Transient State","text":"<p>Space l ? opens the layouts transient state to manage layouts with a single character keybinding. The transient state also lists all the current layouts.</p> <p> </p> <p>The most layouts common commands are:</p> Keybindings Action Space l l Create a new layout or switch to existing layout by typing its name Space l d Delete current layout Space Tab 0..9 Select layout in position (creates layouts if none exists) Space l Tab Select previously displayed layout Space l n / N Next / Previous layout Space l &lt; / &gt; Move layout left or right in the layout list"},{"location":"introduction/why-spacemacs/layouts/#reference","title":"Reference","text":"<p> Layouts - Spacemacs documentation</p>"},{"location":"introduction/why-spacemacs/mnemonic-menu/","title":"Mnemonic Menu with Which-Key","text":"<p>Spacemacs uses which-key to create a menus system of keybindings for the most commonly used commands.</p> <p>Which-key provides single chord keybindings, <code>SCP p f</code> rather than <code>C-x C-p C-f</code>.  Single chord key bindings are easier to remember and therefore make Spacemacs simpler to learn and faster to use.  Single chorded key bindings are also less of a strain on hands when typing.</p> <p>Mnemonic characters for keys are used where possible, using the first character of a command or a prominent character if a particular character is already taken.  Sub-menus are added to increase the range of characters available for a menu.  Spacemacs prefers a sub-menu rather than upper case or non-mnemonic characters.</p> <p> </p>"},{"location":"introduction/why-spacemacs/mnemonic-menu/#which-key-menu-controls","title":"Which-key menu controls","text":"<p><code>C-h</code> opens the which-key command menu, allowing navigation through menus and sub-menus.</p> <p> </p> <p><code>C-h n</code> shows the next page of commands when a menu is so large it is be spanned over several pages. <code>C-h p</code> shows the previous menu page.</p> <p><code>C-h u</code> to show the parent of the current menu, useful if you navigated to an incorrect sub-menu.</p> Keybinding Description <code>C-h</code> Paging / help menu <code>n</code> next page in menu <code>p</code> previous page in menu <code>u</code> up to parent menu <code>h</code> help <code>a</code> abort"},{"location":"introduction/why-spacemacs/project-file-navigation/","title":"Project and File Navigation","text":"<p> Projectile provides easy project management and navigation.  A project is a directory containing a version control repository, e.g. <code>.git</code> or a Clojure project, eg. <code>project.clj</code>, <code>pom.xml</code>.  </p> <p>Define a directory as a project root by adding an empty <code>.projectile</code> file.</p> <p>Notable Projectile's features:</p> <ul> <li>jump to a directory, file or buffer in project</li> <li>toggle between files with same names but different extensions</li> <li>toggle between code and its test</li> <li>recently visited files in the project</li> <li>switch between projects you have worked on</li> <li>kill all project buffers</li> <li>replace in project</li> <li>multi-occur in project buffers</li> <li>grep in project</li> <li>regenerate project etags or gtags (requires ggtags).</li> <li>browse dirty version controlled projects</li> </ul> <p> </p>"},{"location":"introduction/why-spacemacs/project-file-navigation/#treemacs","title":"Treemacs","text":"<p>Treemacs is the default visual file browser in Spacemacs, providing a way to view and navigate all the directories and files in a project.  Visit the  Treemacs project for details of all its features</p> <p>Space+f+t or Space+p+t toggles the Treemacs buffer, the latter opens Treemacs with the root set to the projectile project root.</p> <p>Space+0 to select the Treemacs window at any time. The Treemacs window s always assigned the number 0.</p> <p></p> <ul> <li> Spacemacs Treemacs Layer</li> </ul>"},{"location":"introduction/why-spacemacs/project-file-navigation/#ranger","title":"Ranger","text":"<p>Space a t r r runs ranger to navigate directories and view contents of files quickly, using standard Vi keybindings, j,k,h,l.</p> <p>Ranger is great for quickly looking through files, thanks to its preview option.</p> <p> </p> <p> Discover more about ranger in the working with projects section.</p> <p>Ranger terminal file manager</p> <p> Ranger terminal file manager</p>"},{"location":"introduction/why-spacemacs/states/","title":"Editor states - Evil or Holy","text":"<p>Multi-modal editing simplifies keybindings for everything, keeping your hands centered on the keyboard and increasing your productivity.  Multi-modal approach minimizing the need for  key chords that are slower and a common source of repetitive strain e.g. <code>C-c C-x M-j</code></p> <p>When installing Spacemacs you have the choice of editor styles</p> Editing style Description Among the stars aboard the Evil flagship (Vim) Vim multi-model editing (normal, insert, visual, lisp, etc. <code>C-z</code> for classic Emacs editor On the planet Emacs in the Holy control tower (Emacs) Emacs only editing (No Vim states) <p></p> <p>Evil provide Vim style editing across all languages and modes in Emacs, simplifying the editing of files and keyboard shortcuts (keybindings)</p> <p>Vim is a language for manipulating text files that goes far beyond editing files.  Learning this simple language removes cognitive load.  Speak vim and your fingers efficiently make the changes you want.</p>"},{"location":"introduction/why-spacemacs/states/#evil-states","title":"Evil states","text":"<p>Multi-modal editing can take some adjustment and time to become comfortable. <code>Normal</code>, <code>Insert</code> and <code>Visual</code> states are the first ones to get used to.</p> <p>Each state has a specific purpose, eg. normal mode is about manipulating existing text where insert state is about adding more text.</p> <p>Using a state for different types of editing actions greatly simplifies the keyboard bindings and arguably makes editing faster, especially once you get used to multi-state editing.</p> <p>This speed is in part due to simpler keybinding when in normal mode as you are not typing content into the editor, simply running commands with each key press.  This means you can have single characters to do many of the common commands, eg <code>l</code> instead of <code>C-f</code> for moving the cursor forward.</p> <p>If you are deeply connected to the with Emacs keybindings, then probably best to stick to holy mode.</p> <p>If you are new to Emacs or you just want to take advantage of Vim, then select Evil mode.</p> <p>Evil flagship - toggling between Emacs</p> <p><code>C-z</code> toggles between Vim states and the Emacs state when Evil Flagship editing states are used.</p> <p>Here is the list of all the possible states, some of which are automatically applied (eg. magit git client is automatically evilified).</p> State Default Color Description <code>normal</code> orange Vim <code>normal</code> - used to execute and combine commands <code>insert</code> green Vim <code>insert</code> - used to actually insert text <code>visual</code> gray Vim <code>visual</code> mode of Vim=, used to make text selection <code>motion</code> purple Evil - used to navigate read only buffers <code>emacs</code> blue This state is like using a regular Emacs without Vim <code>replace</code> chocolate Evil - overwrites the character under point instead of inserting a new one <code>hybrid</code> blue Spacemacs - use Emacs state instead of the Vim insert <code>evilified</code> light brown Spacemacs - an <code>emacs</code> state modified to bring Vim navigation, selection and search. <code>lisp</code> pink Spacemacs - structural editing for Lisp code (and Clojure) <code>iedit</code> red Spacemacs - navigate between multiple regions of text <code>iedit-insert</code> red Spacemacs - replace multiple regions of text <p>Spacemacs state documentation</p> <p>States and other concepts are explained further in the Spacemacs concepts documentation.</p>"},{"location":"introduction/why-spacemacs/states/#transient-state-menus","title":"Transient State menus","text":"<p>Transient state menus are used to run commands multiple times using a single key press from a specific sub-set of commands.</p> <p>For example, Font Scaling transient state menu allows you to repeatedly increase the size of the buffer font just by using the <code>+</code> key.  The Font Scaling transient state menu contains the sub-set of commands related to scaling, so you can decrease the font size just with the <code>-</code> key and reset the font with <code>0</code>.</p> <p> </p> <p>Transient-states are usually triggered by using a keybinding with the following pattern: <code>&lt;Leader&gt; &lt;group&gt; .</code> where group is the category the transient-state falls under.</p> <p>When in a transient-state you will see documentation at the bottom of your window. To exit a transient-state press q.</p>"},{"location":"introduction/why-spacemacs/states/#example-menus","title":"Example menus","text":"Keybindings Transient state description Space b . buffer management Space e . errors Space k . lisp state for structured editing Space w . window management Space z . code folding Space z f zoom frame size Space z x Font Scaling (x for text) Space n + / - Change the value of a number"},{"location":"introduction/why-spacemacs/structural-editing/","title":"Structural Editing","text":"<p>Structural editing is an invaluable tool when working with Lisp languages (elisp, lisp, clojure, etc) as it enables you to easily move code around without breaking the structural syntax of the language.</p> <p>Clojure has very precise syntax as everything is contained in a list or similar structure.  It is very simple to navigate the structure of Clojure code by jumping from expression to expression.</p> <p>This well defined structure also makes it trivial to move expressions around, giving you a simple way to develop and refactor your code.</p> <p> </p> <p>Structural Editing Section</p> <p>Structural editing section provides a detailed guide to using Lisp mode, Smartparens, Paredit and Evil mode to manage your Clojure (and elsip) code.</p>"},{"location":"introduction/why-spacemacs/structural-editing/#smartparens-for-writing-structural-text","title":"Smartparens For Writing Structural Text","text":"<p>Spacemacs uses smartparens{target=blank} to help you write structural code really fast and also move expressions around.  Smartparens is a newer implementation of the classic _paredit package.</p> <p>Evil-cleverparens</p> <p>Evil-cleverparens configures Vim states to respect smartparens rules. This ensures that you do not accidentally delete parenthesis and keeps the structure of your Clojure intact.</p> <p>See the section on Evil Clojure Editing.</p>"},{"location":"introduction/why-spacemacs/structural-editing/#lisp-state-for-manipulating-structural-text","title":"Lisp State For Manipulating Structural Text","text":"<p>Space+k+. opens lisp-state for refactoring Lisp base languages like Clojure and eLisp.</p> <p>lisp-state allows use of the Vim normal state keys to navigate your code by its structure, j,k,h,l.</p> <p>Move symbols and expressions around without breaking parenthesis and other structural characters (using <code>slurp</code>, <code>barf</code>, <code>wrap</code>, <code>unwrap</code>, etc.).</p>"},{"location":"introduction/why-spacemacs/why-evil/","title":"Evil Vim Style Editing","text":"<p>Evil provide Vim style editing across all languages and modes in Emacs, simplifying the editing of files and keyboard shortcuts (keybindings)</p> <p>Vim is a language for manipulating text files that goes far beyond editing files.  Learning this simple language removes cognitive load.  Speak vim and your fingers efficiently make the changes you want.</p> <p>Multi-modal editing simplifies keybindings for everything, keeping your hands centered on the keyboard and increasing your productivity.  Multi-modal approach minimizing the need for  key chords that are slower and a common source of repetitive strain e.g. <code>C-c C-x M-j</code></p>"},{"location":"markdown-mode/","title":"Markdown Mode","text":"<p>Markdown is a text format that provides very simple structure for documents.  Markdown is often used for README files in code repositories.</p> <ul> <li>Markdown guide</li> </ul> <p></p> <p></p>"},{"location":"markdown-mode/#adding-formatting","title":"Adding formatting","text":"<p>, x opens the text sub-menu to add formatting to markdown.  Commonly used commands include:</p> <p>, x b to add bold text, <code>****</code>.  Use with visual select to make existing code bold</p> <p>, x q to insert a block quote, <code>&gt;</code></p> <p>, x B to insert a checkbox  <code>* [ ]</code></p> <p>, x C and select a language to insert a markdown code block</p> <p>, x k to insert a keyboard tag , used with CSS to render keyboard keys</p>"},{"location":"markdown-mode/#headings","title":"Headings","text":"<p>Define up to 6 levels of headings to help organize the content, collapsing headings to focus on specific parts.</p> <p>, j 1 to insert a heading, <code>##</code>.  Headings 1 to 6 are supported</p> <p>Tab to expand / collapse a single headings</p> <p>Shift Tab to expand / collapse all headings</p>"},{"location":"misc/","title":"Miscellaneous things to do in Emacs","text":"<p>Random collection of things you can do in Emacs (which is a very long list, so here are just a few of the most interesting).</p>"},{"location":"misc/artist-mode/","title":"Artist Mode","text":"<p>Artist is an Emacs lisp package that allows you to draw lines, rectangles, squares, poly-lines, ellipses and circles by using your mouse and/or keyboard. The shapes are made up with the ascii characters. , -, / and .</p> <p>{% youtube %} https://youtu.be/mDp7VvdtLtY?autoplay=1loop=1</p>"},{"location":"misc/unicode-characters/","title":"Unicode Characters","text":"<p><code>SPC i u</code> shows a pop-up list of Unicode characters by name, with each name also showing the unicode character.</p> <p>The first time <code>SPC i u</code> is called the unicode characters are loaded, as spacemacs doesn't load them in by default.  Loading should only take a second.</p> <p>As the popup list can be narrowed by typing part or all of the name of characters.  The list shows a fuzzy match of unicode names that match.</p> Keybindings Description <code>SPC i u</code> Loads unicode characters and lists them in a popup window.  Uses helm completion <p></p>"},{"location":"misc/unicode-characters/#classic-emacs-unicode-8","title":"Classic Emacs Unicode 8","text":"<p><code>C-c 8 RET</code> is the classic way to add Unicode 8 characters, which seems to show different symbols, is that unicode 8 and the other unicode 16 perhaps?</p>"},{"location":"navigating-code/","title":"Navigating code","text":"<p>Jumping, marks, code folding and searching are effective ways of navigating a codebase, rather than using the arrow keys to move character by character or line by line.</p>"},{"location":"navigating-code/#general-tools","title":"General Tools","text":"<p>Use Evil normal mode to quickly jump around your code.</p> Key binding Description <code>SPC j j</code> Search across all windows for given character(s), type highlighted character(s) to jump to location <code>SPC j C</code> Jump to first unbalanced parens <code>SPC j c</code> / <code>' '</code> Jump to last change <code>m x</code> , <code>' x</code> Create marker called <code>x</code>, jump to marker called <code>x</code> (use any alphabet character) (see markers section) <code>#</code> Symbol highlight transient state - navigate symbol names, iedit, swoop <code>SPC s s</code> Search in current buffer, <code>C-j</code>/<code>C-k</code> to navigate results <code>SPC s p</code> Search in project, <code>C-j/k</code> to navigate results"},{"location":"navigating-code/#code-folding","title":"Code Folding","text":"<p>Folding code hides away details, so you can just look at the function definitions and data structures of interest on the same screen.</p> Key binding Description <code>z</code> or <code>SPC z .</code> folding code blocks <p><code>z</code> opens a menu to allow you to un/fold your code quickly.</p> <p></p> <p><code>SPC z .</code> is the code fold transient menu should you wish to un/fold code many times.</p> <p>See the code folding section for more details.</p>"},{"location":"navigating-code/#structural-editing","title":"Structural Editing","text":"<p><code>SPC k</code> starts lisp state structural editing.</p> <p><code>hjkl</code> to navigate the cursor across symbols and open/close parens</p> <p></p>"},{"location":"navigating-code/code-folding/","title":"Code folding","text":"<p>Code folding allows you to collapse a code block onto one line, allowing you to see more of your code in the window.  A code block for Clojure includes comments, <code>def</code>, <code>defn</code> and the threading macros <code>-&gt;</code> and <code>--&gt;</code>.</p> <p>Overview of a namespace</p> <p>z m shows just the names of all function definitions and vars in a namespace, providing a quick way to review all namespace api.</p>"},{"location":"navigating-code/code-folding/#keybindings","title":"Keybindings","text":"Evil state Description z a Toggle fold for current code block z c Folds a code block z m Folds all code  in buffer z o Opens current folded code block z O Opens current folded code block recursively z r Opens all folded code blocks in the buffer"},{"location":"navigating-code/code-folding/#code-fold-transient-state","title":"Code Fold Transient State","text":"<p>Space z opens a transient state for folding code, most useful when reviewing code.</p> <p></p>"},{"location":"navigating-code/code-folding/#code-folding-methods","title":"Code folding methods","text":"<p>There are two code folding methods, evil folding (the default) and origami.  Evil fold is recommended for Clojure development.</p> <p>Origami adds a recursive open and close and what it calls an org-mode header collapse (didn't seem to work on Clojure code). Origami seems less useful for Clojure than evil-fold, as folding seems to only work at the top level.</p> <p>Origami allows you to write your own parser to teach different ways to fold code.  Origami is a great choice if you want to customise your code folding.</p>"},{"location":"navigating-code/code-folding/#switching-to-origami-code-folding","title":"Switching to origami code folding","text":"<p>Space f e d to open the Spacemacs configuration file</p> <p>Space s s <code>dotspacemacs-folding-method</code> to find the code folding setting, Enter to end the search.</p> <p>Change the code folding method: <code>dotspacemacs-folding-method 'origami</code></p> <p>Space q r to restarting Emacs and download the origami package.</p>"},{"location":"navigating-code/expressions/","title":"Navigating Expressions","text":"<p>Jumping between symbols and expressions is an effective way to navigate your Clojure code, especially where you have nested expressions.</p> <p><code>SPC k .</code> enters Lisp State transient state, where you can easily navigate around symbols and expressions.</p> Key bindings Description <code>$</code> jump to end of current expression <code>0</code> jump to the beginning of current expression <code>j</code> /  <code>k</code> next close paren / previous open paren <code>l</code> /  <code>h</code> next symbol / previous symbol <code>L</code> /  <code>H</code> next expression / previous expression <code>t</code> transpose expression <code>U</code> got to parent sexp backward <code>w</code> wrap expression with parenthesis <code>W</code> unwrap expression <code>y</code> copy expression <p>Lisp state has many more examples of structural editing.</p>"},{"location":"navigating-code/find-usages/","title":"Find Usages","text":"<p>Show all functions that reference a function or any var, matching on the namespace and symbol name.</p> <p><code>cider-xref-fn-refs</code> - find use of a function under the cursor, showing results in a new buffer</p> <p><code>cider-xref-fn-refs-select</code> - show the usages of the function at point in the mini-buffer</p> <p><code>cider-xref-fn-deps</code> and <code>cider-xref-fn-deps-select</code> to navigate to the functions used by some function</p> <p></p> <p>Pull Request for Spacemacs key bindings</p> <p>A Pull request should be created to add key binding to Spacemacs to launch these commands.</p>"},{"location":"navigating-code/find-usages/#limitations","title":"Limitations","text":"<p>Find usages only works for Clojure will show only data for evaluated namespaces.</p> <p>Only information that a function is used is provided, there is no information as to the precise location.</p> <p>Lambda functions do not currently work with find usages.</p>"},{"location":"navigating-code/find-usages/#alternative-approaches","title":"Alternative approaches","text":"<p>, r f u find usages with clj-refactor.el</p> <p>Space / <code>pattern</code> will show all matches to the <code>pattern</code> in a project.  Ctrl+c Ctrl+e will open those results in a separate buffer and any edits will be applied to the original files.</p>"},{"location":"navigating-code/find-usages/#references","title":"References","text":"<ul> <li>Discovering Runtime Function References in Clojure</li> <li>Hard CIDER: find usages</li> </ul>"},{"location":"navigating-code/function-definitions/","title":"Navigating to function definitions","text":"<p><code>, g g</code> go to the source code definition of the Clojure function under the cursor.  If the cursor is not on a function name, a prompt displays asking for the function name.</p> <p><code>, g G</code> to open the definition in another window</p> <p><code>' '</code> returns to the point in the code you originally jumped from.</p>"},{"location":"navigating-code/function-definitions/#hintrun-the-repl-for-best-results","title":"Hint::Run the REPL for best results","text":"<p><code>cider-find-var</code> is used when a REPL is running, otherwise <code>dumb-jump-go</code> is called.</p> <p><code>clojure.core</code> functions are known to CIDER. Custom functions, i.e. <code>defn</code> expressions in the project, must first be evaluated in the REPL.</p> <p>If <code>, g g</code> is not working, try evaluate any expression from the project and try <code>, g g</code> again.</p>"},{"location":"navigating-code/function-definitions/#listing-functions","title":"Listing functions","text":"<p><code>SPC j i</code> lists matching functions of using the name under the cursor</p> <p>Functions can come from anything that is on the classpath, including Java sources if they are installed.</p>"},{"location":"navigating-code/function-definitions/#hintjava-classes-and-methods","title":"Hint::Java classes and methods","text":"<p><code>, g g</code> also works for Java definitions once the Java sources are added to your project.  See the section on Java Definitions</p>"},{"location":"navigating-code/java-definitions/","title":"Navigating to Java Class and Method definitions","text":"<p>, g g with the cursor on a Java class or method name in a Clojure source code file will jump to its definition.  This is useful if you are using Java interop in your Clojure code or using Java libraries as part of your project, e.g. Java swing code example</p> <p>Add the Java sources locally to also enable searching with ripgrep or ag.  Or add a java-source alias when starting a REPL.</p>"},{"location":"navigating-code/java-definitions/#adding-a-depsedn-alias-for-java-sources","title":"Adding a deps.edn alias for Java sources","text":"<p>Using an alias is the recommended way to include Java sources for Clojure CLI projects, as those sources are a only used in the development workflow.</p> <pre><code>  :src/java17\n  {:extra-deps\n   {java-sources {:local/root \"/usr/lib/jvm/openjdk-17/lib/src.zip\"}}}\n\n  :src/clojure\n  {:extra-deps\n   {org.clojure/source {:local/root \"~/projects/community/clojure.org/clojure\"}}}\n</code></pre> <p>practicalli/example deps.edn includes example aliases for java sources</p> <p>Location of Sources</p> <p>The location of the Java src.zip file may differ on your operating system.  You can also extract the <code>src.zip</code> file and use the extracted sources.</p>"},{"location":"navigating-code/java-definitions/#include-java-sources-alias-during-jack-in","title":"Include Java sources alias during jack-in","text":"<p>Add a <code>.dir-locals.el</code> file to the root of your Clojure project to include the java sources alias when running cider-jack-in.</p> <pre><code>((clojure-mode . ((cider-clojure-cli-aliases . \":src/java17\")\n                  (cider-preferred-build-tool . \"clojure-cli\"))))\n</code></pre> <p>Or include both Java and Clojure Java sources</p> <pre><code>((clojure-mode . ((cider-clojure-cli-aliases . \":src/java17:src/clojure\")\n                  (cider-preferred-build-tool . \"clojure-cli\"))))\n</code></pre> <p></p>"},{"location":"navigating-code/java-definitions/#adding-local-clojure-and-java-sources","title":"Adding Local Clojure and Java sources","text":"<p>Navigate to Java source files using local copies of the Java Source code.  Download and extracting the Clojure and Java sources to your computer.</p> UbuntuMacOSXWindowsCIDER <p>Java sources are available as Debian/Ubuntu packages</p> <pre><code>sudo apt install openjdk-17-source\n</code></pre> <p>Java source code is part of the JDK installation and can be found at:</p> <pre><code> /Library/Java/JavaVirtualMachines/{jdk-version}/Contents/Home/src.zip.\n</code></pre> <p>Java source code is part of the JDK installation and can be found at:</p> <pre><code>C:\\Program Files\\Java\\{jdk-version}\\src.zip\n</code></pre> <p>Download the latest Clojure sources from Maven</p> <p>Extract the Java <code>src.zip</code> file and <code>clojure-x-x-x-sources.jar</code> file</p> <p>Add <code>cider-jdk-src-paths</code> configuration to <code>dotspacemacs/user-config</code> in the <code>.spacemacs</code> file.  Change the paths if you extracted the files to a different location.</p> <pre><code>  (setq cider-jdk-src-paths '(\"~/projects/java/clojure-1.11.1-sources\"\n                              \"~/projects/java/openjdk-17/src\"))\n</code></pre>"},{"location":"navigating-code/markers/","title":"Navigating using markers","text":"<p>Markers are used to create adhoc places to jump to in your buffer.</p> <p><code>m</code> and a character defines the name of the marker.  For example, <code>m a</code> defines a marker called <code>a</code></p> <p><code>'</code> and a character jumps to that marker, so <code>' a</code> jumps to the marker called <code>a</code></p> <p><code>' '</code> will jump back to the point where the last change was made.</p> <p>Only one marker, use the same character</p> <p>Marker names are case-specific, so in theory you have have up to 52 markers.</p> <p>Recommend only using one marker and the same character for the marker each time, as this will ingrain the action.  Using <code>a</code> as the marker is quicker as its on the opposite hand to <code>m</code> and <code>'</code></p>"},{"location":"navigating-code/names-symbols/","title":"Navigate names or symbols","text":"<p><code>#</code> or <code>*</code> enters symbol highlight transient state allowing you to jump between the current symbol name and any other instance in the buffer.</p> <p></p> <p><code>e</code> to start iedit state and edit all the symbols concurrently.  This is so amazing.</p> <p><code>/</code> will show a helm popup with all the instances of the symbol through out the project files, a quick way to search a project.</p> <p><code>f</code> will show a helm popup with all the instances of the symbol in a specified file.</p> <p><code>b</code> will show a helm popup with all the instances of the symbol through out all open buffers (global buffers, so even those in a different layer).</p> <p><code>s</code> search a buffer and navigate to each location in code with the matching symbol by scrolling though the results.</p> <p><code>SPC s c</code> clears symbol highlighting and search pattern highlighting.</p>"},{"location":"navigating-code/names-symbols/#helm-swoop","title":"Helm-swoop","text":"<p>Search a buffer (Clojure namespace) or project and use the results to navigate to the locations in the code for each match found.</p> Keybindings Description <code>SPC s C</code> clear helm-swoop own cache <code>SPC s s</code> execute helm-swoop <code>SPC s S</code> execute helm-multi-swoop <code>SPC s C-s</code> execute helm-multi-swoop-all <code>SPC s p</code> search project <p>For example, navigate to a function definition and all the places that function is called in a project using helm-multi-swoop.</p> <p></p> <p>Refactor code</p> <p>Refactor section provides examples of using helm-ag, helm-swoop, iedit, narrowing and clj-refactor.</p>"},{"location":"navigating-code/namespaces/","title":"Navigating Clojure Namespaces","text":"<p><code>, g n</code> (<code>cider-find-ns</code>) lists the namespaces currently loaded into the running REPL.  Type a pattern to narrow the list.  <code>C-j</code> and <code>C-k</code> to navigate the list.  <code>RET</code> to open the namespace in the current buffer.</p> <p></p>"},{"location":"navigating-code/namespaces/#namespaces-via-projectile","title":"Namespaces via Projectile","text":"<p><code>SPC p f</code> (<code>helm-projectile-find-file</code>) is an effective way to switch between files in the project.  Helm uses fuzzy matching, so <code>_</code> characters can be skipped when narrowing the helm list with a pattern, so searching for a file is the same as searching for a namespace.</p> <p><code>g g</code> jumps to the top of the file, which should be near to the location of the <code>ns</code> form</p>"},{"location":"navigating-code/namespaces/#lsp-symbols-and-ns-definitions","title":"LSP symbols and ns definitions","text":"<p><code>, g s</code> (<code>helm-lsp-workspace-symbols</code>) lists all the symbols found in the current project, including <code>ns</code>, <code>def</code> and <code>defn</code> forms.</p> <p>Type in a pattern to narrow the list. <code>C-j</code> and <code>C-k</code> to navigate the list.</p> <p><code>RET</code> to jump to the symbol, opening the relevant namespace in the current buffer.</p> <p></p>"},{"location":"navigating-code/namespaces/#browse-namespace-symbol-documentation","title":"Browse namespace symbol documentation","text":"<p>Browse namespace symbols by navigating through the definitions in a namespace (<code>def</code>, <code>defn</code>) and view their documentation (doc strings).</p> <p><code>, h n</code> (<code>cider-browse-ns</code>) lists all namespaces loaded into the REPL in the current project.  Namespaces in the project that have not been evaluated, directly or via a require, will not be in the list.</p> <p></p> <p><code>RET</code> to show the symbols in the namespace</p> <p><code>RET</code> on a namespace symbol to see the documention in a pop-up wondow.  Use the link to the source code file in the documentation to open the namespace in the buffer.</p>"},{"location":"navigating-code/namespaces/#repl-buffer-cider-commands","title":"REPL buffer cider commands","text":"<p><code>,</code> in Evil insert mode in the REPL buffer will bring up the REPL command menu</p> Command Description <code>browse-ns</code> Browse namespace <code>ns</code> Switch to namespace (lists known namespaces) <p></p>"},{"location":"navigating-code/namespaces/#using-code-to-change-the-namespace","title":"Using code to change the namespace","text":"<p><code>in-ns</code> function will set the namespace for the REPL.  If that namespace does not exist, then the namespace is created in the current REPL.</p> <p></p>"},{"location":"org-mode/","title":"Org-mode","text":"<p>Org-mode provides a simple way of creating rich documentation and exporting to multiple formats.</p> <p>Org-mode can also manage tasks (TODO lists), keep your schedule (org-agenda) and literate programming</p>"},{"location":"org-mode/#examples-of-what-org-mode-can-do","title":"Examples of what Org-mode can do","text":"<ul> <li>Getting started with Org Mode - covers more than what you need to start with</li> <li>Org-mode todo states - interesting ideas with org-mode todo states</li> <li>Overview of Org Mode - Hack Emacs - older, but has more examples</li> </ul>"},{"location":"org-mode/#getting-started-with-org","title":"Getting started with org","text":"<p>Open or create a new file with a <code>.org</code> filename extension to start org-mode major mode.</p> <p>For example, if you want to write a guide to your project, you could create an org-mode file called <code>user-guide.org</code>.  When you open this file in Spacemacs, org-mode is selected as the major mode for editing.</p> <p></p>"},{"location":"org-mode/code-blocks/","title":"Org blocks - source code and more","text":"<p>Block are used to highlight source code and other areas of text that should be highlight differently.</p> <p>, b d calls (<code>org-babel-demarcate-block</code>) opens a list of programming languages to select from, pasting an org source code block with the chosen language.</p> <p></p> <p>When choosing clojure as the language, a source code block is added with the label clojure to indicate the language.</p> <pre><code>#+BEGIN_SRC clojure\n#+END_SRC\n</code></pre> <p>, i b  displays the currently available templates to use as blocks (<code>org-insert-structure-template</code>).  These templates provide a wider range than only the source code block.</p> <p></p>"},{"location":"org-mode/headings/","title":"Org-mode Headings","text":"<p>Organise text content with multiple levels of headings.  Focus on sections by expanding and folding the content under headings, to show the level of information required at a particular time. TODO states can be applied to any level of headings.</p> <p>Ctrl+Enter to create a heading at the same level of parent (top level heading if no parent)</p> <p>Ctrl+Shift+Enter to create a heading with the TODO state, providing a visual marker of progress.</p> <p>o on a heading creates a new line automatically indented for text, to which a list item, <code>-</code> or check box list, <code>- [ ]</code>, can be added.</p> <p></p> <p>Toggle checkboxes</p> <p>, T c toggles the state of org checkboxes</p>"},{"location":"org-mode/headings/#collapse-expand-headings","title":"Collapse / Expand headings","text":"<p>Tab expands / collapses the heading at the current cursor position.</p> <p>Shift+Tab will cycle through expanding and collapsing headings at different levels.</p>"},{"location":"org-mode/headings/#moving-headings-and-content-around","title":"Moving headings and content around","text":"<p>Items can be moved to change the order they appear, avoiding the need to cut and paste.</p> Key binding Description Meta+h Promote heading (larger) Meta+l Demote heading (smaller) Meta+H Promote heading containing sub-headings Meta+L Demote heading containing sub-headings Meta+k Move heading up within the same level Meta+j Move heading down within the same level Meta+K Move heading up, jumping over parent headings Meta+J Move heading down, jumping over parent headings"},{"location":"org-mode/linking/","title":"Linking to files and websites","text":"<p>, i l adds a file or URL link.  Helm pop-up prompts for the filename or URL, then link text and optionally tool tip text.</p> <p>Ctrl+y pastes the contents of the kill ring into the helm prompt, so you can easily paste URL's from your browser.</p> <p>The Link prompt provides a recent history of links you have added.</p> <p>Links to files will open in Spacemacs. Website links will open in your default browser.</p>"},{"location":"org-mode/linking/#org-cliplink","title":"org-cliplink","text":"<p>, i L adds an org-mode style link using the current value of the clipboard using <code>org-cliplink</code>.</p> <p></p>"},{"location":"org-mode/linking/#help-linking-to-files","title":"Help linking to files","text":"<p>Space a ol (<code>org-store-link</code>) function gets the path and filename of the current file, appending the contents of the current line of that file to the link.</p> <p>, i l will show the stored link in the helm prompt for the Link.</p> <p><code>M-x org-insert-last-stored-link</code> will also add a link to a file using the information from <code>org-store-link</code>.</p>"},{"location":"org-mode/lists-and-checkboxes/","title":"Lists and Checkboxes","text":"<p>List and Checkboxes are useful for organizing and tracking tasks.</p>"},{"location":"org-mode/lists-and-checkboxes/#using-lists","title":"Using lists","text":"<p><code>-</code> creates a list item in Evil insert mode</p> <p><code>o</code> on a list item creates a new list item below when in Evil normal mode. <code>O</code> creates a checkbox above.</p> <p><code>M -&gt;</code> on a list item creates a sub-list and <code>M &lt;-</code> promotes a list item</p>"},{"location":"org-mode/lists-and-checkboxes/#using-checkboxes","title":"Using checkboxes","text":"<p><code>- [ ]</code> creates a list item as a checkbox</p> <p><code>o</code> on a checkbox item creates a new checkbox item below when in Evil normal mode. <code>O</code> creates a checkbox above.</p> <p><code>M -&gt;</code> on a list item creates a sub-list and <code>M &lt;-</code> promotes a list item</p> <p><code>, T c</code> toggles the mark in the checkbox  (unless the checkbox has children)</p> <p>When a child checkbox is marked, the parent has a dash to show partial completion.  When all child checkboxes are crossed, then the parent is automatically crossed.</p>"},{"location":"org-mode/lists-and-checkboxes/#tracking-checkbox-completion","title":"Tracking checkbox completion","text":"<p>Add <code>[/]</code> to the end of a heading that contains checkboxes to track the number of completed checkboxes and the total number of checkboxes.</p> <p>Totals will automatically update when the status of a checkbox updates.</p> <p><code>C-c</code> when the cursor is on one of the <code>[x/x]</code> header totals will update all the totals for all the org-mode buffer.</p> <p></p>"},{"location":"org-mode/org-journal/","title":"Org Journal","text":"<p>Org-journal is an effective way to keep a daily record of discovery from work, personal study, hobbies or even a mood diary to help with mental wellness.</p> <p>Space a o j j opens a new journal entry for the current day in a new buffer. Space u Space a o j j to view the journal without adding a new entry.</p> <p>User key binding shortcut for Journal</p> <p>Space o j is a user binding as a short-cut for Space a o j j in the practicalli/spacemacs.d configuration</p> <p>o creates a new line automatically indented, or a new list item, <code>-</code> or check box list, <code>- [ ]</code>, if the previous line was that type.</p> <p>Ctrl+Enter<code>C-RET</code> creates a new heading at the same level.  <code>M-right-arrow</code> demotes the current heading (smaller heading) and <code>M-left-arrow</code> promotes the current heading. <code>M-up/down-arrow</code> moved heading up or down the list of headings.</p> <p>, displays the org-mode major mode commands. g menu contains org related commands</p> <p>, i l to add a link, prompting first for the URL (Ctrl+y to paste) followed by the text of the link and an optional tool tip.</p> <p>, p and , m will show the previous and next days journal entries, providing a quick way to scroll through the diary.</p> <p>Space f s to save the journal entry.</p> <p></p> <p>Create a check box list</p> <p><code>-</code> is a list and <code>- [ ]</code> adds a checkbox to the list. , T c toggles the mark in the checkbox, ticked or empty, for the current line.</p>"},{"location":"org-mode/org-journal/#tracking-progress-with-todo-states","title":"Tracking progress with TODO states","text":"<p>Any Heading level can be assigned a TODO state to demonstrate progress and use the journal to manage tasks for the day.</p> <p>, L or Shift+Right (<code>org-shiftright</code>) cycles through the states, which are <code>TODO</code> <code>DOING</code> and <code>DONE</code> by default.  , H or Shift+Left to cycle the states in reverse.</p> <p>Headings in the TODO state are automatically carried over when creating the next days journal.  Sub-heading with TODO states are carried over along with their parent heading(s).  See the configure section below to change this.</p> <p>End of day review</p> <p>Practicalli recommends reviewing each days journal at the end of the day, before creating the next day.  This is a great opportunity to take a few moments to reflect on the day.</p> <p>, p jumps to the previous days journal if items seem to be missing. Manually copy any missing items. , n to view today's journal and paste those missing items.</p>"},{"location":"org-mode/org-journal/#tracking-progress-with-checkboxes","title":"Tracking progress with checkboxes","text":"<p><code>- [ ]</code> on a new line adds a checkbox as a list item.</p> <p>, T c toggles the done or not done state of the checkbox from anywhere on the line.</p> <p>Add a cookie to a header containing tasks to show the number or percentage of tasks complete.</p> <ul> <li><code>[/]</code> to show number of complete task and total</li> <li><code>[%]</code> to show the percentage of completed tasks</li> </ul> <p>Ctrl+C+Ctrl+c will force an update of the checkbox totals in the cookie for the current heading.</p> <p></p>"},{"location":"org-mode/org-journal/#configure-org-journal","title":"Configure org-journal","text":"<p>practicalli/spacemacs.d includes the configuration below</p> <p>To manually add org-journal, edit <code>.spacemacs</code> and add these org layer variable with suggested settings from Spacemacs org layer documentation</p> <pre><code>org-enable-org-journal-support t\norg-journal-dir \"~/projects/journal/\"\norg-journal-file-format \"%Y-%m-%d\"\norg-journal-date-prefix \"#+TITLE: \"\norg-journal-date-format \"%A, %B %d %Y\"\norg-journal-time-prefix \"* \"\norg-journal-time-format \"\"\n</code></pre> <p>The TODO states carried over can be configured using the <code>org-journal-carryover-items</code> variable on the <code>org</code> layer in <code>.spacemacs</code></p> <pre><code>org-journal-carryover-items \"TODO=\\\"TODO\\\"|TODO=\\\"DOING\\\"|TODO=\\\"BLOCKED\\\"|TODO=\\\"REVIEW\\\"\")\n</code></pre>"},{"location":"org-mode/org-mode-tweaks/","title":"Org-mode tweaks","text":"<p>Here are some simple tweaks to <code>org-mode</code> that you may find useful.</p>"},{"location":"org-mode/org-mode-tweaks/#wrapping-lines-with-truncate-lines","title":"Wrapping lines with <code>truncate lines</code>","text":"<p>Space t l toggles <code>truncate-lines</code> in a buffer, the same as wrap lines in other editors.  <code>truncate-lines</code> will wrap at what ever size the buffer\u2026org-mode with truncate lines on.  There may be some other minor conflicts</p> <p>If <code>truncate-line</code> is what\u2026<code>dotspacemacs/user-config</code> section:  \u2026<code>(add-hook 'org-mode-hook (lambda () (setq truncate-lines t)))</code></p> <p></p> <p>Any lines that are truncated have a return arrow symbol in the right hand margin of that line as a visual clue that the line has been wrapped.</p>"},{"location":"org-mode/tables/","title":"Org-mode Tables","text":"<p>Org comes with a fast and intuitive table editor. Spreadsheet-like calculations are supported using the Emacs calc package (see Calc in GNU Emacs Calculator Manual).</p> <p>This guide covers just the simple tables you can create when documenting your application or service.</p> <p>The Org-mode manual covers tables in more detail, including:</p> <ul> <li>Built-in table editor for simple tables</li> <li>Column width and alignment, to overrule the automatic settings</li> <li>Column groups, grouping to trigger vertical lines</li> <li>Orgtbl mode, table editor as minor mode</li> <li>Table editor spreadsheet capabilities</li> <li>Org-Plot, plotting graphs from org tables</li> </ul>"},{"location":"org-mode/todo-states/","title":"Org-mode TODO states","text":"<p>Show progress by adding TODO states to the headings of an .org document.  The default states are <code>TODO</code> <code>DOING</code> and <code>DONE</code>.  States can be added to any org document by simply typing them, or using commands to cycle through the states.</p> <p>, t calls <code>org-todo</code> which cycles through all the TODO states for the current heading. If the current line is not a heading, the parent heading is updated.</p> <p>, L or Shift+Right (<code>org-shiftright</code>) move the current TODO state forward to the next. , H or Shift+Left move to the previous TODO states.</p>"},{"location":"org-mode/todo-states/#custom-todo-states","title":"Custom TODO States","text":"<p>A custom set of states can be configured, although it seems useful to keep the defaults and simply add custom states.</p> <p>Practicalli/spacemacs.d includes a simple kanban style of states.  The <code>|</code> character denotes closed TODO states.</p> <p>In <code>dotspacemacs/user-config</code> in the <code>.spacemacs</code> file, define states and workflow for all <code>.org</code> files</p> <p><pre><code>  (with-eval-after-load 'org\n    (setq org-todo-keywords\n         '((sequence \"TODO\" \"DOING\" \"BLOCKED\" \"REVIEW\" \"|\" \"DONE\" \"ARCHIVED\"))))\n</code></pre> Use <code>with-eval-after-load</code> as a hook to call this setting when org-mode is first run by Spacemacs.</p>"},{"location":"org-mode/todo-states/#automatically-log-completion-date-time","title":"Automatically log completion date-time","text":"<p>Commands can be triggered when entering a specific TODO state.</p> <p>To add a <code>closed:</code> property with current date-time stamp when the status is <code>DONE</code>.  Changing the status will remove the closed property.</p> <pre><code>  (with-eval-after-load 'org\n    (setq org-log-done 'time))\n</code></pre>"},{"location":"org-mode/todo-states/#custom-colors-faces","title":"Custom colors (faces)","text":"<p>Using colors for the TODO states makes them easier to distinguish, especially in a long list of items.</p> <p><code>org-todo-keyword-faces</code> is a <code>defcustom</code> function for setting colors for the TODO state faces. Using the X11 color names gives colours that are easy to notice but are not to strong.</p> <p>In <code>dotspacemacs/user-config</code> in the <code>.spacemacs</code> file, add following to configure custom colors <pre><code>  (with-eval-after-load 'org\n    (setq org-todo-keyword-faces\n         '((\"todo\" . \"SlateGray\")\n           (\"doing\" . \"DarkOrchid\")\n           (\"blocked\" . \"Firebrick\")\n           (\"review\" . \"Teal\")\n           (\"done\" . \"ForestGreen\")\n           (\"archived\" .  \"SlateBlue\"))))\n</code></pre></p> <p>Theme faces may over-ride your custom color settings</p> <p>Space h d F will list all the faces used with the current buffer. <code>RET</code> on a face name to find out where it is defined.</p> <pre><code>Use the `SPC SPC customize` command to explore and change faces\n\ncolour names such as `green`, `blue`, `yellow` are easier to undertand than colour codes, such as `#242424`\n</code></pre>"},{"location":"org-mode/todo-states/#automatically-log-completion-date-time_1","title":"Automatically log completion date-time","text":"<p>When a heading status enters <code>DONE</code>, add a <code>closed:</code> property with current date-time stamp</p> <pre><code>  (with-eval-after-load 'org\n    (setq org-log-done 'time))\n</code></pre>"},{"location":"org-mode/yasnippets/","title":"Yasnippets for Org-mode","text":"<p>Snippets provide a way to add common code or text.</p> <p><code>&lt;ta M-/</code> adds a two column table snippet with a caption.  The cursor is the first tab stop, followed by the first column name, then the second column name.</p>"},{"location":"org-mode/yasnippets/#yasnippets-official-snippets-org-mode","title":"Yasnippets official snippets - org-mode","text":"<p>The current snippets for org-mode from the yasnippet official snippet collection</p> Snippet name Key Description author &lt;a Author metadata center &lt;c center block date &lt;da date metadata - year, month, day description desc description metadata dot dot_ Graphviz source block elisp elips_ Emacs lisp source block with tangle emacs-lisp emacs-lisp_ Emacs lisp source block with tangle email &lt;em email metadata embedded emb_ general source block entry entry_ html source block with layout and title exampleblock &lt;e example source block export &lt;ex export source block with type figure fig_ LaTeX figure html &lt;ht html metadata image &lt;im Image with caption img img_ html image tag include &lt;i include metadata ipython ipy_ ipython source block keywords &lt;ke keywords metadata language &lt;lan language metadata link &lt;li org link matrix matrix_ matrix computation options &lt;op options metadata python py_ python source block quote &lt;q quote block rv_background &lt;rsb reveal single colored background rv_image_background &lt;rib reveal image background setup set setup file metadata src &lt;src source code block style &lt;st stylesheet metadata table &lt;ta org table title &lt;ti title metadata uml uml uml source block verse &lt;v verse source block video &lt;vi org link to video file"},{"location":"org-mode/yasnippets/#reference","title":"Reference","text":"<ul> <li>Create your own snippets</li> </ul>"},{"location":"org-mode/literate-programming/","title":"Literate Programming","text":"<p>Literate programming  is a document written in a natural language, interspersed with snippets of code that can be executed and results visualised as text or graphics.  It is an interactive document that can update sections of itself from the code that runs inside.</p> <p>In Spacemacs and Clojure development, it means you could write a document explaining your project or library and include code that can execute and give results in the document itself.</p> <p>To encourage contributors to open source project or on-boarding a developer onto a team, a literate programming document that explains how all the important aspects work, including real code examples that they can experiment with, would remove barriers in becoming familiar with a project.</p>"},{"location":"org-mode/literate-programming/#literate-programming-with-spacemacs","title":"Literate programming with Spacemacs","text":"<p>Emacs has Org-mode with can do amazing things with documents, simply open a file with a <code>.org</code> filename extension.</p> <p>Org-mode includes Babel, which can take code and run it in an Emacs buffer of the correct major-mode for the programming language and automatically return the result back to the org-mode file.</p>"},{"location":"org-mode/literate-programming/#configure-literate-programming-with-clojure","title":"Configure Literate Programming with Clojure","text":"<p>Add <code>org</code> and <code>clojure</code> layers in Spacemacs configuration file</p>"},{"location":"org-mode/literate-programming/#create-a-clojure-project","title":"Create a Clojure project","text":"<p>Literate programming can be used with any working Clojure project, using either a <code>deps.edn</code> configuration or a Leiningen <code>project.clj</code> file.</p> <p>Create a project using either Clojure CLI tools or Leiningen.  Dependencies, apart from Clojure, itself are not required.</p> Clojure CLILeiningen <pre><code>clojure -T:project/new :template app :name practicalli/literate\n</code></pre> <pre><code>lein new app literate\n</code></pre> <p>Simple example project</p> <p>Clone practicalli/literate-programming-in-clojure project for a simple example project that works.</p>"},{"location":"org-mode/literate-programming/#run-a-clojure-repl","title":"Run a Clojure REPL","text":"<p>Open the <code>deps.edn</code>, <code>project.clj</code>, or any source code file from the project.</p> <p>, m s and select <code>cider-jack-in-clj</code> to start a REPL.</p>"},{"location":"org-mode/literate-programming/#create-an-org-file-with-clojure-code-blocks","title":"Create an org file with Clojure code blocks","text":"<p>Create an org file, eg. <code>literate-clojure.org</code> in the root of the Clojure project.</p> <p>Write the text of the document and use <code>, b d</code> to add a code block, selecting <code>clojure</code> as the language.</p> <p>Add <code>:results value</code> after <code>clojure</code> in the code block <code>BEGIN</code> line.</p> <p>In the code block write your clojure code, e.g. <code>(+ 1 2 3)</code></p> <p>Ctrl+C+Ctrl+c to evaluate the code block at the cursor point. The result is pasted underneath the code block.</p>"},{"location":"org-mode/literate-programming/#clojure-literate-programming-examples","title":"Clojure Literate programming examples","text":"<p>Starting with a very basic Clojure expression to test evaluation is working correctly.  Using <code>:results silent</code> will not add the result to the <code>.org</code> file.</p> <pre><code>#+begin_src clojure :results silent\n  (+ 1 4)\n#+end_src\n</code></pre> <p>Ctrl+C+Ctrl+c with the cursor placed in the code block</p> <p>This should evaluate the Clojure form and echo the results: \"5\" in the mini-buffer.</p> <p>Now insert the results into the org buffer immediately after the Clojure code block</p> <pre><code>#+begin_src clojure :results value\n  [ 1 2 3 4]\n#+end_src\n</code></pre> <p>Ctrl+C+Ctrl+c with the cursor placed in the code block</p> <p>The following results block will be inserted immediately following the code block</p> <pre><code>#+RESULTS\n[ 1 2 3 4]\n</code></pre> <p>Multiple expressions can be defined.  First define a Clojure data structure (hash-map) and then use a keyword as a function to retrieve a specific value from the hash-map.</p> <pre><code>#+begin_src clojure :results value\n  (def small-map {:a 2 :b 4 :c 8})\n  (:b small-map)\n#+end_src\n\n#+RESULTS:\n: 4\n</code></pre> <p>Make a Graph of the results</p> <p>Using the Clojure Incanter library to create a line plot graph using the Incanter xy-plot function.</p> <p>The Incanter library should first be added to the Clojure project as a dependency.</p> Clojure CLILeiningen <p>Add Incanter to the <code>:deps</code> key of the <code>deps.edn</code> file</p> <pre><code>{:paths [\"src\" \"resources\"]\n :deps {org.clojure/clojure {:mvn/version \"1.10.3\"}\n        incanter/incanter   {:mvn/version \"1.9.3\"}}}\n</code></pre> <p>Add Incanter to the <code>:dependencies</code> key of the <code>project.clj</code> file</p> <pre><code>(defproject clojure-literate-programming \"0.1.0\"\n  :description \"Literate Programming with Incanter\"\n  :license {:name \"Creative Commons Attribution Share-Alike 4.0 International\"\n            :url \"https://creativecommons.org/\"}\n  :dependencies [[org.clojure/clojure \"1.10.3\"]\n                 [incanter \"1.9.3\"]])\n</code></pre> <p>Use the Incanter library to create an x-y line plot. The <code>view</code> function displays the line plot. The plot is also saved to both PDF and PNG format image files.</p> <pre><code>#+begin_src clojure\n  (use '(incanter core charts pdf))\n  ;;; Create the x and y data:\n  (def x-data [0.0 1.0 2.0 3.0 4.0 5.0])\n  (def y-data [2.3 9.0 2.6 3.1 8.1 4.5])\n  (def xy-line (xy-plot x-data y-data))\n  (view xy-line)\n  (save-pdf xy-line \"incanter-xy-line.pdf\")\n  (save xy-line \"incanter-xy-line.png\")\n#+end_src\n</code></pre> <p>Insert the image into the exported PDF document:</p> <pre><code>#+CAPTION: A basic x-y line plot\n#+NAME: fig:xy-line\n[[./incanter-xy-line.pdf]]\n</code></pre> <p>Files are saved to the root of the Clojure project.</p>"},{"location":"org-mode/literate-programming/#export-to-latex-or-html","title":"Export to LaTeX or HTML","text":"<p>Ctrl+C+Ctrl+e l l to export to LaTeX.</p> <p>Ctrl+C+Ctrl+e h h to export to HTML.</p> <p>The exported HTML code will hyperlink the PDF file. To embed the image in the HTML, switch to the PNG image file.</p> <p>The exported LaTeX (.tex) file will embed either the PDF or PNG file. Graphical quality will be superior with the PDF file.</p>"},{"location":"org-mode/literate-programming/#session-evaluation","title":"Session Evaluation","text":"<p>Use the <code>:session</code> option to run all Clojure code in the same REPL process</p> <p>Without <code>:session</code> each individual code block will execute by starting a Clojure REPL process. Due to the start-up time of a Java virtual machine, this can make execution of many blocks slow.</p> <p>Sessions changed in Org 9</p> <p>The <code>:session</code> option may not be required in Org version 9.  Testing is required.</p>"},{"location":"org-mode/literate-programming/#specify-a-namespace","title":"Specify a namespace","text":"<p>Each code block will execute in the default <code>user</code> namespace, unless changed via CIDER nREPL connection.</p> <p>A namespace can be specified in a code block using the Clojure <code>ns</code> function.</p> <pre><code>#+begin_src clojure :results pp\n(ns practicalli.greet)\n(def hello \"Hello Practicalli, this is the greet namespace\")\n#+end_src\n\n#+RESULTS:\n: #'practically.greet/hello\n</code></pre> <p>Following code blocks in the .org file will continue to use the specified namespace.</p> <pre><code>#+begin_src clojure :results value :ns kk2\n*ns*\n#+end_src\n\n#+RESULTS:\n: #'practicalli.greet/hello\n</code></pre>"},{"location":"org-mode/literate-programming/#references","title":"References","text":"<p>Incanter examples</p>"},{"location":"os-specific-config/macosx/","title":"MacOSX Specific configuration","text":""},{"location":"os-specific-config/macosx/#macosx-layer","title":"MacOSX Layer","text":"<p>The OSX layer globally defines common macOS key bindings. * <code>\u2318</code> is set to <code>hyper</code> and <code>\u2325</code> is set to <code>meta</code> * In dired use <code>gls</code> instead of <code>ls</code> * Fix separator colors of Spaceline mode-line</p>"},{"location":"os-specific-config/macosx/#disable-touchpad-zoom-gestures","title":"Disable touchpad zoom gestures","text":"<p>The touchpad on a Mac included gestures to zoom the font.  If you find the touchpad gestures unwanted, they can be disabled by setting their key binding to <code>nil</code>. <pre><code>(define-key global-map (kbd \"&lt;magnify-up&gt;\") nil)\n(define-key global-map (kbd \"&lt;magnify-down&gt;\") nil)\n</code></pre></p> <p>Another approach would be to call a dummy function or a function that has some conditional. In this case define a function to that carries out the function required.  Then bind that function to the key bindings for the touchpad gesture. <pre><code>(defun practicalli-nothing ()\n  (interactive)\n  (message \"Buttons are not toys\") )\n\n(define-key global-map (kbd \"&lt;magnify-up&gt;\") 'practicalli-nothing)\n(define-key global-map (kbd \"&lt;magnify-down&gt;\") 'practicalli-nothing)\n</code></pre></p>"},{"location":"refactor/","title":"Refactor Clojure Code","text":"<p>General refactor steps such as changing function names can be done with the Evil tools, <code>iedit</code>, <code>narrowing</code> and <code>helm-ag</code>. These do not require a running Clojure REPL. Examples of refactoring names: functions, namespace or project.</p> <p>Structural editing via the <code>SPC k</code> lisp state uses <code>smartparens</code> to alter the your code whist respecting the structure, as defined by parens, <code>[ ] { } ( )</code> and even <code>\" \"</code>.  Smartparens works for all languages, although is most useful with lisp syntax.</p> Refactor Approach Usage narrowing refactor in function on region (usually with iedit) iedit refactor in current namespace helm-ag project wide refactor (usually with iedit) lisp state A state for smartparens structural editing clojure-mode , r for clojure specific refactor commands Clojure LSP , r for clojure specific refactor commands"},{"location":"refactor/#clojure-repl-based-refactoring","title":"Clojure REPL based refactoring","text":"<p>Clojure specific refactor commands are in the clojure mode refactor menu, <code>, r</code> provided by the package <code>clj-refactor</code>.  These refactor commands typically require a running Clojure REPL</p> <p>, e u <code>(cider-undef)</code> when changing a name of a var (<code>def</code>, <code>defn</code>) to keep the REPL clean of stale names.</p>"},{"location":"refactor/clojure-lsp/","title":"Refactor Code with Clojure LSP","text":"<p>, r opens Clojure LSP refactor menu</p> <p> </p> <p>The majority of refactor tools from Clojure LSP are code actions, providing context specific tools that are only available when relevant.</p>"},{"location":"refactor/clojure-lsp/#renaming","title":"Renaming","text":"<p>Symbols such as namespace names, function definitions, names bound to values and keywords can be renamed across a whole project</p> <p><code>, r r</code> to rename symbol at point</p> <p></p>"},{"location":"refactor/clojure-lsp/#refactor-namespace","title":"Refactor namespace","text":"<p>, rr  (<code>lsp-rename</code>) with the cursor on a namespace will prompt for changes to that namespace.</p> <p>Enter to save the change to the namespace, updating</p> <ul> <li><code>ns</code>namespace definition name</li> <li>file name of the current file, including converting <code>-</code> to <code>_</code> in the file name where relevant</li> <li>all reference to the changed namespace name across all source code files in the project (on the class path)</li> </ul>"},{"location":"refactor/clojure-lsp/#code-actions","title":"Code Actions","text":"<p><code>, a a</code> opens the LSP code actions menu to provide context specific refactor tools</p> <p>lsp-ui sidebar shows available code actions when the following variables are added to the <code>lsp</code> layer in the .spacemacs layer configuration:</p> <pre><code>lsp-ui-sideline-enable t\nlsp-ui-sideline-show-code-actions t\n</code></pre> <p>Clojure LSP features includes examples of code actions.</p>"},{"location":"refactor/clojure-lsp/#converting-parens","title":"Converting Parens","text":"<p>Convert between literal hash-map <code>{}</code>, vector <code>[]</code>, set <code>#{}</code> and list <code>()</code> forms</p> <p></p>"},{"location":"refactor/clojure-lsp/#add-library-namespace-to-current-namespace","title":"Add library namespace to current namespace","text":"<p>Add the suggested library to the ns namespace definition using a require form with an alias</p> <p></p> <p>Add import form for known Java methods and classes</p> <p></p>"},{"location":"refactor/clojure-lsp/#move-to-let-binding","title":"Move to let binding","text":"<p>Move an expression to be a value of a new local name in an existing <code>let</code> form</p> <p></p> <p>Move a value to a new local name in an existing let binding (inline symbol)</p> <p></p>"},{"location":"refactor/clojure-lsp/#extract-expression-to-new-function","title":"Extract expression to new function","text":"<p>Create a new public function definition with the expression at point the body of that new function.</p> <p>Replace the expression at point with a call to the new function with arguments extracted from the expression at point where relevant.</p> <p></p>"},{"location":"refactor/clojure-lsp/#convert-to-thread-macro","title":"Convert to thread macro","text":"<p>Convert (nested) expression to a thread first or thread last form</p> <p></p>"},{"location":"refactor/clojure-lsp/#convert-function-definition-to-private","title":"Convert function definition to private","text":""},{"location":"refactor/clojure-lsp/#toggle-function-form","title":"Toggle function form","text":"<p>Toggle between short and normal forms of a function definition</p> <p></p>"},{"location":"refactor/clojure-lsp/#re-order-data-structures","title":"Re-order data structures","text":"<p>Move elements of a data structure using <code>lsp-clojure-coll-move-entry-up</code> and <code>lsp-clojure-coll-move-entry-up</code>, which have no key binding in Spacemacs by default (Doom Emacs uses Meta up/down arrow keys)</p> <p></p> <p>WARNING: does not seem to work and does not show as a code action</p>"},{"location":"refactor/clojure-mode/","title":"Clojure specific refactor tools","text":"<p>, r is the refactor menu in Spacemacs which contains commands specific to refactor Clojure code.  These complement the Evil tools and structural editing</p> <p>The default refactor tools are part of the <code>clojure-mode</code> package and work even when the REPL is not running. The optional clj-refactor commands mostly require a running REPL to work.</p>"},{"location":"refactor/clojure-mode/#refactor-menu","title":"Refactor menu","text":"Keybinding Description , r ? Display help on how to enable <code>clj-refactor</code> package in the Clojure layer , r n add namespace at top of current buffer , r N add namespace at current point , r # convert collection to a set <code>#{}</code> , r c convert collection to a quoted list , r ++open-paren++ convert collection to a list , r : cycle between keyword and string , r [ convert collection to a vector , r { convert collection to a hash-map , r i cycle between <code>if</code> and <code>if-not</code> , r p cycle privacy of vars, <code>defn</code>/<code>defn-</code> &amp; <code>def</code>/`def ^:private**"},{"location":"refactor/functions/","title":"Refactor functions","text":"<p>The symbol highlight transient state and iedit tools can be used to make concurrent changes to multiple instances of the same piece of text, eg. a function name, a local let binding name, a def name, etc.</p> <p>We can use narrowing to just make changes within in a function or any selected region of text</p> <p>Move the cursor to the function you wish to refactor</p> <p>Space n f to narrow to that function.  The buffer updates and only shows the text of that function, preventing changes happening elsewhere in the code.</p> <p>* or # to select a function name using the symbol highlight transient state on the current text under the cursor.  This highlights all instances of that function name in the namespace.</p> <p>e starts iedit state, turning the cursor red.</p> <p>Make the changes to the highlighted text and all instances of that text will change.  You can use Normal and Insert mode editing commands within iedit.</p> <p>Esc+ or f f to leave iedit mode (twice if you are in Evil Insert).</p> <p>Space n w to return to the full view of the buffer.</p> <p>Narrowing a region of text</p> <p>You can select a range to narrow to using v for the visual select mode.  Then use Space n r to narrow to just the selected text for editing. Space n w to return to the full view of the buffer.</p>"},{"location":"refactor/functions/#refactor-similar-function-calls","title":"Refactor similar function calls","text":"<p>Tab allows you to quickly change the name of a function call to one that is similar.</p> <p>For example, if you have used a call to <code>reduce</code> instead of <code>reductions</code> or other similarly named functions, pressing <code>TAB</code> with the cursor on <code>reduce</code> will display a popup listing alternative functions</p> <p></p>"},{"location":"refactor/namespace/","title":"Refactor namespace","text":"<p>Refactor <code>ns</code> forms using <code>clojure-mode</code>, meaning these refactor commands work even when the REPL is not running.</p> Keybinding Command Description , r a n <code>clojure-insert-ns-form</code> Add current namespace (from file name) to top of buffer , r a N <code>clojure-insert-ns-form-at-point</code> Add current namespace (from file name) at point , r s n <code>clojure-sort-ns</code> Sort namespaces inside an <code>ns</code> form (e.g. required namespaces)"},{"location":"refactor/namespace/#organizing-by-purpose","title":"Organizing by purpose","text":"<p>When there are more than a few required namespaces, it can be valuable to group namespaces by their purpose rather than alphabetically.</p> <p></p>"},{"location":"refactor/namespace/#refactor-within-a-namespace","title":"Refactor within a namespace","text":"<p>The symbol highlight transient state and iedit tools can be used to make concurrent changes to multiple instances of the same piece of text, eg. a function name, a local let binding name, a def name, etc.</p> <p>/ to search for matched to particular text pattern</p>"},{"location":"refactor/namespace/#changes-a-symbol-or-name","title":"Changes a symbol or name","text":"<p>* or # to open symbol highlight transient state on the current text under the cursor.  This highlights all instances of that text in the namespace.</p> <p>e starts iedit state, turning the cursor red.</p> <p>Make the changes to the highlighted text and all instances of that text will change.  You can use Normal and Insert mode editing commands within iedit.</p> <p>Esc or f d to leave iedit mode (from Evil normal mode, so if you are in Insert mode you will need to do this twice).</p>"},{"location":"refactor/namespace/#changes-any-text-using-search","title":"Changes any text using search","text":"<p><code>/</code> to open the buffer search and type in the text pattern you are looking to find.</p> <p><code>RET</code> to confirm you have finished entering the text pattern (hopefully you found what you are looking for).</p> <p><code>SPC s e</code> starts iedit state, turning the cursor red.</p> <p>Make the changes to the highlighted text and all instances of that text will change.  You can use Normal and Insert mode editing commands within iedit.</p> <p><code>ESC</code> or <code>fd</code> to leave iedit mode (from Evil normal mode, so if you are in Insert mode you will need to do this twice).</p> <p>Narrow to function or text region</p> <p>Space n f to narrowing to a function before selecting / searching to be more selective in what text is show and therefore highlighted and changed.  E.g. if you just want to change a specific function.</p>"},{"location":"refactor/project/","title":"Refactor within a project","text":"<p>Space s p (<code>helm-swoop</code>) searches the text of all project files, displaying the results in a helm popup.</p> <p>Ctrl+C+Ctrl+e opens the search results in a buffer for editing.  Changes in this buffer can be applied back to the relevant files in the project.</p> <p><code>#</code> or <code>*</code> on a function name (or any text) will select all instances, opening the transient buffer menu.</p> <p>e starts iedit, placing a cursor on each instance to make multiple simultaneous changes.  Multiple cursors or the usual editing commands can also be used to make changes.</p> <p>Ctrl+C+Ctrl+c to commit the changes and update all the relevant files in the project.</p> <p>Ctrl+C+Ctrl+k to drop the changes and keep the project files as they were.</p> <p>Clojure refactor - rename symbol</p> <p>, r rs renames all occurrences of the symbol at point using clj-refactor rename symbol.</p> <p>This command requires a running REPL and for all the project code to compile without error.</p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/emacs-quick-reference/","title":"Emacs Quick Reference","text":"<p>As Spacemacs is built on Emacs, its worth spending a little time getting uses to working with Emacs.</p> <p>Here is a short summary of what you need to know.  For more details use the built in docs with <code>M-x helm-spacemacs</code> or <code>M-m h SPC</code>.</p>"},{"location":"reference/emacs-quick-reference/#todoconsider-moving-this-to-just-a-reference-section-vim-style-is-the-default-approach-for-this-book-and-whist-the-emacs-bindings-are-still-available-in-spacemacs-they-are-not-as-focused-on-great-user-experience-as-vim","title":"Todo::Consider moving this to just a reference section.  Vim style is the default approach for this book and whist the Emacs bindings are still available in Spacemacs, they are not as focused on great user experience as Vim.","text":""},{"location":"reference/emacs-quick-reference/#starting-emacs","title":"Starting emacs","text":"<p>Either <code>emacs</code> as a command line or a desktop icon.</p>"},{"location":"reference/emacs-quick-reference/#basic-terms","title":"Basic terms","text":"<p>The 'meta' key is usually the 'Alt' or 'Start Menu' key on your keyboard.</p> <pre><code>C-&lt;char&gt;   : control + &lt;char&gt;\nM-&lt;char&gt;   : meta + &lt;char&gt;\nSPC        : space\nRET        : return / enter\nDEL        : delete or backspace\nESC        : escape; ESC &lt;char&gt; is the same as M-&lt;char&gt;\n\nbuffer     : Everything you use, edit or read in emacs. This can be an\n             open file, the results of a compilation, your mail and\n             several other things, like e.g. a shell window.\nmark       : It is a position in a buffer, that is pushed in a special\n             stack, when jumping in the buffer etc. It can be pushed\n             manually.\nmode       : Every buffer has a mode. A mode can have special\n             functions, colouring, indentions etc.\nminibuffer : The line at the bottom, where you can enter commands after\n             typing M-x. Most of these commands can be invoked by\n             pressing *lot of* keys, but don't worry... from now on,\n             I'm going to introduce some of these functions, with the\n             actual command name in round brackets.\npoint      : the actual cursor position\n</code></pre>"},{"location":"reference/emacs-quick-reference/#managing-files-buffers-and-windows","title":"Managing files, buffers and windows","text":"<pre><code>C-x C-f    (find-file)                : opens a file\nC-x 4 C-f  (find-file-other-window)   : opens a file in the next window\nC-x k      (kill-buffer)              : closes the current buffer\nC-x C-c    (save-buffers-kill-emacs)  : asks whether it should save your\n                                        files and exits\nC-x C-s    (save-buffer)              : saves the current buffer\nC-x C-w    (write-file)               : saves in a file of your choice\nC-x C-b    (list-buffers)             : lists and manages all open\n                                        buffers, press ? for help\nC-x b      (switch-to-buffer)         : changes the current buffer\nC-x 4 b    (switch-to-buffer-other-window) : changes the next window's buffer\nC-x 2      (split-window-vertically)  : splits the current window\n                                        vertically in half\nC-x 3      (split-window-horizontally): splits the current window\n                                        horizontally in half\nC-x 1      (delete-other-windows)     : closes every but the current window\nC-x 0      (delete-window)            : closes the current window\nC-x o      (other-window)             : switches to the next window\n</code></pre>"},{"location":"reference/emacs-quick-reference/#simple-editing","title":"Simple editing","text":"<pre><code>C-SPC      (set-mark-command)         : sets the mark where the cursor is\nC-w        (kill-region)              : cuts the region from the mark\n                                        till point to the clipboard\nM-w    (kill-ring-save)       : copies the region from the mark\n                    till point to the clipboard\nC-y        (yank)                     : pastes from the clipboard\nC-a        (beginning-of-line)        : positions the cursor to the\n                                        beginning of the line\nC-e        (end-of-line)              : positions the cursor to the\n                                        end of the line\nC-t        (transpose-chars)          : swaps the last two characters\nM-t        (transpose-words)          : swaps the last two words\nC-x C-t    (transpose-lines)          : swaps the last two lines\n</code></pre>"},{"location":"reference/emacs-quick-reference/#search-and-replace","title":"Search and replace","text":"<p>If the search string contains uppercase letters, it will be case sensitive. Case sensitivity can be toggled with M-c during search in newer versions.</p> <pre><code>C-s        (isearch-forward)          : searches forward\nC-r        (isearch-backward)         : searches backward\nM-%        (query-replace)            : replaces a string wherever it\n                                        occurs with another, and asks\n                                        for permission every time\n           (replace-string)           : replaces a string wherever it\n                                        occurs with another\n</code></pre>"},{"location":"reference/emacs-quick-reference/#other-useful-things","title":"Other useful things","text":"<pre><code>           (set-variable)             : sets the value of a variable\nC-h v      (describe-variable)        : displays the current value and\n                        the meaning of a variable\nC-h m      (describe-mode)            : describes the current mode and lists\n                                        its functions and key combinations\nC-h f      (describe-function)        : explains what a function does\nC-g        (keyboard-quit)            : exits from the minibuffer\nC-h ?      (help-for-help)            : gives a help for using help commands\nC-_        (undo)                     : undoes the last change\n           (man)                      : invokes the manual in the next window\n</code></pre>"},{"location":"reference/emacs-quick-reference/#managing-case","title":"Managing case","text":"Spacemacs Major mode Emacs Evil Command Description <code>C-x C-l</code> <code>downcase-region</code> Convert region to lower case <code>C-x C-u</code> <code>upcase-region</code> Convert region to upper case <code>M-c</code> <code>capitalize-word</code> Capitalize the following word <code>M-u</code> <code>upcase-word</code> Convert following word to upper case <code>M-l</code>  ** <code>downcase-word</code> Convert following word to lower case <p>** The keybinding <code>M-l</code> is bound to <code>markdow-demote</code> in spacemacs</p>"},{"location":"reference/emacs-quick-reference/#the-emacs-file","title":"The ~/.emacs file","text":"<p>You can assign hot-keys for frequently used commands:</p> <p>\"(global-set-key key 'command)\", e.g. I recommend the following:</p> <p>(global-set-key \"\\C-cr\" 'revert-buffer) ; C-c r reverts the file from disk (global-set-key [f12] 'compile) (global-set-key [f10] 'shell) (global-set-key [end] 'end-of-buffer) ; only for the new emacs (global-set-key [home] 'beginning-of-buffer) ; only for the new emacs</p>"},{"location":"reference/emacs-quick-reference/#advanced-functions","title":"Advanced functions","text":"<p>Modes</p> <pre><code>Mode-specific indention:\nTAB        (indent-relative)          : indents the current line\nC-M-\\      (indent-region)            : indents the selected region\n\nModes are automatically entered, e.g. when you open a file of a known\nextension. To force a mode-change, you can type these:\n           (latex-mode)               : enters LaTeX mode\n           (c++-mode)                 : enters C++ mode\n           (ada-mode)                 : enters Ada mode\n           (irchat)                   : enters IRC mode (IRChat 2.4+ needed)\n           (rmail)                    : enters mail mode\n           (gnus)                     : enters news-reading mode\n           (tcl-mode)                 : enters TCL mode\n</code></pre> <p>I advise to use IRChat in a new frame (i.e. in another window):            (new-frame)                : opens a new window (only in X/Windows)</p>"},{"location":"reference/emacs-quick-reference/#external-programs","title":"External programs","text":"<pre><code>           (shell)                    : starts a terminal in the window\n           (ediff)                    : compares two files and makes changes\n           (gdb)                      : runs the GNU Debug tool\n</code></pre>"},{"location":"reference/emacs-quick-reference/#simple-editing-2","title":"Simple editing (2)","text":"<pre><code>M-PgUp     (scroll-other-window-down) : scrolls up the next window\nM-PgDn     (scroll-other-window)      : scrolls down the next window\nC-x C-SPC  (pop-global-mark)          : pops the top mark from the stack,\n                                        and moves the cursor there\nC-x C-x    (exchange-point-and-mark)  : exchanges the mark with cursor position\nC-x r SPC  (point-to-register)        : stores the buffer &amp; cursor position\n                                        to a register\nC-x r j    (jump-to-register)         : jumps to a previously stored\n                                        buffer/position.\nM-D        (kill-word)                : cuts from point until\n                                        the next whitespace character\nM-DEL      (backward-kill-word)       : cuts from the last whitespace\n                                        character until point\nC-k        (kill-line)                : cuts the line from point\nC-x r k    (kill-rectangle)           : cuts the rectangle defined by\n                                        the mark as upper left and\n                                        point as lower right corner\n                                        to the clipboard\nC-x r y    (yank-rectangle)           : pastes a rectangle\nM-c        (capitalize-word)          : capitalizes the word under cursor\nM-l        (downcase-word)            : changes the word to lowercase\nM-u        (upcase-word)              : changes the word to uppercase\n           (iso-accents-mode)         : turns on/off flying accents (',~,^)\n</code></pre>"},{"location":"reference/emacs-quick-reference/#search-and-replace-2","title":"Search and replace (2)","text":"<pre><code>C-x n n    (narrow-to-region)         : temporarily crops the buffer to the\n                                        selected region\nC-x n w    (widen)                    : restores the un-cropped buffer\nC-M-%      (query-replace-regexp)     : replaces a regexp wherever it\n                                        occurs with a string, and asks\n                                        for permission every time\n           (replace-regexp)           : replaces a regexp wherever it\n                                        occurs with a string\n           (occur)                    : lists all occurrences of search string\n           (find-name-dired)          : searches for a file with the\n                                        specified name\n           (find-grep-dired)          : searches for a file that contains\n                                        the specified string\n</code></pre>"},{"location":"reference/emacs-quick-reference/#fun-things-to-do","title":"Fun things to do","text":"<pre><code>           (gomoku)                   : emacs plays gomoku with you\n           (blackbox)                 : a nice logical game\n           (dunnet)                   : a hilarious interactive fiction\n           (malyon)                   : a z-code player; you can download\n                                        tons of IF games and this library\n                                        at http://www.ifarchive.org/\n           (calendar)                 : a calendar that tells you\n                                        everything you want to know about\n                                        any day and also provides a\n                                        diary - press ? for commands\n</code></pre>"},{"location":"reference/emacs-quick-reference/#did-you-know","title":"Did you know?","text":"<ul> <li>You can complete minibuffer commands with TAB. If you press it twice, completions appear in the next window.</li> <li>You can hide most of the 'information' buffers (like info, man, completions, help etc.) with q.</li> <li>If you press enter on a directory when typing an address in the minibuffer, a friendly navigator appears.</li> </ul>"},{"location":"reference/emacs-quick-reference/#reference","title":"Reference","text":"<ul> <li>Mastering Emacs</li> </ul>"},{"location":"reference/hydra-menus/","title":"Hydra menus","text":"<p>Some packages also include their own hydra menus. An example of this is the Clojure refactor hyrda menu.</p> <ul> <li><code>C-c C-f h h</code> - clj-refactor (hydra menu)</li> </ul> <pre><code>(hydra-cljr-help-menu/body)\n</code></pre> <p>For more information check the manuals.</p> <p>Call the body in the \"hydra-cljr-help-menu\" hydra.</p> <p>The heads for the associated hydra are:</p> <p>\"n\":    \u2018hydra-cljr-ns-menu/body\u2019, \"c\":    \u2018hydra-cljr-code-menu/body\u2019, \"p\":    \u2018hydra-cljr-project-menu/body\u2019, \"t\":    \u2018hydra-cljr-toplevel-form-menu/body\u2019, \"s\":    \u2018hydra-cljr-cljr-menu/body\u2019, \"q\":    \u2018nil\u2019</p> <p>The body can be accessed via \u2018hydra-cljr-help-menu/body\u2019. ```</p>"},{"location":"reference/hydra-menus/#todotransient-state-keybinding-for-clojure-layer-cljr-refactor","title":"TODO::Transient state keybinding for Clojure layer - cljr-refactor","text":"<p>hydra-cljr-help-menu/body is an interactive compiled Lisp function in `clj-refactor.el'.</p> <p>This is probably irrelevant as clj-refactor is being merged into clojure-mode.</p>"},{"location":"reference/projectile/","title":"Projectile","text":""},{"location":"reference/projectile/#projectile-project-navigation-and-management","title":"Projectile project navigation and management","text":"<p>Projectile provides commands to navigate within a project and manage files and buffers as a project.</p> <p>A project is defined by any of the following:</p> <ul> <li>a source control directory e.g. <code>.git</code></li> <li>programming language tools e.g. <code>deps.edn</code></li> <li>projectile configuration file, <code>.projectile</code></li> </ul>"},{"location":"reference/projectile/#commonly-used-commands","title":"Commonly used commands","text":"<p><code>SPC p f</code> will find a file by name within the project scope</p> <p><code>SPC p a</code> will alternate between a source code file and its unit test file</p> <p><code>SPC p \"</code> opens an external terminal at the root of the project, so external terminal commands can easily be run on the project, e.g. <code>clojure -M:repl/rebel</code> to start a terminal UI REPL</p> <p><code>SPC</code></p>"},{"location":"reference/projectile/#ignore-files-in-project-projectile-configuration-file","title":"Ignore files in project Projectile configuration file","text":"<p>A <code>.projectile</code> file at the root of a project include file and directory name patterns for Projectile to ignore, similar to a <code>.gitignore</code> file.</p> <p>Projectile will ignore patterns in a <code>.gitignore</code> file. however, there may be additional patterns that Projectile should ignore that Git should not</p> <p>Ignore files at the root of the project <pre><code>-/log\n-/tmp\n-/public/uploads\n</code></pre></p> <p>Relative pathname ignores: <pre><code>-tmp\n-*.port\n-*.yml\n</code></pre></p> <p>Ignore everything except certain sub-directories (not relevant for file names)</p> <pre><code>+/src/practicalli\n+/tests/practicalli\n</code></pre>"},{"location":"reference/projectile/#projectile-menu","title":"Projectile menu","text":"<p><code>SPC p</code> opens the projectile menu</p> <p></p>"},{"location":"reference/spacemacs-conventions/","title":"Spacemacs Conventions","text":""},{"location":"reference/spacemacs-conventions/#keybinding-conventions","title":"Keybinding conventions","text":"<p>General menu and commands</p> Spacemacs Major mode Normal Insert Command <code>SPC</code> - global menu <code>,</code> - major mode menu Evil (Vim) normal mode Evil (Vim) insert mode Name of Emacs command <p>Evil (vim-style) states</p> <ul> <li>normal - manipulating text</li> <li>insert - typing in new text</li> <li>visual - selecting regions of text</li> <li>motion - ?</li> <li>lisp - structural editing (smartparens)</li> <li>iedit - editing multiple occurrences in a buffer simultaneously</li> <li>Evilified - Emacs applications with Evil key bindings</li> <li>emacs - Emacs chorded key bindings, i.e. <code>C-c C-x</code>, <code>C-x C-s</code>, etc.</li> </ul>"},{"location":"reference/spacemacs-conventions/#spacemacs-spc","title":"Spacemacs - <code>SPC</code>","text":"<p>Spacemacs provides a global menu where you can access commands using a mnemonic, text based menu.  Its the recommended starting point for those new to Spacemacs.</p> <p>Access the global menu via <code>SPC</code> in Evil Normal mode or via <code>M-m</code> in all other modes</p>"},{"location":"reference/spacemacs-conventions/#major-mode-","title":"Major Mode - <code>,</code>","text":"<p>Access features specific to the current major mode.</p> <p>For example when you have a Clojure file or REPL buffer open you can access a Clojure specific menu using <code>M-RET</code> in Emacs mode or <code>,</code> in Vim normal mode.</p> <p>Having a major mode specific menu removes the need to use <code>SPC m</code> in Vim normal mode or <code>M-m</code> in Emacs mode.</p>"},{"location":"reference/spacemacs-conventions/#evil-normal-mode","title":"Evil (normal mode)","text":"<p>Vim arranges keybindings across multiple modes, reducing the number of key presses required to carry out commands normal mode specific short-cuts to access Spacemacs features</p>"},{"location":"reference/spacemacs-conventions/#command-spc-spc","title":"Command - <code>SPC SPC</code>","text":"<p>Every menu item and keybinding in Spacemacs is calling a function, collectively called commands.</p> <p>Use commands with <code>SPC SPC</code> in Vim normal mode or <code>M-x</code> in any mode.</p> <p>Use a command when there is no menu item or keybinding.</p>"},{"location":"reference/spacemacs-conventions/#classic-emacs-keybindings","title":"Classic Emacs Keybindings","text":"<p>The keybindings used in Emacs (holy mode) are also available, many of which start with <code>C-c</code> or <code>C-x</code>.  If you are familiar with these then its fine to stick with them.  However, if you have trouble learning or remembering them, then switch to the Spacemacs mnemonic alternatives.</p>"},{"location":"reference/spacemacs-conventions/#universal-argument","title":"Universal argument","text":"<p><code>SPC-u</code> is the key binding for the Emacs universal argument, <code>C-u</code> in Emacs, which is used before other key bindings to modify the function that is called.</p> <p>For example, <code>SPC-u , m s</code> in a Clojure file will start a REPL, but allow for editing of the command line that starts the REPL process</p>"},{"location":"reference/switch-to-develop/","title":"Switch to Spacemacs develop branch","text":"<p>Until the release of Spacemacs 0.300 it is highly recommended to use the Spacemacs <code>develop</code> branch. If you have installed the default Spacemacs <code>master</code> branch, follow these steps to switch smoothly to Spacemacs <code>develop</code> branch.</p> <p>If you have not customized the <code>.spacemacs</code> file then simply delete it and checkout the <code>develop</code> branch in <code>.emacs.d</code>.  Starting Emacs will create a new .spacemacs file with the latest updates.</p> <pre><code>cd ~/.emacs.d\ngit checkout develop\n</code></pre>"},{"location":"reference/switch-to-develop/#updating-to-develop-keeping-spacemacs-changes","title":"Updating to develop - keeping .spacemacs changes","text":"<p>If you have changes in the <code>.spacemacs</code> file you wish to keep, there are two approaches.  Either update Spacemacs on top of your changes or replace the configuration and use a diff tool to copy your changes back to the <code>.spacemacs</code> file.</p> Update Existing ConfigurationClean install and diff changes <p>Make a backup of your <code>.spacemacs</code> file.</p> <p>Change into the <code>~/.emacs.d/</code> directory and change the Git branch to <code>develop</code></p> <pre><code>cd ~/.emacs.d/\ngit checkout develop\n</code></pre> <p>Space f e D (<code>spacemacs/ediff-dotfile-and-template</code>) to compare the develop version of the <code>.spacemacs.template</code> with your customized <code>.spacemacs</code> configuration.</p> <p>In the ediff buffer, use J and K to navigate changes, B to copy changes from the <code>spacemacs.template</code> to your custom <code>.spacemacs</code> configuration.</p> <p>You should accept all changes unless you know that you should keep a specific change (eg. layers, variable settings).</p> <p>Q to quit the ediff session.</p> <p>Space f s to save the Spacemacs configuration file.</p> <p>Delete the <code>~/emacs.d/elpa/</code> directory, as packages will downloaded under <code>~/.emacs.d/elpa/develop/&lt;emacs-version&gt;/</code>.</p> <p>Delete the <code>~/.emacs.d</code> directory (backup any changes made in <code>.emacs.d/private</code> if relevant).</p> <p>Clone Spacemacs specifying the <code>develop</code> branch</p> <pre><code>git clone -o upstream https://github.com/syl20bnr/spacemacs ~/.emacs.d\n</code></pre> <p>Move the  <code>~/.spacemacs</code> file or rename it, allowing Spacemacs to create an updated configuration from the <code>develop</code> branch.</p>"},{"location":"reference/switch-to-develop/#start-emacs","title":"Start Emacs","text":"<p>Start Emacs.  Select the editing style (vim, emacs) and spacemacs distribution (full, minimal) to use and Spacemacs creates a new <code>.spacemacs configuration</code>.</p> <p>Spacemacs will download the distribution packages and packages for the default set of layers.  This may take a couple of minutes.</p>"},{"location":"reference/switch-to-develop/#update-spacemacs-configuration","title":"Update Spacemacs configuration","text":"<p>If you have changes from the original Spacemacs install:</p> <p><code>SPC D f f</code> to open ediff.  Select the <code>~/.spacemacs</code> file first and then your <code>.spacemacs</code> backup file.</p> <p><code>j</code>, <code>k</code> navigates (down/up) between each difference in the file.  <code>b</code> copies a change from your custom <code>.spacemacs</code> file to the <code>~/.spacemacs</code> file now used by Spacemacs.</p> <p><code>?</code> to list the diff commands (when the cursor is in window 3)</p> <p><code>q</code> to quit the ediff session (when the cursor is in window 3) and <code>SPC f s</code> to save any changes made to the <code>.spacemacs</code> file.</p>"},{"location":"reference/switch-to-develop/#restart-emacs-to-load-all-changes","title":"Restart Emacs to load all changes","text":"<p><code>SPC q r</code> (<code>emacs-restart</code>) to ensure your .spacemacs changes and packages are loaded.  This may take a minute if you added layers to the <code>.spacemacs</code> configuration file.</p> <p>Once Spacemacs restarts you are ready to enjoy Spacemacs <code>develop</code>.</p>"},{"location":"reference/cider/","title":"Cider reference","text":"<p>The following section complements the excellent CIDER documentation which are highly recommended.</p>"},{"location":"reference/cider/#cider-configuration-variables","title":"CIDER configuration variables","text":"<p>Cider behaviour can easily be modified by changing configuration variables.</p>"},{"location":"reference/cider/#clojure-fancy-symbols","title":"Clojure Fancy Symbols","text":"<p>Set the clojure layer variable <code>clojure-enable-fancify-symbols</code> to <code>t</code> and anonymous functions, partial functions and sets are represented with Greek-style symbols</p> <p>```emacs tile=\"Spacemacs Configuration - dotspacemacs-configuration-layers\"      (clojure :variables               clojure-enable-fancify-symbols t)) <pre><code>!!! WARNING \"Fancy symbols can cause confusion\"\n    Fancy symbols can be an engaging way to write clojure, although they may be an inconvenience especially when demonstrating or pairing on code to other people\n\n\n\n## Aligning forms\n\nAutomatic aligning of forms works with `clojure-mode` by configuring `aggressive-indent-mode`, however, this seriously conflicts with LSP formatting creating an unworkable editing experience.\n\nTo auto-align arguments using clojure-mode, set `lsp-enable-on-type-formatting` to `nil` in the `lsp` layer configuration.  Then add the following configuration in `dotspacemacs/user-config` section of `.spacemacs`\n\n```emacs title=\"Spacemacs Configuration - dotspacemacs/user-config\"\n  ;; Indentation of function forms\n  ;; https://github.com/clojure-emacs/clojure-mode#indentation-of-function-forms\n  (setq clojure-indent-style 'align-arguments)\n  ;;\n  ;; Vertically align s-expressions\n  ;; https://github.com/clojure-emacs/clojure-mode#vertical-alignment\n  (setq clojure-align-forms-automatically t)\n  ;;\n  ;; Auto-indent code automatically\n  ;; WARNING - really conflicts with LSP formatting - set lsp-enable-on-type-formatting to nil in lsp layer\n  ;; https://emacsredux.com/blog/2016/02/07/auto-indent-your-code-with-aggressive-indent-mode/\n  (add-hook 'clojure-mode-hook #'aggressive-indent-mode)\n</code></pre></p>"},{"location":"reference/cider/configuration-variables/","title":"Cider configuration variables.","text":"<p>The following in non-authoritative list of configuration variables, created by searching for <code>defcustom</code> across the clojure-emacs/cider project.</p> <p>Variables are grouped by the files they are defined in throughout the clojure-emacs/cider project.</p> <p>CIDER Variables can be set via:</p> <ul> <li><code>.dir-locals.el</code> files for project specific configuration</li> <li><code>(clojure :variables variable-name value)</code> in .spacemacs layers list</li> <li><code>(setq variable-name value)</code> in <code>dotspacemacs/user-config</code> section of <code>.spacemacs</code></li> </ul>"},{"location":"reference/cider/configuration-variables/#hintclojure-project-configuration","title":"Hint::Clojure Project Configuration","text":"<p>Examples of using <code>.dir-locals.el</code> for Clojure projects are covered in the project level configuration page</p>"},{"location":"reference/cider/configuration-variables/#completion","title":"Completion","text":"Variables Default value Description cider-completion-use-context <code>true</code> - use context at point to improve completion suggestions cider-annotate-completion-candidates <code>true</code> - annotate completion candidates cider-annotate-completion-function function to format annotations for completion candidates - takes 2 arguments: abbreviation candidate type (<code>cider-completion-annotations-alist</code>) and candidate namespace cider-completion-annotations-alist Annotation abbreviation for completion candidates (TYPE . ABBREVIATION). TYPE is that returned from the completion backend.ABBREVIATION is a short form of that type. cider-completion-annotations-include-ns Pass namespace to <code>cider-annotate-completion-function</code>, <code>'always</code> passed if namespace is available. <code>'unqualified</code> only pass namespace if not namespace-qualified."},{"location":"reference/cider/configuration-variables/#client","title":"Client","text":"Variables Default value Description cider-eval-spinner-type <code>'progress-bar</code> Type of evaluation spinner <code>(describe-variable spinner-types)</code> cider-show-eval-spinner <code>t</code> Show evaluation spinner in mode line cider-eval-spinner-delay <code>1</code> Time (seconds) elapsed before evaluation spinner shown (default: <code>1</code>) cider-enhanced-cljs-completion-p <code>t</code> Enable dynamic cljs completions. Expressions at point evaluated, resulting value are used to compute completions cider-print-fn <code>nil</code> Pretty print function: <code>'pprint</code> clojure.pprint, <code>pr</code> <code>clojure.core/pr</code>, <code>fipp</code> fast idiomatic pprint, <code>puget</code> serialised <code>fipp</code>, <code>zprint</code> zprint library, <code>nil</code> defer to REPL cider-print-options <code>nil</code> Options map passed to <code>cider-print-fn</code>, pprint example: <code>'((\\\"length\\\" 50) (\\\"right-margin\\\" 70))</code> cider-print-quota <code>(* 1024 1024)</code> Hard limit on the number of bytes to return from any printing operation, <code>nil</code> for no limit cider-print-buffer-size <code>(* 4 1024)</code> Chunk size (bytes) for print streaming. Smaller chunks, faster feedback and smaller results (only single chunk result can be font-locked) cider-filtered-namespaces-regexps Filter var/symbol/namespace with list of Clojure regex patters (double backslashes as passed through CIDER middleware)"},{"location":"reference/cider/configuration-variables/#eldoc","title":"eldoc","text":"Variables Default value Description cider-eldoc-max-num-sexps-to-skip <code>30</code> Maximum number of sexps to skip while searching the beginning of current sexp cider-eldoc-ns-function <code>#'identity</code> Function returning a ns string to eldoc. Takes namespace name as argument. Convenience functions: <code>cider-abbreviate-ns</code>, and <code>cider-last-ns-segment</code> cider-eldoc-max-class-names-to-display <code>3</code> Maximum number of classes to display in eldoc string (Java interop forms may have several classes), with <code>\"&amp; x more\"</code> suffix. <code>nil</code> - all classes are displayed cider-eldoc-display-for-symbol-at-point <code>t</code> <code>t</code> display eldoc for symbol at point.  <code>nil</code> always display eldoc for first symbol of the sexp. cider-eldoc-display-context-dependent-info <code>nil</code> <code>t</code> display context dependent info in the eldoc. CIDER adds expected function arguments based on the current context"},{"location":"reference/cider/configuration-variables/#debug","title":"debug","text":"Variables Default value Description cider-debug-prompt <code>'overlay</code> Position of debug key binding menu. <code>overlay</code> overlay above the current function. <code>minibuffer</code> in minibuffer with return value. <code>t</code> overlay and minibuffer. <code>nil</code> no menu cider-debug-use-overlays <code>t</code> Highlight debug information with overlays. Same values as <code>cider-use-overlays</code> cider-debug-display-locals <code>nil</code> <code>t</code> local variable display during debugging. Toggled with <code>cider-debug-toggle-locals</code> cider-debug-prompt-commands List of debugger command specs in the format (KEY COMMAND-NAME DISPLAY-NAME?). KEY is a character mapped to the command COMMAND-NAME which is a valid debug command to be passed to the cider-nrepl middleware  DISPLAY-NAME is the string displayed in the debugger overlay.   If DISPLAY-NAME is nil, that command is hidden from the overlay but still callable. The rest of the commands are displayed in the same order as this list.\""},{"location":"reference/cider/configuration-variables/#overlays","title":"Overlays","text":"Variables Default value Description cider-result-use-clojure-font-lock <code>t</code> <code>t</code> interactive eval results are font-locked as Clojure code. cider-overlays-use-font-lock <code>t</code> <code>t</code> results overlays are font-locked as Clojure code. <code>nil</code> apply <code>cider-result-overlay-face</code> to the entire overlay instead cider-use-overlays 'both Display evaluation results with overlays. <code>t</code> overlays determined by <code>cider-result-overlay-position</code>. <code>nil</code> display on the echo area. <code>both</code> display on both places. cider-result-overlay-position <code>'at-eol</code> Display result overlays for inline evaluation and the debugger. If <code>'at-eol</code> display at the end of the line. <code>'at-point</code> display at the end of the respective sexp. cider-eval-result-prefix <code>\"=&gt;\"</code> Prefix displayed in minibuffer before a result value cider-eval-result-duration <code>'command</code> Duration (seconds) of CIDER's eval-result overlays. <code>nil</code> overlays last indefinitely. <code>command</code> overlays erased after the next command. See `cider-use-overlays'. cider-use-fringe-indicators <code>t</code> Display evaluation indicators on the left fringe."},{"location":"reference/cider/configuration-variables/#inspector","title":"Inspector","text":"Variables Default value Description cider-inspector-page-size <code>32</code> Results per page in paginated inspector view, <code>s</code> to interactively change cider-inspector-fill-frame <code>nil</code> <code>t</code> cider inspector window fills its frame cider-inspector-skip-uninteresting <code>t</code> skips values when navigating with `cider-inspector-*-inspectable-object' commands"},{"location":"reference/cider/configuration-variables/#repl-history","title":"REPL history","text":"Variables Default value Description cider-repl-history-display-style <code>'separated</code> <code>'separated</code> display <code>cider-repl-history-separator</code> between entries. <code>'one-line</code> replace newlines with <code>\"\\n\"</code> cider-repl-history-quit-action <code>'quit-window</code> Action when <code>cider-repl-history-quit</code> called. <code>'bury-buffer</code> bury cider-repl-history buffer but keep window, <code>'bury-and-delete-window</code> bury buffer and delete window if more than one window in frame. <code>'delete-and-restore</code> restore window layout and kill cider-repl-history buffer. <code>'quit-window</code> restore window layout and bury cider-repl-history. <code>'kill-and-delete-window</code> kill the cider-repl-history buffer and delete the window on close. cider-repl-history-resize-window nil Resize the <code>cider-repl-history</code> window to fit its contents. <code>t</code> resize window <code>(MAXIMUM . MINIMUM)</code> for the size of the window.  MAXIMUM defaults to the window size chosen by <code>pop-to-buffer'; MINIMUM defaults to</code>window-min-height'. cider-repl-history-separator <code>\";;;;;;;;;;\"</code> String separating entries in the <code>separated</code> style. See <code>cider-repl-history-display-style</code> cider-repl-history-recenter <code>nil</code> <code>t</code> always keep current entry at the top of the window cider-repl-history-highlight-current-entry <code>nil</code> <code>t</code> highlight currently selected command history entry cider-repl-history-highlight-inserted-item <code>nil</code> <code>t</code> temporarily highlight inserted command history entry. <code>'solid</code> highlight inserted text for a fixed period of time. <code>'pulse</code> fade out the highlight gradually.  <code>cider-repl-history-inserted-item-face</code> face used for highlighting. cider-repl-history-separator-face <code>'bold</code> Face to highlight <code>cider-repl-history-separator</code> cider-repl-history-current-entry-face <code>'highlight</code> Face to highlight command history current entry cider-repl-history-inserted-item-face <code>'highlight</code> Face to highlight inserted item cider-repl-history-maximum-display-length <code>nil</code> Limit the length of displayed items. Command history limited to number of characters. <code>nil</code> means no limit cider-repl-history-display-duplicates <code>t</code> <code>t</code> display duplicate items in the command history cider-repl-history-display-duplicate-highest <code>t</code> When <code>cider-repl-history-display-duplicates</code> is nil, display most recent duplicate items in command history cider-repl-history-text-properties <code>nil</code> If non-nil, maintain text properties of the command history items. cider-repl-history-hook <code>nil</code> List of functions to call after `cider-repl-history' cider-repl-history-show-preview <code>nil</code> <code>t</code> show preview of inserted text in REPL buffer using item under point where inserted"},{"location":"reference/cider/configuration-variables/#xref","title":"xref","text":"Variables Default value Description cider-xref-actions <code>'((\"display-doc\" . cider-doc-lookup)</code> Actions applied on symbol found by xref search. First action in list selected as default. If only one action function, its applied automatically"},{"location":"reference/cider/configuration-variables/#util","title":"util","text":"Variables Default value Description cider-font-lock-max-length <code>10000</code> Maximum length of strings to fontify in <code>cider-font-lock-as</code>. <code>nil</code> removes the fontification restriction cider-doc-xref-regexp Regexp to search Clojure vars in doc buffers cider-jdk-src-paths <code>'(\"/usr/lib/jvm/openjdk-8/src.zip\")</code> Source code used by `cider-stacktrace-navigate'. Zip/jar file or extracted directory (recommended). Clojure sources: https://mvnrepository.com/artifact/org.clojure/clojure"},{"location":"reference/cider/configuration-variables/#repl","title":"repl","text":"Variables Default value Description cider-repl-pop-to-buffer-on-connect <code>t</code> Display and Focus REPL buffer on connect. <code>nil</code> REPL buffer is created but not displayed. <code>display-only</code> REPL buffer displayed but not focused. cider-repl-display-in-current-window <code>nil</code> Display REPL buffer in the current window. cider-repl-use-pretty-printing <code>t</code> REPL buffer results pretty-printed.  <code>cider-toggle-pretty-printing</code> interactively toggles. Specify printer function in <code>cider-pprint-fn</code>. cider-repl-use-content-types <code>nil</code> REPL results presented using content-type information. <code>cider-repl-toggle-content-types</code> interactively toggles cider-repl-auto-detect-type <code>t</code> Auto-detect REPL type using track-state information. <code>cider-set-repl-type</code> to manually change REPL between Clojure and ClojureScript REPL cider-repl-use-clojure-font-lock <code>t</code> <code>t</code> use Clojure mode font-locking for input and result. <code>nil</code> uses <code>cider-repl-input-face</code> and <code>cider-repl-result-face</code> cider-repl-require-ns-on-set <code>nil</code> Should the namespace be required before setting it in the REPL cider-repl-result-prefix <code>\"\"</code> Display prefix characters in the REPL before a result value, e.g. <code>\"=&gt;\"</code> may make results stand out more cider-repl-tab-command <code>'cider-repl-indent-and-complete-symbol</code> Command invoked by <code>TAB</code> key. Default option is <code>cider-repl-indent-and-complete-symbol</code>. <code>indent-for-tab-command</code> to use the default Emacs behavior. cider-repl-init-code <code>(list (cdr (assoc 'clj cider-repl-require-repl-utils-code)))</code> Clojure code evaluated when starting a REPL, evaluated with bindings for <code>set!</code>-able vars in place. cider-repl-display-help-banner <code>t</code> <code>t</code> help text will be displayed on REPL start cider-repl-prompt-function <code>#'cider-repl-prompt-default</code> Function takes a namespace name and returns a prompt string. Convenience functions: <code>cider-repl-prompt-lastname</code>, <code>cider-repl-prompt-abbreviated</code> and <code>cider-repl-prompt-default</code> cider-repl-image-margin <code>10</code> Margin applied to images in REPL buffer. Single number of pixels as symmetric margin, pair of numbers <code>(x . y)</code> for an arbitrary margin cider-locref-regexp-alist Regular expressions for inline location references. (NAME REGEXP HIGHLIGHT VAR FILE LINE), NAME identifier of the regexp, REGEXP regexp matching a location, HIGHLIGHT sub-expression matching region to highlight on mouse-over, VAR sub-expression giving Clojure VAR to look up.  FILE only used when VAR is nil and must be full resource path cider-repl-wrap-history <code>nil</code> <code>t</code> to wrap history when the end is reached cider-repl-history-size <code>500</code> Maximum number of items to keep in the REPL history cider-repl-history-file <code>nil</code> File to save the persistent REPL history cider-repl-shortcut-dispatch-char <code>?\\,</code> Character used to distinguish REPL commands from Lisp forms <code>cider-repl-buffer-size-limit</code> No default Auto-trimming: Remove older output in the REPL buffer once the set size is reached"},{"location":"reference/cider/configuration-variables/#ciderel","title":"cider.el","text":"Variables Default value Description cider-lein-command Command used to execute Leiningen cider-lein-global-options Command global options used to execute Leiningen (e.g. <code>-o</code> for offline). cider-lein-parameters Params passed to Leiningen to start an nREPL server via <code>cider-jack-in</code>. cider-boot-command Command used to execute Boot cider-boot-global-options Command global options used to execute Boot (e.g. <code>-c</code> for checkouts). cider-boot-parameters Params passed to boot to start an nREPL server via <code>cider-jack-in</code>. cider-clojure-cli-command Command execute Clojure CLI deps.edn. If <code>clojure</code> executable is not found on Windows, default to <code>powershell</code> cider-clojure-cli-global-options DEPRECATED: use <code>cider-clojure-cli-aliases</code> - Command line options used to execute Clojure CLI cider-clojure-cli-aliases Aliases to be added to Clojure CLI command (inserted before <code>:cider/nrepl</code>) cider-clojure-cli-parameters Params to start an nREPL server via <code>cider-jack-in</code>. evaluated using <code>format</code>, with the first argument being the Clojure vector of middleware variables as a string. cider-shadow-cljs-command The command used to execute shadow-cljs. By default we favour the project-specific shadow-cljs over the system-wide. cider-shadow-cljs-global-options Command line options used to execute shadow-cljs (e.g. <code>-v</code> for verbose mode). cider-shadow-cljs-parameters Params passed to shadow-cljs to start an nREPL server via <code>cider-jack-in</code>. cider-gradle-command Command used to execute Gradle. cider-gradle-global-options Command line options used to execute Gradle (e.g.: <code>-m</code> for dry run). cider-gradle-parameters Params passed to gradle to start an nREPL server via <code>cider-jack-in</code> cider-jack-in-default <code>(if (executable-find \"clojure\") 'clojure-cli 'lein)</code> Default tool when <code>cider-jack-in</code> outside a project. The Clojure CLI is is the default. Fallback to Leiningen if Clojure CLI not available cider-preferred-build-tool Unless set, prompt when multiple project configuration files (deps.edn, project.clj, build.boot) cider-allow-jack-in-without-project <code>'warn</code> <code>'warn</code> prompt to confirm jack-in command when not in a Clojure project. <code>t</code> <code>cider-jack-in'</code>quietly continues. <code>nil</code> <code>cider-jack-in</code> fails. cider-known-endpoints <code>nil</code> List of connection endpoints for <code>cider-connect</code> eg. <code>'((\\\"label\\\" \\\"host\\\" \\\"port\\\"))</code> (label optional) cider-connected-hook <code>nil</code> List of functions to call when connected to Clojure nREPL server. cider-disconnected-hook <code>nil</code> List of functions to call when disconnected from the Clojure nREPL server cider-inject-dependencies-at-jack-in <code>t</code> <code>nil</code> do not inject REPL dependencies (i.e. nREPL middleware) for <code>cider-jack-in</code> cider-offer-to-open-cljs-app-in-browser <code>t</code> <code>nil</code> do not offer to open ClojureScript apps in a browser on connect cider-jack-in-auto-inject-clojure <code>nil</code> <code>nil</code> Clojure version not injected. <code>latest</code> inject <code>cider-latest-clojure-version</code>,  <code>minimal</code> inject <code>cider-minimum-clojure-version</code> <code>\"1.10.3\"</code>  explicit version.  Using list, first element is artifact ID string, second element is version number cider-check-cljs-repl-requirements <code>t</code> Run requirement checks for the cljs REPLs. (only disable if experiencing a faulty check) cider-custom-cljs-repl-init-form <code>nil</code> Form to start custom ClojureScript REPL  (becomes return value of <code>cider-custom-cljs-repl-init-form</code> function which prompts for init form). Use with <code>.dir-locals.el</code> where it doesn't make sense to register a new ClojureScript REPL type cider-default-cljs-repl <code>nil</code> ClojureScript REPL to start for cljs jack-in commands (<code>.dir-locals.el</code> approach recommended) cider-edit-jack-in-command <code>nil</code> <code>t</code> allow the user to edit the <code>cider-jack-in-*</code> command line cider-infer-remote-nrepl-ports <code>nil</code> <code>t</code> cider will use ssh to try to infer nREPL ports on remote hosts"},{"location":"reference/cider/configuration-variables/#apropos","title":"apropos","text":"Variables Default value Description cider-apropos-actions <code>'((\"display-doc\" . cider-doc-lookup)</code> Controls the actions to be applied on the symbol found by an apropos search"},{"location":"reference/cider/configuration-variables/#scratch","title":"scratch","text":"Variables Default value Description cider-scratch-initial-message Initial message displayed in new scratch buffers"},{"location":"reference/cider/configuration-variables/#ns","title":"ns","text":"Variables Default value Description cider-ns-save-files-on-refresh <code>'prompt</code> <code>'prompt</code> user prompt to save modified files before refreshing. <code>nil</code> files not saved. <code>t</code> save modified files without confirmation. cider-ns-save-files-on-refresh-modes <code>'(clojure-mode)</code> List of modes to determine which modified files are saved before refreshing. A major mode derived from list of the modes. <code>t</code> all modified files on the classpath are saved. cider-ns-refresh-show-log-buffer <code>nil</code> <code>nil</code> log buffer will be written to but not displayed automatically (relevant info shown in mini-buffer  <code>t</code> log buffer will be displayed every time <code>cider-ns-refresh</code> is called. cider-ns-refresh-before-fn <code>nil</code> Clojure namespace-qualified function of zero arity called by <code>cider-ns-refresh</code> before reloading. <code>nil</code> no function called before reloading. Any thrown exception will prevent reloading. cider-ns-refresh-after-fn <code>nil</code> Clojure namespace-qualified function of zero arity for <code>cider-ns-refresh</code> to call after reloading. <code>nil</code> no function invoked after reloading."},{"location":"reference/cider/configuration-variables/#macroexpansion","title":"macroexpansion","text":"Variables Default value Description cider-macroexpansion-display-namespaces <code>tidy</code> Should full namespace be shown for vars in macroexpansion buffer <code>'tidy</code> not shown for locally defined or referred vars, <code>'qualified</code> fully qualified vars shown, <code>'none</code> no namespace qualification cider-macroexpansion-print-metadata <code>nil</code> <code>t</code> include metadata in macroexpansion results"},{"location":"reference/cider/configuration-variables/#test","title":"test","text":"Variables Default value Description cider-test-show-report-on-success <code>nil</code> Show <code>*cider-test-report*</code> buffer for successful tests, <code>nil</code> only generates report when tests fail and subsequent test runs cider-auto-select-test-report-buffer <code>t</code> Should <code>*cider-test-report*</code> buffer be active window when it appears cider-test-defining-forms <code>'(\"deftest\" \"defspec\")</code> Forms that define top level of individual unit tests cider-test-infer-test-ns <code>'cider-test-default-test-ns-fn</code> infer test namespace. Defaults to <code>-test</code> postfix on the namespace name"},{"location":"reference/cider/configuration-variables/#common","title":"common","text":"Variables Default value Description cider-prompt-for-symbol <code>t</code> always prompt, use symbol at point as default. <code>nil</code> use symbol at point, prompt if error. cider-special-mode-truncate-lines <code>t</code> CIDER special buffers are line-truncated cider-jump-to-pop-to-buffer-actions window <code>cider-jump-to</code> uses. If target file visible, reuse it. Otherwise open buffer in current window cider-path-translations nil alist of path prefixes to path prefixes.  Example: Map project located at <code>\\\"~/projects/foo\\\"</code> with src directory of foo mounted at <code>\\\"/src\\\"</code> in docker container  <code>`((\\\"/src\\\" \\\"~/projects/foo/src\\\"))</code> cider-prefer-local-resources nil Prefer local resources to remote (tramp) ones when both are available"},{"location":"reference/cider/configuration-variables/#cider-docel","title":"cider-doc.el","text":"Variables Default value Description cider-doc-auto-select-buffer <code>t</code> auto-select the doc popup buffer cider-docview-fill-column <code>fill-column</code> Fill column for docstrings in doc buffer"},{"location":"reference/cider/configuration-variables/#nrepl-clientel","title":"nrepl-client.el","text":"Variables Default value Description nrepl-connected-hook <code>nil</code> List of functions to call when connecting to the nREPL server. nrepl-disconnected-hook <code>nil</code> List of functions to call when disconnected from the nREPL server. nrepl-force-ssh-for-remote-hosts <code>nil</code> If non-nil, do not attempt a direct connection for remote hosts. nrepl-use-ssh-fallback-for-remote-hosts <code>nil</code> If non-nil, attempt to connect via ssh to remote hosts when unable to connect directly. nrepl-sync-request-timeout <code>10</code> The number of seconds to wait for a sync response. Setting this to nil disables the timeout functionality. nrepl-hide-special-buffers <code>nil</code> In buffer switching commands, some special buffers like the server buffer will be hidden nrepl-log-messages <code>nil</code> <code>t</code> log protocol messages to nREPL messages buffer. During debug, allows inspection of communication between Emacs and nREPL server.  Logging may impact performance nrepl-message-colors Colors used in the messages buffer."},{"location":"reference/cider/configuration-variables/#stacktrace","title":"stacktrace","text":"Variables Default value Description cider-stacktrace-fill-column <code>t</code> Fill column for error messages in stacktrace display. If nil, messages will not be wrapped.  If truthy but non-numeric, `fill-column' will be used. cider-stacktrace-default-filters <code>'(tooling dup)</code> Frame types to omit from initial stacktrace display cider-stacktrace-suppressed-errors <code>'()</code> Errors that won't make the stacktrace buffer 'pop-over' your active window. The error types are represented as strings"},{"location":"reference/cider/configuration-variables/#cider-evalel","title":"cider-eval.el","text":"Variables Default value Description cider-show-error-buffer <code>t</code> popup behavior of cider stack traces. <code>'always</code>, <code>'except-in-repl</code>, <code>'only-in-repl</code>, <code>nil</code> no stack trace shown. <code>cider-error-buffer</code> always generated in background cider-auto-jump-to-error <code>t</code> automatically jump to error location. <code>'errors-only</code> don't jump to warnings cider-auto-select-error-buffer <code>t</code> auto-select the error popup buffer cider-auto-track-ns-form-changes <code>t</code> auto-evaluate ns form of source buffer when changed. <code>nil</code> no evaluation of ns forms cider-auto-inspect-after-eval <code>t</code> auto-update inspector buffer after eval when cider-inspect buffer is visible cider-save-file-on-load <code>'prompt</code> prompt to save the file when loading a buffer. <code>t</code> save file without confirmation. <code>nil</code> files are not saved. cider-file-loaded-hook <code>nil</code> List of functions to call when a load file has completed cider-interactive-eval-output-destination <code>'repl-buffer</code> destination for stdout and stderr produced from interactive evaluation cider-comment-prefix \";;=&gt;\" prefix to insert before the first line of commented output cider-comment-continued-prefix \";;\" prefix to use on the second and subsequent lines of commented output cider-comment-postfix \"\" postfix to be appended after the final line of commented output"},{"location":"reference/cider/configuration-variables/#cider-modeel","title":"cider-mode.el","text":"Variables Default value Description cider-mode-line-show-connection <code>t</code> show REPL connection details in modeline cider-mode-line display current connection Mode line lighter to display cider status, <code>nil</code> disables status. variable is a mode line template as in <code>mode-line-format</code>. Info Node <code>(elisp)Mode Line Format</code> for mode line templates. cider-switch-to-repl-after-insert-p <code>t</code> Switch to REPL buffer after inserting form to the REPL cider-switch-to-repl-on-insert <code>t</code> Switch to REPL buffer when inserting form into the REPL cider-invert-insert-eval-p <code>nil</code> <code>nil</code> insert form in REPL buffer, <code>t</code> insert and eval form in REPL buffer cider-dynamic-indentation <code>t</code> Enhance clojure-mode indentation using runtime nformation, eg. <code>\":style/indent\"</code> metadata cider-font-lock-dynamically <code>'(macro core deprecated)</code> Apply syntax highlighting to vars defined in active nREPL connection, in addition to <code>clojure-mode</code> static font-lock. Value is list of symbols: <code>macro</code> any defined macro gets <code>font-lock-keyword-face</code>, <code>function</code> defined function gets the <code>font-lock-function-face</code>, <code>var</code> non-local var gets the <code>font-lock-variable-name-face</code>, <code>deprecated</code> deprecated var gets the <code>cider-deprecated-face</code>, <code>core</code> symbol from clojure.core (face depends on type), <code>t</code> font lock as much as possible cider-font-lock-reader-conditionals <code>t</code> Apply font-locking to unused reader conditional expressions depending on the buffer CIDER connection type cider-use-tooltips <code>t</code> <code>t</code> displays mouse-over tooltips and `help-echo' mechanism"},{"location":"reference/cider/configuration-variables/#cider-connectionel","title":"cider-connection.el","text":"Variables Default value Description cider-session-name-template <code>\"%J:%h:%p\"</code> String format for session names - describe <code>cider-format-connection-params</code> for available formats cider-connection-message-fn <code>#'cider-random-words-of-inspiration</code> generate the message displayed on connect - <code>nil</code> no message, <code>cider-random-tip</code> random tip on using CIDER cider-redirect-server-output-to-repl <code>t</code> Should nREPL server output be redirected to the REPL buffer. <code>t</code> output sent to nrepl-server buffer and REPL buffer. <code>n</code> only nrepl-server buffer cider-auto-mode <code>t</code> Should all Clojure buffers be automatically set to cider major mode"},{"location":"reference/clojure/","title":"Clojure Reference","text":"<ul> <li>Clojure Syntax</li> <li>Example code</li> <li>idioms</li> <li>patterns (reducing functions, etc.)</li> </ul>"},{"location":"reference/clojure/#todowork-in-progress-sorry","title":"TODO::work in progress, sorry","text":"<p>Pull requests are welcome</p>"},{"location":"reference/clojure/control-flow/","title":"Control flow","text":""},{"location":"reference/clojure/control-flow/#todowork-in-progress-sorry","title":"TODO::work in progress, sorry","text":"<p>Pull requests are welcome</p>"},{"location":"reference/clojure/data-structures/","title":"Data Structures","text":""},{"location":"reference/clojure/data-structures/#todowork-in-progress-sorry","title":"TODO::work in progress, sorry","text":"<p>Pull requests are welcome</p>"},{"location":"reference/clojure/functions/","title":"Functions","text":""},{"location":"reference/clojure/functions/#todowork-in-progress-sorry","title":"TODO::work in progress, sorry","text":"<p>Pull requests are welcome</p>"},{"location":"reference/clojure/maths/","title":"Maths","text":""},{"location":"reference/clojure/maths/#todowork-in-progress-sorry","title":"TODO::work in progress, sorry","text":"<p>Pull requests are welcome</p>"},{"location":"reference/clojure/strings/","title":"Strings","text":""},{"location":"reference/clojure/strings/#todowork-in-progress-sorry","title":"TODO::work in progress, sorry","text":"<p>Pull requests are welcome</p>"},{"location":"reference/clojure-lsp/","title":"Clojure LSP reference","text":"<ul> <li>LSP layer Variables and default values</li> </ul>"},{"location":"reference/clojure-lsp/lsp-variables-reference/","title":"Reference: Variables of the LSP layer","text":"<p>A quick reference of the main variables that can be set in the Spacemacs LSP layer configuration</p>"},{"location":"reference/clojure-lsp/lsp-variables-reference/#lsp-mode","title":"LSP-mode","text":"Variable default description lsp-enable-snippet t Enable LSP server built-in snippets and custom snippets lsp-enable-folding t lsp-semantic-tokens-enable nil lsp-enable-file-watchers t lsp-enable-links t lsp-enable-imenu t lsp-enable-dap-auto-configure t lsp-eldoc-enable-hover t lsp-completion-enable t Autocompletion pop-up lsp-enable-symbol-highlighting t Highlight matching symbol names in current buffer lsp-enable-xref t lsp-enable-indentation t Disable to use Clojure-mode (CIDER) formatting lsp-enable-on-type-formatting t Disable to use Clojure-mode (CIDER) formatting lsp-enable-text-document-color t lsp-modeline-code-actions-enable t lsp-modeline-diagnostics-enable t Show LSP error/warning count in modeline lsp-modeline-diagnostics-scope :workspace Diagnostics relevant to the current project only lsp-modeline-workspace-status-enable t lsp-headerline-breadcrumb-enable t lsp-lens-enable t lsp-enable-suggest-server-download t lsp-file-watch-threshold 1000 Maximum number of files to watch in a project lsp-log-io nil log all messages from language server to lsp-log buffer"},{"location":"reference/clojure-lsp/lsp-variables-reference/#related-toggles","title":"Related toggles","text":"<p><code>SPC SPC lsp-toggle-symbol-highlight</code> toggles highlighting</p> <p>Symbol Highlight face</p> <p>Subtle highlighting color for <code>doom-gruvbox-light</code> theme is defined in <code>dotspacemacs/user-init</code> of practicalli/spacemacs.d</p>"},{"location":"reference/clojure-lsp/lsp-variables-reference/#lsp-ui","title":"LSP UI","text":"variable default description lsp-ui-sideline-enable t Show sideline bar lsp-ui-doc-enable t disable all doc popups lsp-ui-doc-show-with-cursor nil doc popup for cursor lsp-ui-doc-show-with-mouse nil doc popup for mouse lsp-ui-doc-delay 2 delay in seconds for popup to display lsp-ui-doc-include-signature t include function signature lsp-ui-doc-position 'at-point top bottom at-point lsp-ui-doc-alignment 'window Position of doc popup - <code>'frame</code> or <code>'window</code> lsp-enable-text-document-color t Font lock text in doc popup lsp-lens-enable t display function call and unit test count next to function name <p>Disable Sideline bar</p> <p>Practicalli recommends disabling the sideline bar to minimise distractions Add <code>lsp-ui-sideline-enable nil</code> to the lsp layer <code>:variables</code> in the Spacemacs configuration</p>"},{"location":"reference/clojure-lsp/lsp-variables-reference/#references","title":"References","text":"<ul> <li>Configure Emacs as a Clojure IDE guide</li> <li>A guide on disabling/enabling lsp-mode features</li> <li>Emacs LSP UI website and emacs-lsp/lsp-ui repository</li> </ul>"},{"location":"reference/keybindings/","title":"Reference: Keybindings","text":""},{"location":"reference/keybindings/#useful-spacemacs-commands","title":"Useful Spacemacs commands","text":"<pre>\nSPC q q - quit\nSPC w / - split window vertically\nSPC w - - split window horizontally\nSPC 1   - switch to window 1\nSPC 2   - switch to window 2\nSPC w d - delete current window\nSPC TAB - switch to previous buffer\nSPC b b - switch buffers\nSPC f f - find a file\nSPC f s - save a file (:w also works)\nSPC p p - open project\nSPC p h - find a file in current project\nSPC b d - delete current buffer\nSPC b M - move buffer to another window\nSPC v   - enter expand-region mode\n</pre>"},{"location":"reference/keybindings/cider-keybindings/","title":"Common CIDER default keybindings for Emacs","text":"<p>There are a number of Cider keyboard shortcuts (keybindings) already defined that also work alongside the Spacemacs keybindings.</p> <ul> <li> <p><code>C-c C-e</code> - evaluates the previous form to the current position of the cursor and shows the result in the minibuffer and inline with the code (until you move the cursor away).  So place your cursor after the closing parentheses <code>)</code> of your expression or on the next line and hit the keybinding and see the result.</p> </li> <li> <p><code>C-c M-;</code> - evaluates previous form and prints the result as a comment on the following line.  The keybinding <code>M-;</code> is a universal comment in all modes.  With C-c as a prefix it evaluate the previous function before creating a comment of the return value.</p> </li> </ul> <p></p> <ul> <li><code>C-c M-e</code> - the same as above except the result is sent to the REPL</li> </ul> <p></p> <ul> <li> <p><code>C-c C-k</code> - evaluate the whole buffer.  So with the cursor in a Clojure source file, all the forms / expressions are evaluate as if the code was loaded in from scratch.</p> </li> <li> <p><code>C-c C-d d</code> - show the documentation as you would with <code>(doc function-name)</code>.  Place the cursor over a function name, hit the keybinding and see the documentation for that function.  This also works inside the REPL buffer, so no need to use <code>(doc)</code>, which is not loaded by default.</p> </li> <li> <p><code>C-c M-n</code> - switch to namespace of current Clojure buffer.  So with the cursor in a Clojure source file, hit the keybinding and your REPL buffer will now be in the namespace for that Clojure code.</p> </li> </ul> <p></p> <p>Changing into a namespace does not automatically evaluate the code in that namespace, so evaluate the whole buffer <code>C-c C-k</code> or evaluate specific expressions (forms) <code>C-c M-e</code>.  Once evaluated, you can evaluate that code in the REPL.</p> <ul> <li> <p><code>M-&gt;</code> or <code>M-x cider-jump-to-var</code> prompts you for a var, a function <code>(defn)</code> or symbol name <code>(def)</code> and moves the cursor to its definition.  If the cursor is already on a matching name the the cursor jumps straight to that definition.</p> </li> <li> <p><code>C-c C-q</code> or <code>M-x cider-quit</code> - close the REPL and its associated buffer.</p> </li> </ul> <p>There are many more things you can do within Clojure files and the REPL, so take a look at the Cider keyboard shortcuts (keybindings) once you have the basics mastered.</p>"},{"location":"reference/keybindings/cider-keybindings/#hintcider-keybindings-have-more-cognitive-load","title":"Hint::CIDER keybindings have more cognitive load","text":"<p>It is this authors opinion that the CIDER keybindings are harder to learn than the mnemonic keybindings of Spacemacs.</p>"},{"location":"reference/keybindings/vim-keybindings/","title":"Useful Vim key bindings","text":""},{"location":"reference/keybindings/vim-keybindings/#movement","title":"movement","text":"<pre>\n0 - beginning of line\n^ - beginning of non-whitespace\n$ - end of line\n9j - move down 9 lines\nw - move forward by word\nb - move backward by word\ngg - first line\nG - last line\nC-u - up half page\nC-d - down half page\nf/ - move forward to first \"/\" character\nt/ - move forward right before the first \"/\" character\n; - repeat that command again\nH - head of the screen\nM - middle of the screen\nL - last of the screen\n} - move forward by paragraph or block\n{ - move backwards by paragraph or block\n* - search for word under the cursor\n    n - search again forward\n    N - search again backwards\n# - search backwards for word under cursor\n/ - search forward\n? - search backward\n% - find matching brace, paren, etc\nma - mark a line in a file with marker \"a\"\n`a - after moving around, go back to the exact position of marker \"a\"\n'a - after moving around, go back to line of marker \"a\"\n:marks - view all the marks\n'' - go to the last place you were\n[{ - jump back to the \"{\" at the beginning of the current code block\n</pre>"},{"location":"reference/keybindings/vim-keybindings/#editing","title":"editing","text":"<pre>\nx - delete char under cursor\nX - delete char before cursor\nA - add to end of line\nI - insert at the beginning of the line\ndd - delete line\nD - delete from cursor to end of line\ndi' - delete text inside single quotes\nyy - copy line\nY - copy from cursor to end of line\ncc - change line\nC - change from cursor to end of line\ncit - change text inside html tag\nci' - change text inside single quotes\nci{ - change text inside curly brackets.\nci... - etc\np - paste after cursor\nP = paste before cursor\no - add line below\nO - add line above\n. = repeat last comment\nr - replace character\nR - replace. (overwrite) (good for columns of text)\nJ - join line (cursor can be anywhere on line)\n</pre>"},{"location":"reference/keybindings/vim-keybindings/#visual-mode","title":"visual mode","text":"<pre>\nv - visual char mode\nV - visual line mode\nC-v - block visual mode\n</pre> <p>v - visual char mode V - visual line mode C-v - block visual mode </p>"},{"location":"reference/structural-editing/smartparens-cheatsheet/","title":"Smartparens cheatsheet","text":"<p><code>SPC SPC sp-cheat-sheet</code>  lists all the smartparens commands available</p> <pre><code>(sp-cheat-sheet &amp;optional ARG)\n</code></pre> <p>Generate a cheat sheet of all the smartparens interactive functions.</p> <p>Without a prefix argument, print only the short documentation and examples.</p> <p>With non-nil prefix argument ARG, show the full documentation for each function.</p> <p>You can follow the links to the function or variable help page. To get back to the full list, use [.</p> <p>You can use \u2018beginning-of-defun\u2019 and \u2018end-of-defun\u2019 to jump to the previous/next entry.</p> <p>Examples are fontified using the \u2018font-lock-string-face\u2019 for better orientation.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <pre><code>(sp-describe-system)\n</code></pre> <p>Describe user\u2019s system.</p> <p>The output of this function can be used in bug reports.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <pre><code>(smartparens-strict-mode &amp;optional ARG)\n</code></pre> <p>Toggle the strict smartparens mode.</p> <p>When strict mode is active, \u2018delete-char\u2019, \u2018kill-word\u2019 and their backward variants will skip over the pair delimiters in order to keep the structure always valid (the same way as \u2018paredit-mode\u2019 does).  This is accomplished by remapping them to \u2018sp-delete-char\u2019 and \u2018sp-kill-word\u2019.  There is also function \u2018sp-kill-symbol\u2019 that deletes symbols instead of words, otherwise working exactly the same (it is not bound to any key by default).</p> <p>When strict mode is active, this is indicated with \"/s\" after the smartparens indicator in the mode list.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <pre><code>(smartparens-global-strict-mode &amp;optional ARG)\n</code></pre> <p>Toggle Smartparens-Strict mode in all buffers. With prefix ARG, enable Smartparens-Global-Strict mode if ARG is positive; otherwise, disable it.  If called from Lisp, enable the mode if ARG is omitted or nil.</p> <p>Smartparens-Strict mode is enabled in all buffers where \u2018turn-on-smartparens-strict-mode\u2019 would do it. See \u2018smartparens-strict-mode\u2019 for more information on Smartparens-Strict mode.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <pre><code>(turn-on-smartparens-strict-mode)\n</code></pre> <p>Turn on \u2018smartparens-strict-mode\u2019.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <pre><code>(turn-off-smartparens-strict-mode)\n</code></pre> <p>Turn off \u2018smartparens-strict-mode\u2019.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-prefix-tag-object is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-prefix-tag-object &amp;optional ARG)\n</code></pre> <p>Read the command and invoke it on the next tag object.</p> <p>If you specify a regular emacs prefix argument this is passed to the executed command.  Therefore, executing \"SPC u 2 M-x sp-prefix-tag-object M-x sp-forward-sexp\" will move two tag expressions forward, ignoring possible symbols or paired expressions in between.</p> <p>Tag object is anything delimited by sgml tag.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-prefix-pair-object is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-prefix-pair-object &amp;optional ARG)\n</code></pre> <p>Read the command and invoke it on the next pair object.</p> <p>If you specify a regular emacs prefix argument this is passed to the executed command.  Therefore, executing \"SPC u 2 M-x sp-prefix-pair-object M-x sp-forward-sexp\" will move two paired expressions forward, ignoring possible symbols in between.</p> <p>Pair object is anything delimited by pairs from \u2018sp-pair-list\u2019.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-prefix-symbol-object is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-prefix-symbol-object &amp;optional ARG)\n</code></pre> <p>Read the command and invoke it on the next pair object.</p> <p>If you specify a regular emacs prefix argument this is passed to the executed command.  Therefore, executing \"SPC u 2 M-x sp-prefix-symbol-object M-x sp-forward-sexp\" will move two symbols forward, ignoring any structure.</p> <p>Symbol is defined as a chunk of text recognized by \u2018sp-forward-symbol\u2019.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-prefix-save-excursion is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-prefix-save-excursion &amp;optional ARG)\n</code></pre> <p>Execute the command keeping the point fixed.</p> <p>If you specify a regular emacs prefix argument this is passed to the executed command.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-narrow-to-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-narrow-to-sexp ARG)\n</code></pre> <p>Make text outside current balanced expression invisible. A numeric arg specifies to move up by that many enclosing expressions.</p> <p>See also \u2018narrow-to-region\u2019 and \u2018narrow-to-defun\u2019.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-forward-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-forward-sexp &amp;optional ARG)\n</code></pre> <p>|(foo bar baz)   -&gt; (foo bar baz)|</p> <p>(|foo bar baz)   -&gt; (foo| bar baz)</p> <p>(|foo bar baz)   -&gt; (foo bar| baz) ;; 2</p> <p>(foo (bar baz|)) -&gt; (foo (bar baz)|)</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-backward-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-backward-sexp &amp;optional ARG)\n</code></pre> <p>(foo bar baz)|   -&gt; |(foo bar baz)</p> <p>(foo| bar baz)   -&gt; (|foo bar baz)</p> <p>(foo bar| baz)   -&gt; (|foo bar baz) ;; 2</p> <p>(|(foo bar) baz) -&gt; ((|foo bar) baz)</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-next-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-next-sexp &amp;optional ARG)\n</code></pre> <p>((foo) |bar (baz quux)) -&gt; ((foo) bar |(baz quux))</p> <p>((foo) bar |(baz quux)) -&gt; |((foo) bar (baz quux))</p> <p>and with non-nil \u2018sp-navigate-interactive-always-progress-point\u2019</p> <p>(f|oo bar) -&gt; (foo |bar)</p> <p>((fo|o) (bar)) -&gt; ((foo) |(bar))</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-previous-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-previous-sexp &amp;optional ARG)\n</code></pre> <p>((foo) bar| (baz quux)) -&gt; ((foo)| bar (baz quux))</p> <p>((foo)| bar (baz quux)) -&gt; ((foo) bar (baz quux))|</p> <p>and if \u2018sp-navigate-interactive-always-progress-point\u2019 is non-nil</p> <p>(foo b|ar baz) -&gt; (foo| bar baz)</p> <p>(foo (b|ar baz)) -&gt; (foo| (bar baz))</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-forward-parallel-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-forward-parallel-sexp &amp;optional ARG)\n</code></pre> <p>Move forward across one balanced expressions at the same depth.</p> <p>If calling \u2018sp-forward-sexp\u2019 at point would result in raising a level up, loop back to the first expression at current level, that is the first child of the enclosing sexp as defined by \u2018sp-get-enclosing-sexp\u2019.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-backward-parallel-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-backward-parallel-sexp &amp;optional ARG)\n</code></pre> <p>Move backward across one balanced expressions at the same depth.</p> <p>If calling \u2018sp-backward-sexp\u2019 at point would result in raising a level up, loop back to the last expression at current level, that is the last child of the enclosing sexp as defined by \u2018sp-get-enclosing-sexp\u2019.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-down-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-down-sexp &amp;optional ARG)\n</code></pre> <p>|foo (bar (baz quux)) -&gt; foo (|bar (baz quux))</p> <p>|foo (bar (baz quux)) -&gt; foo (bar (|baz quux)) ;; 2</p> <p>|foo (bar (baz (quux) blab)) -&gt; foo (bar (baz (|quux) blab)) ;; SPC u</p> <p>(foo (bar baz) |quux) -&gt; (|foo (bar baz) quux)</p> <p>(blab foo |(bar baz) quux) -&gt; (|blab foo (bar baz) quux) ;; SPC u SPC u</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-backward-down-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-backward-down-sexp &amp;optional ARG)\n</code></pre> <p>foo (bar (baz quux))| -&gt; foo (bar (baz quux)|)</p> <p>(bar (baz quux)) foo| -&gt; (bar (baz quux|)) foo ;; 2</p> <p>foo (bar (baz (quux) blab))| -&gt; foo (bar (baz (quux|) blab)) ;; SPC u</p> <p>(foo| (bar baz) quux) -&gt; (foo (bar baz) quux|)</p> <p>(foo (bar baz) |quux blab) -&gt; (foo (bar baz) quux blab|) ;; SPC u SPC u</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-beginning-of-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-beginning-of-sexp &amp;optional ARG)\n</code></pre> <p>(foo (bar baz) quux| (blab glob)) -&gt; (|foo (bar baz) quux (blab glob))</p> <p>(foo (bar baz|) quux (blab glob)) -&gt; (foo (|bar baz) quux (blab glob))</p> <p>(|foo) (bar) (baz quux) -&gt; (foo) (bar) (|baz quux) ;; 3</p> <p>(foo bar) (baz) (quux|) -&gt; (|foo bar) (baz) (quux) ;; -3</p> <p>((foo bar) (baz |quux) blab) -&gt; (|(foo bar) (baz quux) blab) ;; SPC u</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-end-of-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-end-of-sexp &amp;optional ARG)\n</code></pre> <p>(foo |(bar baz) quux (blab glob)) -&gt; (foo (bar baz) quux (blab glob)|)</p> <p>(foo (|bar baz) quux (blab glob)) -&gt; (foo (bar baz|) quux (blab glob))</p> <p>(|foo) (bar) (baz quux) -&gt; (foo) (bar) (baz quux|) ;; 3</p> <p>(foo bar) (baz) (quux|) -&gt; (foo bar|) (baz) (quux) ;; -3</p> <p>((foo |bar) (baz quux) blab) -&gt; ((foo bar) (baz quux) blab|) ;; SPC u</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-beginning-of-next-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-beginning-of-next-sexp &amp;optional ARG)\n</code></pre> <p>(f|oo) (bar) (baz) -&gt; (foo) (|bar) (baz)</p> <p>(f|oo) (bar) (baz) -&gt; (foo) (bar) (|baz) ;; 2</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-beginning-of-previous-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-beginning-of-previous-sexp &amp;optional ARG)\n</code></pre> <p>(foo) (b|ar) (baz) -&gt; (|foo) (bar) (baz)</p> <p>(foo) (bar) (b|az) -&gt; (|foo) (bar) (baz) ;; 2</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-end-of-next-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-end-of-next-sexp &amp;optional ARG)\n</code></pre> <p>(f|oo) (bar) (baz) -&gt; (foo) (bar|) (baz)</p> <p>(f|oo) (bar) (baz) -&gt; (foo) (bar) (baz|) ;; 2</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-end-of-previous-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-end-of-previous-sexp &amp;optional ARG)\n</code></pre> <p>(foo) (b|ar) (baz) -&gt; (foo|) (bar) (baz)</p> <p>(foo) (bar) (b|az) -&gt; (foo|) (bar) (baz) ;; 2</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-up-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-up-sexp &amp;optional ARG INTERACTIVE)\n</code></pre> <p>(foo |(bar baz) quux blab) -&gt; (foo (bar baz) quux blab)|</p> <p>(foo (bar |baz) quux blab) -&gt; (foo (bar baz) quux blab)| ;; 2</p> <p>(foo bar |baz              -&gt; (foo bar baz)| ;; re-indent the expression \u200b   )</p> <p>(foo  |(bar baz)           -&gt; (foo)| (bar baz) ;; close unbalanced expr.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-backward-up-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-backward-up-sexp &amp;optional ARG INTERACTIVE)\n</code></pre> <p>(foo (bar baz) quux| blab) -&gt; |(foo (bar baz) quux blab)</p> <p>(foo (bar |baz) quux blab) -&gt; |(foo (bar baz) quux blab) ;; 2</p> <p>(                  -&gt; |(foo bar baz) \u200b    foo |bar baz)</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp--kill-or-copy-region is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp--kill-or-copy-region BEG END &amp;optional DONT-KILL)\n</code></pre> <p>Kill or copy region between BEG and END according to DONT-KILL. If \u2018evil-mode\u2019 is active, copying a region will also add it to the 0 register. Additionally, if command was prefixed with a register, copy the region to that register.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-kill-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-kill-sexp &amp;optional ARG DONT-KILL)\n</code></pre> <p>(foo |(abc) bar)  -&gt; (foo | bar) ;; nil, defaults to 1</p> <p>(foo (bar) | baz) -&gt; |           ;; 2</p> <p>(foo |(bar) baz)  -&gt; |           ;; SPC u SPC u</p> <p>(1 |2 3 4 5 6)    -&gt; (1|)        ;; SPC u</p> <p>(1 |2 3 4 5 6)    -&gt; (1 | 5 6)   ;; 3</p> <p>(1 2 3 4 5| 6)    -&gt; (1 2 3 | 6) ;; -2</p> <p>(1 2 3 4| 5 6)    -&gt; (|5 6)      ;; - SPC u</p> <p>(1 2 |   )        -&gt; (1 2|)      ;; SPC u, kill useless whitespace</p> <p>(1 2 3 |4 5 6)    -&gt; (|)         ;; 0</p> <p>Note: prefix argument is shown after the example in \"comment\". Assumes \u2018sp-navigate-consider-symbols\u2019 equal to t.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-backward-kill-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-backward-kill-sexp &amp;optional ARG DONT-KILL)\n</code></pre> <p>(foo (abc)| bar)           -&gt; (foo | bar)</p> <p>blab (foo (bar baz) quux)| -&gt; blab |</p> <p>(1 2 3 |4 5 6)             -&gt; (|4 5 6) ;; SPC u</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-copy-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-copy-sexp &amp;optional ARG)\n</code></pre> <p>Copy the following ARG expressions to the kill-ring.</p> <p>This is exactly like calling \u2018sp-kill-sexp\u2019 with second argument t.  All the special prefix arguments work the same way.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-backward-copy-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-backward-copy-sexp &amp;optional ARG)\n</code></pre> <p>Copy the previous ARG expressions to the kill-ring.</p> <p>This is exactly like calling \u2018sp-backward-kill-sexp\u2019 with second argument t.  All the special prefix arguments work the same way.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-clone-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-clone-sexp)\n</code></pre> <p>Clone sexp after or around point.</p> <p>If the form immediately after point is a sexp, clone it below the current one and put the point in front of it.</p> <p>Otherwise get the enclosing sexp and clone it below the current enclosing sexp.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-kill-hybrid-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-kill-hybrid-sexp ARG)\n</code></pre> <p>foo | bar baz               -&gt; foo |               ;; nil</p> <p>foo (bar | baz) quux        -&gt; foo (bar |) quux    ;; nil</p> <p>foo | bar (baz              -&gt; foo |               ;; nil              quux)</p> <p>foo \"bar |baz quux\" quack   -&gt; foo \"bar |\" quack   ;; nil</p> <p>foo (bar        baz) qu|ux (quack      -&gt;   foo | hoo         ;; SPC u SPC u                    zaq) hoo</p> <p>foo | (bar                  -&gt; foo |               ;; C-0          baz)                          baz)</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-kill-whole-line is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-kill-whole-line)\n</code></pre> <p>(progn                    (progn     (some |long sexp))  -&gt;    |)</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-transpose-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-transpose-sexp &amp;optional ARG)\n</code></pre> <p>foo |bar baz     -&gt; bar foo| baz</p> <p>foo |bar baz     -&gt; bar baz foo| ;; 2</p> <p>(foo) |(bar baz) -&gt; (bar baz) (foo)|</p> <p>(foo bar)        -&gt;    (baz quux)   ;; keeps the formatting \u200b    |(baz quux)            |(foo bar)</p> <p>foo bar baz|     -&gt; foo baz| bar ;; -1</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-transpose-hybrid-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-transpose-hybrid-sexp &amp;optional ARG)\n</code></pre> <p>foo bar            baz (quux   |baz (quux   -&gt;         quack)         quack)       foo bar\\n|</p> <p>[(foo) (bar) -&gt; [(baz)   |(baz)]          (foo) (bar)|]</p> <p>foo bar baz  -&gt; quux flux   |quux flux      foo bar baz\\n|</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-push-hybrid-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-push-hybrid-sexp)\n</code></pre> <p>|x = big_function_call(a,    |(a,                          b)      b) = read_user_input()                            -&gt;   (a,                          x = big_function_call(a,    b) = read_user_input()                            b)</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-indent-adjust-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-indent-adjust-sexp)\n</code></pre> <p>Add the hybrid sexp at line into previous sexp.  All forms between the two are also inserted.  Specifically, if the point is on empty line, move the closing delimiter there, so the next typed text will become the last item of the previous sexp.</p> <p>This acts similarly to \u2018sp-add-to-previous-sexp\u2019 but with special handling of empty lines.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-dedent-adjust-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-dedent-adjust-sexp)\n</code></pre> <p>Remove the hybrid sexp at line from previous sexp.  All sibling forms after it are also removed (not deleted, just placed outside of the enclosing list).  Specifically, if the point is on empty line followed by closing delimiter of enclosing list, move the closing delimiter after the last item in the list.</p> <p>This acts similarly to \u2018sp-forward-barf-sexp\u2019 but with special handling of empty lines.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-slurp-hybrid-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-slurp-hybrid-sexp)\n</code></pre> <p>Add hybrid sexp following the current list in it by moving the closing delimiter.</p> <p>This is philosophically similar to \u2018sp-forward-slurp-sexp\u2019 but works better in \"line-based\" languages like C or Java.</p> <p>Because the structure is much looser in these languages, this command currently does not support all the prefix argument triggers that \u2018sp-forward-slurp-sexp\u2019 does.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-forward-slurp-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>It is bound to C-).</p> <pre><code>(sp-forward-slurp-sexp &amp;optional ARG)\n</code></pre> <p>(foo |bar) baz        -&gt; (foo |bar baz)</p> <p>[(foo |bar)] baz      -&gt; [(foo |bar) baz]</p> <p>[(foo |bar) baz]      -&gt; [(foo |bar baz)]</p> <p>((|foo) bar baz quux) -&gt; ((|foo bar baz quux)) ;; with SPC u</p> <p>\"foo| bar\" \"baz quux\" -&gt; \"foo| bar baz quux\"</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-backward-slurp-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>It is bound to C-(.</p> <pre><code>(sp-backward-slurp-sexp &amp;optional ARG)\n</code></pre> <p>foo (bar| baz)        -&gt; (foo bar| baz)</p> <p>foo [(bar| baz)]      -&gt; [foo (bar| baz)]</p> <p>[foo (bar| baz)]      -&gt; [(foo bar| baz)]</p> <p>(foo bar baz (|quux)) -&gt; ((foo bar baz |quux)) ;; with SPC u</p> <p>\"foo bar\" \"baz |quux\" -&gt; \"foo bar baz |quux\"</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-add-to-previous-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-add-to-previous-sexp &amp;optional ARG)\n</code></pre> <p>(foo bar) |baz quux        -&gt; (foo bar |baz) quux</p> <p>(foo bar) |baz quux        -&gt; (foo bar |baz quux) ;; 2</p> <p>(blab (foo bar) |baz quux) -&gt; (blab (foo bar |baz quux)) ;; SPC u</p> <p>(foo bar) (baz |quux)      -&gt; (foo bar (baz |quux)) ;; SPC u SPC u</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-add-to-next-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-add-to-next-sexp &amp;optional ARG)\n</code></pre> <p>foo bar| (baz quux)        -&gt; foo (bar| baz quux)</p> <p>foo bar| (baz quux)        -&gt; (foo bar| baz quux) ;; 2</p> <p>(foo bar |(bar quux) blab) -&gt; ((foo bar |bar quux) blab) ;; SPC u</p> <p>(foo |bar) (baz quux)      -&gt; ((foo |bar) baz quux) ;; SPC u SPC u</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-forward-barf-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>It is bound to M-).</p> <pre><code>(sp-forward-barf-sexp &amp;optional ARG)\n</code></pre> <p>(foo bar| baz)   -&gt; (foo bar|) baz   ;; nil (defaults to 1)</p> <p>(foo| [bar baz]) -&gt; (foo|) [bar baz] ;; 1</p> <p>(1 2 3| 4 5 6)   -&gt; (1 2 3|) 4 5 6   ;; SPC u (or numeric prefix 3)</p> <p>(foo bar| baz)   -&gt; foo (bar| baz)   ;; -1</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-backward-barf-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>It is bound to M-(.</p> <pre><code>(sp-backward-barf-sexp &amp;optional ARG)\n</code></pre> <p>(foo bar| baz) -&gt; foo (bar| baz)</p> <p>([foo bar] |baz) -&gt; [foo bar] (|baz)</p> <p>(1 2 3 |4 5 6) -&gt; 1 2 3 (|4 5 6) ;; SPC u (or 3)</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-skip-forward-to-symbol is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-skip-forward-to-symbol &amp;optional STOP-AT-STRING STOP-AFTER-STRING\nSTOP-INSIDE-STRING)\n</code></pre> <p>foo|   bar -&gt; foo   |bar</p> <p>foo|   [bar baz] -&gt; foo   |[bar baz]</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-skip-backward-to-symbol is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-skip-backward-to-symbol &amp;optional STOP-AT-STRING STOP-AFTER-STRING\nSTOP-INSIDE-STRING)\n</code></pre> <p>foo   |bar -&gt; foo|   bar</p> <p>[bar baz]   |foo -&gt; [bar baz]|   foo</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-forward-symbol is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-forward-symbol &amp;optional ARG)\n</code></pre> <p>|foo bar baz          -&gt; foo| bar baz</p> <p>|foo (bar (baz))      -&gt; foo (bar| (baz)) ;; 2</p> <p>|foo (bar (baz) quux) -&gt; foo (bar (baz) quux|) ;; 4</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-backward-symbol is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-backward-symbol &amp;optional ARG)\n</code></pre> <p>foo bar| baz            -&gt; foo |bar baz</p> <p>((foo bar) baz)|        -&gt; ((foo |bar) baz) ;; 2</p> <p>(quux ((foo) bar) baz)| -&gt; (|quux ((foo) bar) baz) ;; 4</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-rewrap-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-rewrap-sexp PAIR &amp;optional KEEP-OLD)\n</code></pre> <p>(foo |bar baz) -&gt; [foo |bar baz]   ;; [</p> <p>(foo |bar baz) -&gt; [(foo |bar baz)] ;; SPC u [</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-swap-enclosing-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-swap-enclosing-sexp &amp;optional ARG)\n</code></pre> <p>(foo [|bar] baz)              -&gt; [foo (|bar) baz] ;; 1</p> <p>(foo {bar [|baz] quux} quack) -&gt; [foo {bar (|baz) quux} quack] ;; 2</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-change-inner is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <pre><code>(sp-change-inner)\n</code></pre> <p>(f|oo [bar] baz) -&gt; (foo [|] baz)</p> <p>{|\u2019foo\u2019: \u2019bar\u2019}  -&gt; {\u2019|\u2019: \u2019bar\u2019}</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-unwrap-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-unwrap-sexp &amp;optional ARG)</p> <p>|(foo bar baz)     -&gt; |foo bar baz</p> <p>(foo bar| baz)     -&gt; foo bar| baz</p> <p>|(foo) (bar) (baz) -&gt; |(foo) bar (baz) ;; 2</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-backward-unwrap-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-backward-unwrap-sexp &amp;optional ARG)</p> <p>(foo bar baz)|     -&gt; foo bar baz|</p> <p>(foo bar)| (baz)   -&gt; foo bar| (baz)</p> <p>(foo) (bar) (baz)| -&gt; foo (bar) (baz) ;; 3</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-splice-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-splice-sexp &amp;optional ARG)</p> <p>(foo (bar| baz) quux) -&gt; (foo bar| baz quux)</p> <p>(foo |(bar baz) quux) -&gt; foo |(bar baz) quux</p> <p>(foo (bar| baz) quux) -&gt; foo (bar| baz) quux ;; 2</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-splice-sexp-killing-backward is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-splice-sexp-killing-backward &amp;optional ARG)</p> <p>(foo (let ((x 5)) |(sqrt n)) bar)  -&gt; (foo |(sqrt n) bar)</p> <p>\u200b  (when ok|                             |(perform-operation-1) \u200b    (perform-operation-1)            -&gt;  (perform-operation-2) \u200b    (perform-operation-2))</p> <p>\u200b  (save-excursion                    -&gt; |(awesome-stuff-happens) ;; 2 \u200b    (unless (test) \u200b      |(awesome-stuff-happens)))</p> <p>Note that to kill only the content and not the enclosing delimiters you can use SPC u M-x sp-backward-kill-sexp. See \u2018sp-backward-kill-sexp\u2019 for more information.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-splice-sexp-killing-forward is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-splice-sexp-killing-forward &amp;optional ARG)</p> <p>(a (b c| d e) f) -&gt; (a b c| f)</p> <p>(+ (x |y z) w)   -&gt; (+ x| w)</p> <p>Note that to kill only the content and not the enclosing delimiters you can use SPC u M-x sp-kill-sexp. See \u2018sp-kill-sexp\u2019 for more information.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-raise-sexp is an alias for \u2018sp-splice-sexp-killing-around\u2019 in \u2018smartparens.el\u2019.</p> <p>(sp-raise-sexp &amp;optional ARG)</p> <p>(a b |(c d) e f)      -&gt; |(c d)     ;; with arg = 1</p> <p>(a b |c d e f)        -&gt; |c d       ;; with arg = 2</p> <p>(- (car x) |a 3)      -&gt; (car x)|   ;; with arg = -1</p> <p>(foo (bar |baz) quux) -&gt; |(bar baz) ;; with arg = SPC u SPC u</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-convolute-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-convolute-sexp &amp;optional ARG)</p> <p>We want to move the \u2018while\u2019 before the \u2018let\u2019.</p> <p>\u200b  (let ((stuff 1)             (while (we-are-good) \u200b        (other 2))              (let ((stuff 1) \u200b    (while (we-are-good)  -&gt;          (other 2)) \u200b     |(do-thing 1)               |(do-thing 1) \u200b      (do-thing 2)                (do-thing 2) \u200b      (do-thing 3)))              (do-thing 3)))</p> <p>(forward-char (sp-get env |:op-l)) -&gt; (sp-get env (forward-char |:op-l))</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-absorb-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-absorb-sexp &amp;optional ARG)</p> <p>\u200b  (do-stuff 1)         (save-excursion \u200b  (save-excursion  -&gt;   |(do-stuff 1) \u200b   |(do-stuff 2))        (do-stuff 2))</p> <p>foo bar (concat |baz quux) -&gt; (concat |foo bar baz quux) ;; 2</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-emit-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-emit-sexp &amp;optional ARG)</p> <p>\u200b  (save-excursion     \u200b(do-stuff 1) \u200b    (do-stuff 1)      (do-stuff 2) \u200b    (do-stuff 2)  -&gt;  (save-excursion \u200b   |(do-stuff 3))      |(do-stuff 3))</p> <p>\u200b  (while not-done-yet       (execute-only-once) \u200b    (execute-only-once) -&gt;  (while not-done-yet    ;; arg = 2 \u200b   |(execute-in-loop))       |(execute-in-loop))</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-extract-before-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-extract-before-sexp &amp;optional ARG)</p> <p>Move the expression after point before the enclosing balanced expression.</p> <p>The point moves with the extracted expression.</p> <p>With ARG positive N, extract N expressions after point.</p> <p>With ARG negative -N, extract N expressions before point.</p> <p>With ARG being raw prefix argument SPC u, extract all the expressions up until the end of enclosing list.</p> <p>If the raw prefix is negative, this behaves as SPC u \u2018sp-backward-barf-sexp\u2019.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-extract-after-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-extract-after-sexp &amp;optional ARG)</p> <p>Move the expression after point after the enclosing balanced expression.</p> <p>The point moves with the extracted expression.</p> <p>With ARG positive N, extract N expressions after point.</p> <p>With ARG negative -N, extract N expressions before point.</p> <p>With ARG being raw prefix argument SPC u, extract all the expressions up until the end of enclosing list.</p> <p>With ARG being negative raw prefix argument M-- SPC u, extract all the expressions up until the start of enclosing list.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-forward-whitespace is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-forward-whitespace &amp;optional ARG)</p> <p>Skip forward past the whitespace characters. With non-nil ARG return number of characters skipped.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-backward-whitespace is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-backward-whitespace &amp;optional ARG)</p> <p>Skip backward past the whitespace characters. With non-nil ARG return number of characters skipped.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-split-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>It is bound to SPC j s, M-m j s.</p> <p>(sp-split-sexp ARG)</p> <p>(foo bar |baz quux)   -&gt; (foo bar) |(baz quux)</p> <p>\"foo bar |baz quux\"   -&gt; \"foo bar\" |\"baz quux\"</p> <p>([foo |bar baz] quux) -&gt; ([foo] |[bar baz] quux)</p> <p>(foo bar| baz quux) -&gt; (foo) (bar|) (baz) (quux) ;; SPC u</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-join-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-join-sexp &amp;optional ARG)</p> <p>(foo bar) |(baz)                    -&gt; (foo bar |baz)</p> <p>(foo) |(bar) (baz)                  -&gt; (foo |bar baz) ;; 2</p> <p>[foo] [bar] |[baz]                  -&gt; [foo bar |baz] ;; -2</p> <p>(foo bar (baz)| (quux) (blob buzz)) -&gt; (foo bar (baz| quux blob buzz)) ;; SPC u</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-select-next-thing is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-select-next-thing &amp;optional ARG POINT)</p> <p>Set active region over next thing as recognized by \u2018sp-get-thing\u2019.</p> <p>If ARG is positive N, select N expressions forward.</p> <p>If ARG is negative -N, select N expressions backward.</p> <p>If ARG is a raw prefix SPC u select all the things up until the end of current expression.</p> <p>If ARG is a raw prefix SPC u SPC u select the current expression (as if doing \u2018sp-backward-up-sexp\u2019 followed by \u2018sp-select-next-thing\u2019).</p> <p>If ARG is number 0 (zero), select all the things inside the current expression.</p> <p>If POINT is non-nil, it is assumed it\u2019s a point inside the buffer from which the selection extends, either forward or backward, depending on the value of ARG.</p> <p>If the currently active region contains a balanced expression, following invocation of \u2018sp-select-next-thing\u2019 will select the inside of this expression .  Therefore calling this function twice with no active region will select the inside of the next expression.</p> <p>If the point is right in front of the expression any potential prefix is ignored.  For example, \u2019|(foo) would only select (foo) and not include \u2019 in the selection.  If you wish to also select the prefix, you have to move the point backwards.</p> <p>With \u2018sp-navigate-consider-symbols\u2019 symbols and strings are also considered balanced expressions.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-select-previous-thing is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-select-previous-thing &amp;optional ARG POINT)</p> <p>Set active region over ARG previous things as recognized by \u2018sp-get-thing\u2019.</p> <p>If ARG is negative -N, select that many expressions forward.</p> <p>With \u2018sp-navigate-consider-symbols\u2019 symbols and strings are also considered balanced expressions.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-select-next-thing-exchange is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-select-next-thing-exchange &amp;optional ARG POINT)</p> <p>Just like \u2018sp-select-next-thing\u2019 but run \u2018exchange-point-and-mark\u2019 afterwards.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-select-previous-thing-exchange is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-select-previous-thing-exchange &amp;optional ARG POINT)</p> <p>Just like \u2018sp-select-previous-thing\u2019 but run \u2018exchange-point-and-mark\u2019 afterwards.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-mark-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-mark-sexp &amp;optional ARG ALLOW-EXTEND)</p> <p>Set mark ARG balanced expressions from point. The place mark goes is the same place M-x sp-forward-sexp would move to with the same argument. Interactively, if this command is repeated or (in Transient Mark mode) if the mark is active, it marks the next ARG sexps after the ones already marked. This command assumes point is not in a string or comment.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-delete-char is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-delete-char &amp;optional ARG)</p> <p>(quu|x \"zot\") -&gt; (quu| \"zot\")</p> <p>(quux |\"zot\") -&gt; (quux \"|zot\") -&gt; (quux \"|ot\")</p> <p>(foo (|) bar) -&gt; (foo | bar)</p> <p>|(foo bar) -&gt; (|foo bar)</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-backward-delete-char is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-backward-delete-char &amp;optional ARG)</p> <p>(\"zot\" q|uux) -&gt; (\"zot\" |uux)</p> <p>(\"zot\"| quux) -&gt; (\"zot|\" quux) -&gt; (\"zo|\" quux)</p> <p>(foo (|) bar) -&gt; (foo | bar)</p> <p>(foo bar)| -&gt; (foo bar|)</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-kill-symbol is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-kill-symbol &amp;optional ARG WORD)</p> <p>Kill a symbol forward, skipping over any intervening delimiters.</p> <p>With ARG being positive number N, repeat that many times.</p> <p>With ARG being Negative number -N, repeat that many times in backward direction.</p> <p>See \u2018sp-forward-symbol\u2019 for what constitutes a symbol.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-kill-word is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-kill-word &amp;optional ARG)</p> <p>Kill a word forward, skipping over intervening delimiters.</p> <p>With ARG being positive number N, repeat that many times.</p> <p>With ARG being Negative number -N, repeat that many times in backward direction.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-delete-symbol is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-delete-symbol &amp;optional ARG WORD)</p> <p>Delete a symbol forward, skipping over any intervening delimiters.</p> <p>Deleted symbol does not go to the clipboard or kill ring.</p> <p>With ARG being positive number N, repeat that many times.</p> <p>With ARG being Negative number -N, repeat that many times in backward direction.</p> <p>See \u2018sp-forward-symbol\u2019 for what constitutes a symbol.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-delete-word is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-delete-word &amp;optional ARG)</p> <p>Delete a word forward, skipping over intervening delimiters.</p> <p>Deleted word does not go to the clipboard or kill ring.</p> <p>With ARG being positive number N, repeat that many times.</p> <p>With ARG being Negative number -N, repeat that many times in backward direction.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-backward-kill-symbol is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-backward-kill-symbol &amp;optional ARG WORD)</p> <p>Kill a symbol backward, skipping over any intervening delimiters.</p> <p>With ARG being positive number N, repeat that many times.</p> <p>With ARG being Negative number -N, repeat that many times in forward direction.</p> <p>See \u2018sp-backward-symbol\u2019 for what constitutes a symbol.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-backward-kill-word is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-backward-kill-word &amp;optional ARG)</p> <p>Kill a word backward, skipping over intervening delimiters.</p> <p>With ARG being positive number N, repeat that many times.</p> <p>With ARG being Negative number -N, repeat that many times in backward direction.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-backward-delete-symbol is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-backward-delete-symbol &amp;optional ARG WORD)</p> <p>Delete a symbol backward, skipping over any intervening delimiters.</p> <p>Deleted symbol does not go to the clipboard or kill ring.</p> <p>With ARG being positive number N, repeat that many times.</p> <p>With ARG being Negative number -N, repeat that many times in forward direction.</p> <p>See \u2018sp-backward-symbol\u2019 for what constitutes a symbol.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-backward-delete-word is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-backward-delete-word &amp;optional ARG)</p> <p>Delete a word backward, skipping over intervening delimiters.</p> <p>Deleted word does not go to the clipboard or kill ring.</p> <p>With ARG being positive number N, repeat that many times.</p> <p>With ARG being Negative number -N, repeat that many times in backward direction.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-delete-region is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-delete-region BEG END)</p> <p>Delete the text between point and mark, like \u2018delete-region\u2019.</p> <p>BEG and END are the bounds of region to be deleted.</p> <p>If that text is unbalanced, signal an error instead. With a prefix argument, skip the balance check.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-kill-region is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-kill-region BEG END)</p> <p>Kill the text between point and mark, like \u2018kill-region\u2019.</p> <p>BEG and END are the bounds of region to be killed.</p> <p>If that text is unbalanced, signal an error instead. With a prefix argument, skip the balance check.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-indent-defun is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-indent-defun &amp;optional ARG)</p> <p>Re-indent the current defun.</p> <p>If point is inside a string or comment, fill the current paragraph instead, and with ARG, justify as well.</p> <p>Otherwise, re-indent the current defun, and adjust the position of the point.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-region-ok-p is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-region-ok-p START END)</p> <p>Test if region between START and END is balanced.</p> <p>A balanced region is one where all opening delimiters are matched by closing delimiters.</p> <p>This function does not check that the delimiters are correctly ordered, that is [(]) is correct even though it is not logically properly balanced.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-newline is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>It is bound to SPC j n, M-m j n.</p> <p>(sp-newline)</p> <p>Insert a newline and indent it.</p> <p>This is like \u2018newline-and-indent\u2019, but it not only indents the line that the point is on but also the S-expression following the point, if there is one.</p> <p>If in a string, just insert a literal newline.</p> <p>If in a comment and if followed by invalid structure, call \u2018indent-new-comment-line\u2019 to keep the invalid structure in a comment.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-comment is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-comment)</p> <p>Insert the comment character and adjust hanging sexps such   that it doesn\u2019t break structure.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-show-enclosing-pair is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-show-enclosing-pair)</p> <p>Highlight the enclosing pair around point.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p> <p>sp-highlight-current-sexp is an interactive compiled Lisp function in \u2018smartparens.el\u2019.</p> <p>(sp-highlight-current-sexp ARG)</p> <p>Highlight the expression returned by the next command, preserving point position.</p> <p>\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015\u2015</p>"},{"location":"reference/structural-editing/smartparens-cheatsheet/#hintanimated-cheatsheet","title":"Hint::Animated cheatsheet","text":"<p>Animated Smartparens cheatsheet - update to use Spacemacs keybindings</p>"},{"location":"reference/structural-editing/smartparens-cheatsheet/#todobreak-out-common-commands-into-their-own-sections-with-examples","title":"TODO::Break out common commands into their own sections with examples","text":""},{"location":"reference/vim/getting-comfortable/","title":"Vim - Getting Comfortable","text":"<p>Getting comfortable with the Vim approach to text manipulation can take a little while.  The quickest approach is to force yourself to use Vim and stick at it until you finally go faster than you were before you started.  This can take a few days of slowness, but it is worth it, so find a few days when you are not as busy and have time to practice.</p> <p>Start with the built in Emacs EVil Tutor - <code>SPC h T</code></p>"},{"location":"reference/vim/getting-comfortable/#helpful-websites-for-vim-commands-and-keybindings","title":"Helpful websites for Vim commands and keybindings","text":"<ul> <li>https://vim-adventures.com/</li> <li>http://www.openvim.com/</li> <li>https://www.shortcutfoo.com/</li> <li>http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/</li> <li>http://yannesposito.com/Scratch/en/blog/Learn-Vim-Progressively/</li> <li>http://www.vimgenius.com/</li> <li>https://www.labnol.org/internet/learning-vim-for-beginners/28820/</li> <li>http://codecondo.com/vim-commands/</li> <li>https://scotch.io/tutorials/getting-started-with-vim-an-interactive-guide</li> </ul>"},{"location":"reference/vim/getting-comfortable/#basic-movement","title":"Basic Movement","text":"<p>Keys in Evil Normal mode for moving the cursor around the buffer.</p> Keybinding Action <code>w</code> move to start of next word <code>b</code> move to start of previous word <code>e</code> move to end of current word <code>j</code> move one line down <code>k</code> move one line up <code>l</code> move one character right <code>h</code> move one character left <code>gg</code> jump to top of buffer <code>G</code> jump to bottom of buffer <code>$</code> jump to end of line <code>^</code> or <code>0</code> jump to start of line C-v page down buffer (visual block selection in Spacemacs) <code>C-u</code> page up buffer <code>f</code> jump to next instance of  <p></p>"},{"location":"reference/vim/getting-comfortable/#hint","title":"Hint::","text":"<ul> <li>Use avy for jumping anywhere in your buffers Avy commands are in the jump/join/split menu - <code>SPC j</code></li> </ul>"},{"location":"reference/vim/getting-comfortable/#hint_1","title":"Hint::","text":"<p><code>$</code> and  <code>^</code> for jumping to end and beginning of line is the same syntax as regex</p>"},{"location":"reference/vim/getting-comfortable/#insert","title":"Insert","text":"<p>Return to Normal mode using <code>ESC</code> or <code>fd</code> pressed in rapid succession</p> Keybinding Action <code>i</code> Enter insert mode <code>o</code> Move to line below &gt; Insert mode <code>O</code> Move to line above &gt; Insert mode"},{"location":"reference/vim/getting-comfortable/#delete-text","title":"Delete text","text":"Keybindings Actions <code>x</code> Cut current character <code>dw</code> delete current word <code>dd</code> delete current line <code>d$</code> or <code>dD</code> delete from current position to end of line <code>di\"</code> delete inside \"\" <code>diw</code> delete inside current word <code>dt\"</code> delete to next \" (can delete to any character) <code>dT\"</code> delete to previous \" (can delete to any character) <code>dit</code> [html-mode] delete contents of an html tag"},{"location":"reference/vim/getting-comfortable/#manipulate-text","title":"Manipulate text","text":"Keybinding Action <code>C-j</code> Split line at cursor <code>S-j</code> Join next line to end of current line <code>dd</code> or <code>C-k</code> Delete current line <code>M-;</code> Insert comment characters (based on buffer mode)"},{"location":"reference/vim/getting-comfortable/#visual-mode-selecting-text","title":"Visual Mode - selecting text","text":"<p>Enter visual mode using <code>v</code> or <code>C-SPC</code></p> <p><code>S-v</code> - visual mode line by line <code>C-v</code> - visual mode in region</p> Keybinding Action <code>y</code> copy (yank) on to kill ring"},{"location":"reference/vim/getting-comfortable/#edit-multiple-lines-visual-mode","title":"edit-multiple-lines (visual mode)","text":"<p>TODO: refactor</p> <pre><code>v\nshift-i\ntype your comment\nEnter (puts the comment at the start of the line)\n\nmulti-highlight (visual mode)\nv\n/\nname of text you want to highlight\nEnter\nn\n</code></pre>"},{"location":"reference/vim/getting-comfortable/#replace","title":"Replace","text":"<p>The following allow you to replace text</p> Keybinding Action <code>r</code> replace character <code>~</code> Uppercase current character <code>cw</code> change current word <code>cc</code> change line <p>C-a i/d - increasing/decreasing a number</p>"},{"location":"reference/vim/getting-comfortable/#vim-commands","title":"Vim commands","text":"<p>:explore :registers - shows the recent actions that you have done</p>"},{"location":"reference/vim/key-bindings/","title":"Evil Key Bindings Reference","text":"<p>Key bindings scrapped from the Evil and Evil-collection repositories</p>"},{"location":"reference/vim/key-bindings/#normal-mode-magic","title":"Normal mode magic","text":"<p><code>#</code> toggle case of character under point / visually selected region</p> <p><code>r</code> replace current character or selected region with next character</p> <p>Tip: redact a password or sensitive text by selecting all the characters and using <code>r*</code></p>"},{"location":"reference/vim/key-bindings/#into-insert-mode","title":"Into insert mode","text":"<p><code>a</code> append - insert mode after current point <code>i</code> insert - insert mode before current point</p> <p><code>o</code> open new line - insert mode on new line after current <code>O</code> open new line - insert mode on new line after current</p>"},{"location":"reference/vim/key-bindings/#visual-select","title":"Visual Select","text":"<p><code>v</code> - enter visual select mode - hjkl to select <code>vb</code> - select backward by word</p>"},{"location":"reference/vim/key-bindings/#moving-around","title":"Moving around","text":"<p><code>5l</code> <code>7h</code> for rough jumping along a line</p> <p><code>f</code> / <code>F</code> jump forward/backward to next character on current line. e.g <code>f,</code> jumps to next comma</p> <p>Word boundaries Jumping word boundaries wraps to next line</p> <p><code>w</code> start of next word <code>b</code> back to start of current word (or previous word if at start of current word) <code>e</code> end of current word (or end of next word, if at end of current word)</p>"},{"location":"reference/vim/key-bindings/#evil","title":"Evil","text":""},{"location":"reference/vim/key-bindings/#evil-keybindings-el","title":"Evil-keybindings-el","text":""},{"location":"reference/vim/key-bindings/#dird","title":"dird","text":"<p>Normal mode key bindings</p> <p>\"J\" 'dired-goto-file                   ; \"j\" \"K\" 'dired-do-kill-lines               ; \"k\" \"r\" 'dired-do-redisplay                ; \"l\"</p> <p>;; \":d\", \":v\", \":s\", \":e\" \";\" (lookup-key dired-mode-map \":\"))))</p> <p>(evil-add-hjkl-bindings Info-mode-map 'motion   \"0\" 'evil-beginning-of-line   (kbd \"\\M-h\") 'Info-help   ; \"h\"   \"\\C-t\" 'Info-history-back ; \"l\"   \"\\C-o\" 'Info-history-back   \" \" 'Info-scroll-up   \"\\C-]\" 'Info-follow-nearest-node   (kbd \"DEL\") 'Info-scroll-down)</p> <p>(evil-add-hjkl-bindings speedbar-key-map 'motion   \"h\" 'backward-char   \"j\" 'speedbar-next   \"k\" 'speedbar-prev   \"l\" 'forward-char   \"i\" 'speedbar-item-info   \"r\" 'speedbar-refresh   \"u\" 'speedbar-up-directory   \"o\" 'speedbar-toggle-line-expansion   (kbd \"RET\") 'speedbar-edit-line)</p> <p>(eval-after-load 'ibuffer   '(progn      (defvar ibuffer-mode-map)      (evil-make-overriding-map ibuffer-mode-map 'normal)      (evil-define-key 'normal ibuffer-mode-map        \"j\" 'evil-next-line        \"k\" 'evil-previous-line        \"RET\" 'ibuffer-visit-buffer)))</p> <p>(eval-after-load 'ag   '(progn      (defvar ag-mode-map)      (add-to-list 'evil-motion-state-modes 'ag-mode)      (evil-add-hjkl-bindings ag-mode-map 'motion)))</p> <p>;;; ELP</p> <p>(eval-after-load 'elp   '(defadvice elp-results (after evil activate)      (evil-motion-state)))</p>"},{"location":"snippets/","title":"Snippets - Common code templates","text":"<p>Snippets are names that expand to code or documentation, to minimise typing commonly used code pattern and can serve as a reminder of common Clojure forms.</p> <p></p> <p>The content of a snippet can be anything, from a simple piece of text or a more involved code structure with placeholders for tab stops. Practicalli also uses snippets for rich code blocks, documentation and helping organise code in a namespace.</p> <p>Snippets can include code which is evaluated, allowing the snippet to tap into all the features of Emacs (Yasnippets) or Clojure (Clojure LSP).</p>"},{"location":"snippets/#clojure-lsp-snippets","title":"Clojure LSP snippets","text":"<p>Clojure LSP snippets are editor agnostic although the editor needs to provide a Clojure LSP client. Snippets support tab stops, placeholders with default values and can pull in a following form (<code>$current-form</code>).</p> <p>Built-in snippets appear in the completion menu when typing.</p> <p>Custom snippets are defined in the Clojure LSP configuration using the <code>:additional-snipets</code> key.</p> <p>practicalli/clojure-lsp-config snippets</p>"},{"location":"snippets/#emacs-yasnippets","title":"Emacs Yasnippets","text":"<p>YASnippets uses plain text templates and so are very easy to learn and write.  Snippets are specific to an Emacs major mode.  They include tab stops, placoders with default values and markers to ensure correct indentation.</p> <p>Meta / expands the text under the point by any of the methods registered with hippie-expand. Yasnippets is one of the methods registered.</p> <p>Tab will jump through the expanded snippet if it contains markers.</p> <p>For example, <code>defn</code> is a snippet that expands into the full function definition form, tab stops jump the cursor through the snippet to add specific values to quickly complete the specifics of that function definition.</p> <p>Yasnippets can also execute Elisp code, opening up a large number of Emacs functions to use within a snippet.</p> <p>Spacemacs automatically includes snippets for many programming languages and text formats, including snippets for Clojure.</p>"},{"location":"snippets/clojure-lsp/","title":"Clojure LSP Snippets","text":"<p>Tab on the name of the snippet to expand. Tab to jump to additional tab stops.</p> <p>Clojure LSP snippets appear in the completion popup, in the same way as Clojure functions and other symbols.</p> <p></p> <p>Clojure LSP snippets are editor agnostic, usable in any editor that supports clojure-lsp, making them more useful that editor specific snippets.</p> <p>Clojure LSP snippets are defined using the EDN syntax and supports tab stops, placeholders with default values and can pull in a following form (<code>$current-form</code>).</p> <p>Built-in snippets are defined in the <code>clojure-lsp.feature.completion-snippet</code> namespace.</p> <p>practicalli/clojure-lsp-config snippets</p>"},{"location":"snippets/clojure-lsp/#checking-available-snippets","title":"Checking available snippets","text":"<p><code>lsp-clojure-server-info</code> function prints the Clojure LSP configuration to the message buffer,</p> <p>The <code>:additional-snippets</code> top level key contains the user configuration.</p> clojure-lsp/config.edn<pre><code>:additional-snippets\n[{:name \"def-docstring\",\n  :detail \"def with docstring\",\n  :snippet \"(def \\\"$1\\\" $0)\"}\n {:name \"deftest\",\n  :detail \"deftest clojure.test\",\n  :snippet\n  \"(deftest ${1:name}-test\\n (testing \\\"${2:Context of the test assertions}\\\"\\n (is (= ${3:assertion-values}))$4))\\n $0\"}]\n</code></pre> <p><code>:project-settings</code> contain snippets defined in the project <code>.lsp/config.edn</code> file</p> <pre><code>:project-settings\n{:additional-snippets\n [{:name \"def-docstring\",\n   :detail \"def with docstring\",\n   :snippet \"(def \\\"$1\\\" $0)\"}]}\n</code></pre>"},{"location":"snippets/clojure-lsp/custom-snippets/","title":"Custom snippets for Clojure LSP","text":"<p>Custom snippets are defined in the Clojure LSP EDN configuration using the <code>:additional-snipets</code> key.  The snippet body uses the same tab stop and placeholder syntax as Yasnipets, although the body is contained within a string.</p> <p>Built-in snippets can include Clojure code for generating the text of the snippet when expanded.  Custom snippets do not currently support evaluation of code in the snippet.</p> <p>Clojure LSP Configuration locations</p> <p>Project specific configuration resides in <code>.lsp/config.edn</code></p> <p>User level configuration is either <code>$XDG_CONFIG_HOME/clojure-lsp/config.edn</code> or <code>$HOME/.clojure-lsp/config</code></p>"},{"location":"snippets/clojure-lsp/custom-snippets/#snippet-definition","title":"Snippet definition","text":"<p>The <code>:additional-snippets</code> key is associated with a vector or hash-maps, <code>[{}{},,,]</code> with each hash-map defining a snippet using the keys:</p> <p><code>:name</code> - name of the snippet, typed into the editor for completion</p> <p><code>:detail</code> - a meaningful description of the snippet</p> <p><code>:snippet</code> - the definition of the snippet, with tab stops and current-form syntax</p> <p>The <code>:snippet</code> can be any text, ideally with syntax that is correct for the particular language</p>"},{"location":"snippets/clojure-lsp/custom-snippets/#snippet-tab-stops","title":"Snippet Tab Stops","text":"<p>Include <code>$</code> with a number, e.g. <code>$1</code>,<code>$2</code>,<code>$3</code>,  to include tab stops in the snippet.  Once the snippet code has been generated, <code>TAB</code> key jumps through the tab stops in sequence, allowing customisation of a generic snippet.</p> <p><code>$0</code> marks the final position of the cursor, after which <code>TAB</code> has no more positions in the snippet to jump to.</p>"},{"location":"snippets/clojure-lsp/custom-snippets/#snippet-current-form","title":"Snippet current-form","text":"<p>When a Clojure LSP snipped includes <code>$current-form</code> then typing a snippet name in front of an existing Clojure form includes that form in the generated code.</p> <pre><code>{:additional-snippets [{:name \"wrap-let-sexpr\"\n                        :detail \"Wrap current sexpr in let\"\n                        :snippet \"(let [$1 $current-form] $0)\"}]}\n</code></pre> <p>Limited scope with current-form</p> <p>A Snippet including <code>$current-form</code> is only active when typed in front of an existing expression.  A snippet is not recognised when typed at the top level.</p>"},{"location":"snippets/clojure-lsp/custom-snippets/#placeholders","title":"Placeholders","text":"<p>Tab Stops can also include default values or text used as hint on what each tab stop value is for.  These are referred to as placeholders.</p> <p><code>${1:default-value}</code> is the form of a placeholder for tab stop 1.  When the cursor tabs to tab stop 1, the default-value text is highlighted and replaces as soon as characters are typed.</p> <p>Placeholder text is not replaced for <code>$0</code> tab-stop, as the snippet interaction is effectively over at this point.</p> <p>The <code>deftest</code> custom snippet shows examples of placeholders for three tab stops.</p> <pre><code>{:name \"deftest\"\n :detail \"deftest clojure.test\"\n :snippet\n \"(deftest ${1:name}-test\n    (testing \\\"${2:Context of the test assertions}\\\"\n      (is (= ${3:assertion-values}))$4))\n  $0\"}\n</code></pre> <p>Escape string quotes in snippet body</p> <p>Use \\ character before the open and closing \" character of any string that is part of the snippet body.  For example, doc-strings in function definitions or the string in <code>testing</code> function.</p>"},{"location":"snippets/clojure-lsp/custom-snippets/#clojure-code-driven-snippet-built-in-snippets-only","title":"Clojure code driven snippet - built-in snippets only","text":"<p>The built-in <code>defn</code> snippet uses Clojure code to help generate the snippet.</p> <p><code>%s</code> is a substitution point within a snippet, used by the standard Clojure <code>format</code> command, used to included either <code>defn ^:private</code> or <code>defn-</code>, depending on the value returned from the <code>if</code> expression.</p> <p><code>:use-metadata-for-privacy?</code> is a key from the Clojure LSP configuration</p> <pre><code> {:label \"defn-\"\n  :detail \"Create private function\"\n  :insert-text (format \"(defn%s ${1:name} [$2]\\n  ${0:body})\"\n                       (if (:use-metadata-for-privacy? settings)\n                         \" ^:private\"\n                         \"-\"))}\n</code></pre> <p>The syntax for built-in snippets is slightly different that the <code>:additional-syntax</code> form.  The internal form uses <code>:label</code> for <code>:name</code> and <code>:insert-text</code> for <code>:snippet</code>.</p> <p>Clojure Code for Built-in snippets only</p> <p>Clojure code only works for built-in snippets and not for <code>:additional-snippets</code>.</p> <p>Clojure LSP is compiled by Graal to a native binary, including the built-in snippets.  To include Clojure code in a snippet then consider submitting a pull request to the Clojure LSP project to add a built-in snippet.</p>"},{"location":"snippets/clojure-lsp/practicalli-snippets/","title":"Practicalli Snippets for Clojure LSP","text":"<p>Custom snippets created by Practicalli</p> <p>Use practicalli/clojure-lsp-config as the user level configuration or copy the desired snippets to <code>:additional-snippets</code> key in the Clojure LSP configuration (project <code>.lsp/config.edn</code> or user level configuration).</p> <p>Snippets are defined as a vector of hash-maps</p> <pre><code>{:additional-snippets [{} {} {} ,,,]}\n</code></pre>"},{"location":"snippets/clojure-lsp/practicalli-snippets/#documentation","title":"Documentation","text":"<p>A comment heading to describe the purpose and important information about the current namesapce.</p> <pre><code>  {:name \"comment-heading\"\n   :detail \"Comment Header\"\n   :snippet\n   \";; ---------------------------------------------------------\n    ;; ${1:Heading summary title}\n    ;;\n    ;; ${2:Brief description}\\n;; ---------------------------------------------------------\\n\\n$0\"}\n</code></pre> <p>A comment separator for marking logical sections within a namespace, useful for navigating code and identifying opportunities to refactor a namespace into multiple namespaces.</p> <pre><code>  {:name \"comment-separator\"\n   :detail \"Comment Separator\"\n   :snippet\n   \";; ---------------------------------------------------------\\n;; ${1:Section title}\\n\\n$0\"}\n</code></pre> <p>A comment section with start and end titles for marking logical sections within a namespace, again for navigation and identifying opportunities to refactor a namespace.</p> <pre><code>  {:name \"comment-section\"\n   :detail \"Comment Section\"\n   :snippet\n   \";; ---------------------------------------------------------\\n;; ${1:Section title}\\n\\n$0\\n\\n\n    ;; End of $1\\n;; ---------------------------------------------------------\\n\\n\"}\n</code></pre>"},{"location":"snippets/clojure-lsp/practicalli-snippets/#repl-driven-development","title":"REPL Driven Development","text":"<p>A rich comment block typically used to hold function calls to show how to make use of the important aspects of the current namespace.  For example, calls to <code>start</code>, <code>restart</code>, <code>stop</code> functions in a namespace that defines the service life-cycle.</p> <p>This provides a live executable guide to using the namespace, without being called if the whole namespace is evaluated.</p> <p>A commented expression is placed before the closing paren to ensure that closing paren is not folded up into the previous line.  This makes it easier to add further code to the rich comment block.</p> <pre><code>  {:name \"rich-comment\"\n   :detail \"Create rich comment\"\n   :snippet\n   \"(comment\n      $0\n  #_()) ;; End of rich comment\"}\n</code></pre> <p>A modified rich comment block with clj-kondo configuration to suppress warnings for duplicate function definition names, supporting alternative function implementations as part of a REPL driven development workflow.</p> <pre><code>  {:name \"rich-comment-rdd\"\n   :detail \"Create comment block\"\n   :snippet\n   \"#_{:clj-kondo/ignore [:redefined-var]}\n   (comment\n     $0\n   #_()) ;; End of rich comment\"}\n</code></pre> <p>Wrap an existing form in a rich comment</p> <pre><code>  {:name \"wrap-rich-comment\"\n   :detail \"Wrap current expression with rich comment form\"\n   :snippet\n   \"(comment\n      $current-form\n      $0\n   #_()) ;; End of rich comment\"}\n</code></pre> <p>Comment an existing form with the Clojure Comment macro, <code>_#</code></p> <pre><code>  {:name \"wrap-reader-comment\"\n   :detail \"Wrap current expression with Comment Reader macro\"\n   :snippet \"#_$current-form\"}\n</code></pre>"},{"location":"snippets/clojure-lsp/practicalli-snippets/#hot-loading-library-dependencies","title":"Hot loading library dependencies","text":"<p>Clojure CLI projects can hotload library dependencies into a running Clojure REPL using the tools.deps library.  This requires starting a REPL with the <code>clojure.tools.deps.alpha</code> library as a dependency which can be done by including the <code>:lib/hotload</code> alias from practicalli/clojure-deps-edn.  Note this library is alpha and the API could change in future.</p> <p>Create a rich comment block that requires the <code>clojure.tools.deps.alpha</code> namespace and an <code>add-libs</code> expression to hotload one or more libraries in a hash-map.  Tab stops with placeholders are included for adding the first library to hotload.</p> <pre><code>  {:name \"rich-comment-hotload\"\n   :detail \"Rich comment library hotload\"\n   :snippet\n   \"#_{:clj-kondo/ignore [:redefined-var]}\n    (comment\n      ;; Add-lib library for hot-loading\n      (require '[clojure.tools.deps.alpha.repl :refer [add-libs]])\n      (add-libs '{${1:domain/library-name} {:mvn/version \\\"${2:1.0.0}\\\"}$3})\n      $0\n    #_()) ;; End of rich comment block\"}\n</code></pre>"},{"location":"snippets/clojure-lsp/practicalli-snippets/#core-functions","title":"Core functions","text":"<p>Create a public var using a <code>def</code> form with a doc-string, with placeholders for name and value.</p> <pre><code>  {:name \"def\"\n   :detail \"def with docstring\"\n   :snippet \"(def ${1:name}\\n  \\\"${2:docstring}\\\"\\n  $0)\"}\n</code></pre> <p>Create a private var using a <code>def</code> form with <code>^:private</code> meta data and a doc-string, with placeholders for name and value.</p> <pre><code>  {:name \"def-\"\n   :detail \"def private\"\n   :snippet \"(def ^:private ${1:name}\\n  \\\"${2:doc-string}\\\"\\n $0)\"}\n</code></pre> <p>A <code>defn</code> form with name, doc-string and args tab-stops</p> <pre><code>  {:name \"defn\"\n   :detail \"Create public function\"\n   :snippet \"(defn ${1:name}\\n  \\\"${2:docstring}\\\"\\n   [${3:args}]\\n  $0)\"}\n</code></pre> <p>A <code>defn</code> form with private metatdata. Including name, doc-string and args tab-stops</p> <pre><code>  {:name \"defn-\"\n   :detail \"Create public function\"\n   :snippet \"(defn ^:private ${1:name}\\n  \\\"${2:docstring}\\\"\\n   [${3:args}]\\n  $0)\"}\n</code></pre> <p>A namespace form with name, doc-string and require tab-stop.</p> <pre><code>  {:name \"ns\"\n   :detail \"Create ns\"\n   :snippet \"(ns ${1:name}\\n  \\\"${2:docstring}\\\"\\n  ${3:require})\"}\n</code></pre>"},{"location":"snippets/clojure-lsp/practicalli-snippets/#clojure-cli-aliases-and-library-dependencies","title":"Clojure CLI aliases and library dependencies","text":"<p>Add Clojure CLI alias to <code>deps.edn</code>, with an <code>:extra-paths</code> and <code>:extra-deps</code> section</p> <pre><code>  {:name \"deps-alias\"\n   :detail \"deps.edn alias with extra path &amp; deps\"\n   :snippet\n   \":${1:category/name}\n    {:extra-paths [\\\"${2:path}\\\"]\n     :extra-deps {${3:deps-maven or deps-git}}}$0\"}\n</code></pre> <p>Add a Maven style dependency to a Clojure CLI <code>deps.edn</code> project.</p> <pre><code>  {:name \"deps-maven\"\n   :detail \"deps.edn Maven dependency\"\n   :snippet\n   \"${1:domain/library-name} {:mvn/version \\\"${2:1.0.0}\\\"}$0\"}\n</code></pre> <p>Add a dependency from a Git repository, where the library is named after the remote Git repository, i.e io.github.user|org/library-name for the GitHub repository https://github.com/user|org/library-name.</p> <p>The <code>:git/sha</code> defines a specific commit to use for the dependency.</p> <pre><code>  {:name \"deps-git\"\n   :detail \"deps.edn Git dependency\"\n   :snippet\n   \"${1:domain/library-name}\n       {:git/sha \\\"${2:git-sha-value}\\\"}$0\"}\n</code></pre> <p>Additionally a Git tag can be specified, enabling the use of the short SHA value for <code>:git/sha</code> (short sha is the first 7 characters of the 40 character SHA-1 value).</p> <p>A Git client can obtain the short form of a SHA from a Git repository</p> <pre><code>git rev-parse --short 1e872b59013425b7c404a91d16119e8452b983f2\n</code></pre> <pre><code>  {:name \"deps-git-tag\"\n   :detail \"Git dependency\"\n   :snippet\n   \"${1:domain/library-name}\n      {:git/tag \\\"${2:git-tag-value}\\\"\n       :git/sha \\\"${3:git-sha-value}\\\"}$0\"}\n</code></pre> <p>If a library is not named after the domain of the Git repository, the URL of the Git repository must be specified using the <code>:git/url</code> key.</p> <pre><code>  {:name \"deps-git-url\"\n   :detail \"Git URL dependency\"\n   :snippet\n   \"${1:domain/library-name}\n      {:git/url \\\"https://github.com/$1\\\"\n       :git/sha \\\"${2:git-sha-value}\\\"}$0\"}\n</code></pre> <p>Add a library dependency that is a local Clojure project.</p> <pre><code>  {:name \"deps-local\"\n   :detail \"deps.edn Maven dependency\"\n   :snippet\n   \"${1:domain/library-name} {:local/root \\\"${2:/path/to/project/root}\\\"}$0\"}\n</code></pre>"},{"location":"snippets/clojure-lsp/practicalli-snippets/#require-library-dependencies","title":"Require Library Dependencies","text":"<p>Require a library when using REPL driven development in a rich comment block, adding a <code>(require ,,,)</code> form when evaluating the use of a library without forcing it to be loaded when loading the namespace.</p> <pre><code>  {:name \"require-rdd\"\n   :detail \"require for rich comment experiments\"\n   :snippet \"(require '[${1:namespace} :as ${2:alias}]$3)$0\"}\n</code></pre> <p>A basic <code>:require</code> expression for an <code>ns</code> form.</p> <pre><code>  {:name \"require\"\n   :detail \"ns require\"\n   :snippet \"(:require [${1:namespace}])$0\"}\n</code></pre> <p>A <code>:require</code> expression for an <code>ns</code> form, including a <code>:as</code> directive to define an alias for the required namespace.</p> <pre><code>  {:name \"require-as\"\n   :detail \"ns require with :as alias\"\n   :snippet \"(:require [${1:namespace} :as ${2:alias}]$3)$0\"}\n</code></pre> <p>A <code>:require</code> expression for an <code>ns</code> form, including a <code>:refer</code> directive to include specific function definitions and vars by name.</p> <pre><code>  {:name \"require-refer\"\n   :detail \"ns require with :refer\"\n   :snippet \"(:require [${1:namespace} :refer [$2]]$3)$0\"}\n</code></pre> <p>It is idiomatic to use require with refer to pull in specific functions and vars from another namespace.  The <code>use</code> function is not recommended as it can easily pull more transitive dependencies into the current namespace, causing unexpected results</p> <pre><code>  {:name \"use\"\n   :detail \"require refer preferred over use\"\n   :snippet \"(:require [${1:namespace} :refer [$2]])$0\"}\n</code></pre>"},{"location":"snippets/clojure-lsp/practicalli-snippets/#clojuretest-snippets","title":"Clojure.test snippets","text":"<p>When writing a <code>deftest</code>, a new assertion written may be better in a new group.  The <code>testing</code> snippet will create a new <code>testing</code> form and pull in the following assertion.</p> <pre><code>{:name \"deftest\"\n :detail \"deftest clojure.test\"\n :snippet\n \"(deftest ${1:name}-test\n    (testing \\\"${2:Context of the test assertions}\\\"\n      (is (= ${3:assertion-values}))$4))\n  $0\"}\n</code></pre> <p>Create a new assertion group using the <code>clojure.test/testing</code> form.</p> <p>Using <code>testing</code> before an assertion form pull that assertion into the group</p> <pre><code>  {:name \"testing\"\n   :detail \"testing clojure.test\"\n   :snippet \"(testing \\\"${1:description-of-assertion-group}\\\"\\n $0)\"}\n</code></pre> <p>Define an <code>is</code> assertion for a <code>deftest</code></p> <pre><code>  {:name \"is\"\n   :detail \"assertion for clojure.test\"\n   :snippet \"(is (= ${1:function call} ${2:expected result}))$0\"}\n</code></pre>"},{"location":"snippets/yasnippets/","title":"Index","text":""},{"location":"snippets/yasnippets/#yasnippets","title":"Yasnippets","text":"<p>YASnippets uses plain text templates and so are very easy to learn and write.  Snippets are specific to an Emacs major mode.  They include tab stops, placoders with default values and markers to ensure correct indentation.</p> <p>Yasnippets can also execute Elisp code, opening up a large number of Emacs functions to use within a snippet.</p> <p>Spacemacs automatically includes snippets for many programming languages and text formats, including snippets for Clojure.</p> <p>Take a look at how to write your own snippets and the custom snippets created by Practicalli</p>"},{"location":"snippets/yasnippets/#configure-yasnippet","title":"Configure yasnippet","text":"<p>The auto-completion layer adds yasnippet and the official snippet collection, yasnippet-snippets.</p> <p>Add <code>auto-completion</code> to the <code>dotspacemacs-configuration-layers</code> list in <code>.spacemacs</code></p> <p>The clojure layer providing additional snippet templates from the clojure-snippets package.</p> <p>!!! Hint::practicalli/spacemacs.d includes auto-completion configuration</p>"},{"location":"snippets/yasnippets/#snippets-in-auto-completion-popups","title":"Snippets in Auto-completion popups","text":"<p>Snippets can be included in the auto-complete pop-up menu.</p> <p></p> <p>Tab to navigate through the list of menu items.</p> <p>Enter to select the snippet and add the template to the buffer.</p> <p>Add the layer variable <code>auto-completion-enable-snippets-in-popup t</code> to the <code>auto-completion</code> layer in <code>.spacemacs</code>.</p> <p>Practicalli also recommends adding <code>auto-completion-enable-sort-by-usage t</code> to show the most commonly used snippets at the top of the auto-completion pop-up menu.</p> <pre><code>(auto-completion :variables\n                 auto-completion-enable-help-tooltip t\n                 auto-completion-enable-snippets-in-popup t\n                 auto-completion-enable-sort-by-usage t)\n</code></pre>"},{"location":"snippets/yasnippets/#snippet-save-locations","title":"Snippet save locations","text":"<p>Snippets are saved in <code>~/.emacs.d/private/snippets/</code>.</p> <p>When <code>~/.spacemacs.d</code> is used for the Spacemacs configuration, snippets are saved in <code>~/.spacemacs.d/snippets/</code> directory.</p> <p>Each snippet is saved in its own file, named after the alias of the snippet.  The snippet file is located in a directory named after the Emacs major mode it belongs to.</p> <p>A snippet called <code>wip</code> for Clojure has a file name <code>wip</code> and is in saved in directory named <code>clojure</code>.</p>"},{"location":"snippets/yasnippets/#resources","title":"Resources","text":"<ul> <li>How to make better use of Yasnippet in my Emacs workflow - Sacha Chua</li> </ul>"},{"location":"snippets/yasnippets/built-in-snippets/","title":"Built in snippets","text":""},{"location":"snippets/yasnippets/built-in-snippets/#yasnippet-built-in-snippets","title":"Yasnippet Built-in Snippets","text":"<p>Yasnippet official snippet collection contains Emacs mode specific snippets that are automatically included in Spacemacs.</p>"},{"location":"snippets/yasnippets/built-in-snippets/#web-mode-html-link","title":"Web-mode HTML Link","text":"<p>In <code>web</code> major mode, typing <code>link</code> and pressing <code>M-/</code> expands to <code>&lt;link rel=\"stylesheet\" href=\"url\" type=\"text/css\" media=\"screen\" /&gt;</code> placing the cursor on <code>stylesheet</code>.</p> <p><code>TAB</code> moves the cursor to <code>url</code> to change the name of the CSS file.</p> <p><code>TAB</code> again until the end marker is reached.</p> <p></p>"},{"location":"snippets/yasnippets/built-in-snippets/#clojure-mode-snippets","title":"Clojure mode snippets","text":"<p>There are numerous snippets that provide short-cuts for the minimal amount of common code structure in Clojure.</p> <p><code>defn M-/</code> will expand to a function definition expression with the cursor in the position for the function name.  <code>TAB</code> will jump to the argument list, docstring and body of the function definition in turn.</p> <p>With snippets added to the auto-completion tooltip, typing <code>def</code> show the matching snippets and function names.  Where a menu item as an <code>-&gt;</code> it denotes a snippet, e.g. <code>def -&gt; def</code>and <code>defn -&gt; defn</code>.</p>"},{"location":"snippets/yasnippets/built-in-snippets/#common-clojure-snippets-include","title":"Common Clojure snippets include","text":"Snippet Description Tab Stops defn <code>defn</code> function definition name, docstring, args, body for <code>for</code> iterative macro condition, body if <code>if</code> conditional expression condition, body ifl <code>if-let</code> - if true, bind local name binding, body let <code>let</code> - bind a local name to value name, value, body map.lambda <code>map</code> with anonymous function <code>#()</code> fn, body ns <code>ns</code> - current namespace inserted automatically N/A reduce <code>reduce</code> - reduce expression with an anonymous function args, body require <code>:require</code> expression with library and alias library, alias test <code>deftest</code> expression test description, value/expected <p>See the Clojure Snippets Reference for a complete list</p> <p>Write your own snippets</p> <p>writing your own snippets is fairly simple for Clojure or any other language you use with Spacemacs / Emacs</p>"},{"location":"snippets/yasnippets/built-in-snippets/#clojure-namespace-snippet","title":"Clojure namespace snippet","text":"<p>The <code>ns</code> snippet adds a namespace expression with the namespace of the current file, this requires a running REPL.</p> <p>Space f f to create a new file, using underscores in the file name to separate words. Any underscores in the file name are converted into dashes in the <code>ns</code> definition</p> <p>Type <code>ns</code> and then Tab / to expand the snippet, which included the namespace of the current file.</p> <p>If using snippets with auto-completion tool-tips, Tab or arrow keys to select <code>ns -&gt; ns</code> snippet, Enter to insert snippet using the buffer file name</p>"},{"location":"snippets/yasnippets/clojure-snippets-reference/","title":"Clojure snippets reference","text":"<p>Spacemacs includes the yasnippet official snippets repository and clojure-snippets package, providing an extensive collection of snippets for Clojure.</p> <ul> <li>Datomic snippets package contains specific snippets for Cognitect Datomic database</li> <li>mpenet/clojure-snippets has several additional Clojure snippets (although not included in Spacemacs by default)</li> </ul> <p>deftest snippet is called test</p> <p><code>test</code> may expand when typing the deftest name, which typically ends with <code>-test</code>.  Add a space after the <code>-test</code> name to ensure its not expanded to another deftest expression when pressing Tab</p> Snippet Description Tab Stops bench benchmark an expression, using the <code>time</code> function body bp deprecated: was break point in swank def <code>def</code> expression N/A defm <code>defmacro</code> expression, with name, doc-string, arguments &amp; body tabstops name, docstring, args, body defn <code>defn</code> expression, with name, doc-string, arguments &amp; body tabstops name, docstring, args, body defr <code>defrecord</code> docstring, object, args, body deft <code>deftype</code> docstring, object, args, body doseq <code>doseq</code> name, body fn <code>fn</code> - anonymous function name, body for <code>for</code> condition, body if <code>if</code> condition, body ifl <code>if-let</code> - if true, bind a local name binding, body import <code>import</code> java library library name is <code>is</code> - clojure test assertion value, expected let <code>let</code> - bind a local name to a value name, value, body map <code>map</code> fn, col, col map.lambda <code>map</code> with anonymous function <code>#()</code> fn, body mdoc metadata docstring docstring ns <code>ns</code> - expression with the current namespace inserted automatically N/A opts destructuring a map with <code>:keys</code>, <code>:or</code> for default values, <code>:as</code> for entire vector :key binding, or defaults, :as binding pr <code>prn</code> - print function string/value print <code>println</code> - print function string/value reduce <code>reduce</code> - reduce expression with an anonymous function args, body require <code>:require</code> expression with library and alias library, alias test <code>deftest</code> expression test description, value/expected try <code>try</code> &amp; <code>catch</code> expression try expression, exception name, body use depreciated: use require instead when <code>when</code> when expression, body whenl <code>when-let</code> - local binding on when condition binding, body"},{"location":"snippets/yasnippets/create-snippets/","title":"Create snippets from existing text","text":"<p><code>helm-yas-create-snippet-on-region</code> is an effective way to create snippets from existing text.</p> <p> </p> <p>Select a code block that you often create and using the yasnippets tools to create your own generic template</p> <ol> <li>v for visual select and highlight the text for the snippet. Or use Space v and grow the selected region with v</li> <li>Space Space <code>helm-yas-create-snippet-on-region</code> creates a new snippet</li> <li>Enter the name you wish to refer to this snippet</li> <li>Select the major mode you want to add the snippet too (eg. clojure, markdown, html)</li> <li>Edit the text and delete any text that is not required</li> <li>Add tab points in the snippet if relevant<ul> <li><code>$1</code> initial cursor position, <code>$2</code> next cursor position on tab, <code>$0</code> end cursor position.</li> </ul> </li> <li>Ctrl+c Ctrl+t calls <code>yas-tryout-snippet</code> to test the snippet has the right behaviour</li> <li>Ctrl+c Ctrl+c calls <code>yas-load-snippet-buffer-and-close</code> to load the snippet into the specified major mode and closes the snippet buffer</li> </ol>"},{"location":"snippets/yasnippets/create-snippets/#edit-an-existing-snippet","title":"Edit an existing snippet","text":"<p>Space Space <code>yas/visit-snippet-file</code> displays a helm popup listing snippets.</p> <p>Enter a pattern to narrow the list or Ctrl j and Ctrl k to navigate the snippets. Enter to select the snippet.</p> <p>Edit the snippet and Space f s to save file</p> <p><code>C-c C-c</code> calls the function <code>yas-load-snippet-buffer-and-close</code> which loads the snippet into Spacemacs and closes the buffer.</p> <p><code>C-c C-t</code> calls <code>yas-tryout-snippet</code> to test the snippet and check the placement of your tab stops.</p>"},{"location":"snippets/yasnippets/practicalli-snippets/","title":"Practicalli Clojure mode Yasnippets","text":"<p>Practicalli Snippets for Yasnippet.</p>"},{"location":"snippets/yasnippets/practicalli-snippets/#clojurecore","title":"Clojure.core","text":"<p>Add a def form including a doc-string</p> <pre><code># -*- mode: snippet -*-\n# name : def with doc-string\n# key : def\n# contributor : practicalli\n# --\n(def ${1:name}\n  \"${2:doc-string}\"\n  ${3:value})\n$0\n</code></pre> <pre><code># -*- mode: snippet -*-\n# name : def private with doc-string\n# key : def-\n# contributor : practicalli\n# --\n(def ^:private ${1:name}\n  \"${2:doc-string}\"\n  ${3:value})\n$0\n</code></pre>"},{"location":"snippets/yasnippets/practicalli-snippets/#documentation","title":"Documentation","text":"<p>Creative Commons Licence name, used to update the license in a Leiningen project.clj file and for README.md files to describe a project.</p> <p><pre><code># -*- mode: snippet -*-\n# name : cc-license-name\n# key : cc-license-name\n# contributor : practicalli\n# --\n\"Creative Commons Attribution Share-Alike 4.0 International\"\n</code></pre> Creative Commons Licence URL to complement the Creative Commons Licence name snippet.</p> <pre><code># -*- mode: snippet -*-\n# name : cc-license-url\n# key : cc-license-url\n# contributor : practicalli\n# --\n\"https://creativecommons.org/\"\n</code></pre>"},{"location":"snippets/yasnippets/practicalli-snippets/#documentation_1","title":"Documentation","text":"<p>A comment heading to describe the purpose and important information about the current namesapce.</p> <pre><code># -*- mode: snippet -*-\n# name : Comment header for namespace\n# key : comment-header\n# contributor : practicalli\n# --\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; ${1:Namespace summary title}\n;;\n;; ${2:Brief description}\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n$0\n</code></pre> <p>A comment separator for marking logical sections within a namespace, useful for navigating code and identifying opportunities to refactor a namespace into multiple namespaces.</p> <pre><code># -*- mode: snippet -*-\n# name : Comment separator for namespace\n# key : comment-separator\n# contributor : practicalli\n# --\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; ${1:Namespace summary title}\n</code></pre> <p>A rich comment block typically used to hold function calls to show how to make use of the important aspects of the current namespace. For example, calls to start, restart, stop functions in a namespace that defines the service life-cycle.</p> <p>This provides a live executable guide to using the namespace, without being called if the whole namespace is evaluated.</p> <p>A commented expression is placed before the closing paren to ensure that closing paren is not folded up into the previous line. This makes it easier to add further code to the rich comment block.</p> <pre><code># -*- mode: snippet -*-\n# name : Rich comment\n# key : rich-comment\n# contributor : practicalli\n# --\n(comment\n  ${0:body}\n#_()) ;; End of rich comment\n</code></pre> <p>A modified rich comment block with clj-kondo configuration to suppress warnings for duplicate function definition names, supporting alternative function implementations as part of a REPL driven development workflow.</p> <pre><code># -*- mode: snippet -*-\n# name : Rich comment with clj-kondo ignore\n# key : rich-comment-ignore\n# contributor : practicalli\n# --\n#_{:clj-kondo/ignore [:redefined-var]}\n(comment\n  ${0:body}\n#_()) ;; End of rich comment\n</code></pre>"},{"location":"snippets/yasnippets/practicalli-snippets/#hotload-libraries-into-the-repl","title":"Hotload libraries into the REPL","text":"<p>Clojure CLI projects can hotload library dependencies into a running Clojure REPL using the tools.deps library.  This requires starting a REPL with the <code>clojure.tools.deps.alpha</code> library as a dependency which can be done by including the <code>:lib/hotload</code> alias from practicalli/clojure-deps-edn.  Note this library is alpha and the API could change in future.</p> <p>Create a rich comment block that requires the <code>clojure.tools.deps.alpha</code> namespace and an <code>add-libs</code> expression to hotload one or more libraries in a hash-map.  Tab stops with placeholders are included for adding the first library to hotload.</p> <pre><code># -*- mode: snippet -*-\n# name : Hotload libraries using clojure.tools.deps.alpha\n# key : rich-comment-hotload\n# contributor : practicalli\n# --\n;; Rich comment block with redefined vars ignored\n#_{:clj-kondo/ignore [:redefined-var]}\n(comment\n  ;; Add-lib library for hot-loading\n  (require '[clojure.tools.deps.alpha.repl :refer [add-libs]])\n  (add-libs '{${1:domain/library-name} {:mvn/version \"${2:1.0.0}\"}$3})\n\n  ) ;; End of rich comment block\n</code></pre>"},{"location":"snippets/yasnippets/practicalli-snippets/#clojuretest","title":"Clojure.test","text":"<p>A <code>deftest</code> snippet with a <code>testing</code> form to group assertions with and</p> <pre><code># -*- mode: snippet -*-\n# name: deftest clojure.test function\n# key: deftest\n# contributor: practicalli\n# --\n(deftest ${1:name}-test\n  (testing \"${2:Context of the test assertions}\"$&gt;\n    (is (= ${3:assertion-values}))$4))$&gt;\n$0\n</code></pre>"},{"location":"snippets/yasnippets/practicalli-snippets/#library-dependencies","title":"Library Dependencies","text":"<p>Add a Maven style dependency to a Clojure CLI <code>deps.edn</code> project.</p> <pre><code># -*- mode: snippet -*-\n# name : Clojure CLI maven dependency\n# key : deps-maven\n# contributor : practicalli\n# --\n${1:domain/library-name} {:mvn/version \"${2:1.0.0}\"}\n</code></pre> <p>Add a dependency from a Git repository, where the library is named after the remote Git repository, i.e io.github.user|org/library-name for the GitHub repository https://github.com/user|org/library-name.</p> <p>The <code>:git/sha</code> defines a specific commit to use for the dependency.</p> <pre><code># -*- mode: snippet -*-\n# name : deps.edn Git\n# key : deps-git\n# contributor : practicalli\n# --\n${1:domain/library-name}\n  {:git/sha \"${2:git-sha-value}\"}$0\n</code></pre> <p>Additionally a Git tag can be specified, enabling the use of the short SHA value for <code>:git/sha</code> (short sha is the first 7 characters of the 40 character SHA-1 value).</p> <p>A Git client can obtain the short form of a SHA from a Git repository</p> <pre><code>git rev-parse --short 1e872b59013425b7c404a91d16119e8452b983f2\n</code></pre> <pre><code># -*- mode: snippet -*-\n# name : deps.edn Git tag\n# key : deps-git-tag\n# contributor : practicalli\n# --\n${1:domain/library-name}\n {:git/tag \"${1:git-tag-value}\"\n  :git/sha \"${2:git-sha-value}\"}$0\n</code></pre> <p>If a library is not named after the domain of the Git repository, the URL of the Git repository must be specified using the <code>:git/url</code> key.</p> <pre><code># -*- mode: snippet -*-\n# name : deps.edn Git url\n# key : deps-git-url\n# contributor : practicalli\n# --\n${1:domain/library-name}\n  {:git/url \"https://github.com/${1:}\"\n   :git/sha \"${1:git-sha-value}\"}$0\n</code></pre> <p>Add a library dependency that is a local Clojure project.</p> <pre><code># -*- mode: snippet -*-\n# name : deps.edn local project dependency\n# key : deps-local\n# contributor : practicalli\n# --\n${1:domain/library-name} {:local/root \"${2:/path/to/project/root}\"}$0\n</code></pre>"},{"location":"snippets/yasnippets/writing-snippets/","title":"Yasnippets Custom Snippets","text":"<p>Yasnippets are written in plain text, so are easy to write.  They support tab stops <code>$1</code>, placeholders <code>${1:defaultvalue}</code> and ensure indentation rules are applied <code>$&lt;</code></p>"},{"location":"snippets/yasnippets/writing-snippets/#how-to-write-a-snippet","title":"How to write a snippet","text":"<p>The content can be anything, simple text or more usefully a code structure with placeholders</p> <p>The basic structure of a snippet template is:</p> <pre><code># key : short-form-name    (text that expands to snippet body)\n# name : FullNameOfSnippet (shows in autocompletion menu after key )\n# contributor: Practicalli\n# --\n;; ${1:Title placeholder text}\n;; License: ${2:name of licence} Copyright Practicalli\n$0\n</code></pre>"},{"location":"snippets/yasnippets/writing-snippets/#example-simple-text-replacement","title":"Example: Simple text replacement","text":"<p>As Practicalli develops the book content its useful to highlight sections which are still work in progress.  Rather than type the same message over again,  a simple snippet called <code>wip</code> is created.</p> <pre><code># key : wip\n# name : Work In Progress\n# contributor: Practicalli &lt;info@practical.li&gt;\n# --\n&gt; **Fixme** work in progress\n</code></pre> <p>When you expand this snippet with Meta / then the snippet name is replaced by the content.</p>"},{"location":"snippets/yasnippets/writing-snippets/#example-using-tab-stops","title":"Example: Using tab stops","text":"<p>Yasnippets official snippets repository contains a snippet called <code>form</code> in the <code>html-mode</code>.  This expands into a html form and jumps from method, id, action and content.</p> <pre><code># key : form\n# contributor : Practicalli &lt;info@practical.li&gt;\n# name :&lt;form method=\"...\" id=\"...\" action=\"...\"&gt;&lt;/form&gt;\n# --\n&lt;form method=\"$1\" id=\"$2\" action=\"$3\"&gt;\n  $0\n&lt;/form&gt;\n</code></pre> <p>When the snippet is expanded, the snippet name is replaced by the content as usual but the cursor is placed at the first tab stop <code>$1</code>.  Each time you press <code>TAB</code> you move to the next tab stop.</p> <p><code>$0</code> is our exit point from the snippet, so pressing <code>TAB</code> reverts to the usual behaviour outside of YASnippet.</p> <p>Further examples are covered in the Emacs YASnippet video tutorial or Adding YASnippets snippets &amp; Snippet expansion with YASnippet</p>"},{"location":"snippets/yasnippets/writing-snippets/#testing-snippets","title":"Testing snippets","text":"<p><code>M-x yas-tryout-snippet</code>  opens a new empty buffer in the appropriate major mode and inserts the snippet so you can then test it with <code>M-/</code>.</p> <p><code>M-x yas-load-snippet-buffer</code> to load the new snippet into the correct major mode.</p> <p><code>M-x yas-load-snippet-buffer-and-close</code> also loads the new snippet into the correct major mode and kills the snippet buffer (prompting to save first if necessary).</p>"},{"location":"source-control/","title":"Source Control Introduction","text":"<p>Source control in Spacemacs supports Git repositories and services including GitHub, GitLab and Perforce.</p> <p>Magit is a graphical Git client in Spacemacs that provides all the features of the Git command line client.</p> <p>Highlight changes in file buffers and the local Git repository can be shown in the fringe.</p> <p></p>"},{"location":"source-control/#configure-spacemacs-for-source-control","title":"Configure Spacemacs for Source Control","text":"<p>GitHub layer deprecated</p> <p>The Spacemacs <code>github</code> layer has been marked as deprecated as all the working packages are provided by the <code>git</code> layer.</p>"},{"location":"source-control/configure-layers/","title":"Configure Source control layers","text":"<p>Recommended layers to add source control support:</p> <ul> <li><code>git</code> - provides Magit, a feature rich git client that is easy to use</li> <li><code>github</code> - access GitHub / GitLab APIs to access and create issues, pull requests, etc.</li> <li><code>version-control</code> - general features including diff highlights in the window fringe</li> </ul> <p>Git should be configured for Magit, Magit Forge configured to access for issues and pull requests and optionally github-clone configured to search GitHub for repositories by name.</p>"},{"location":"source-control/configure-layers/#add-layers-to-spacemacs-configuration","title":"Add layers to .spacemacs configuration","text":"<p><code>SPC f e d</code> opens the <code>.spacemacs</code> configuration file (<code>M-m f e d</code> Emacs state)</p> <p>Use <code>SPC s s</code> and start typing <code>configuration-layers</code> to search for the <code>dotspacemacs-configuration-layers</code> section.  <code>RTN</code> to jump to the highlighted line, <code>C-j</code> to move down the matching lines, <code>C-k</code> to move up.</p> <p>Add the following configuration to provide the recommended setup.</p> <pre><code>     (git :variables\n          git-magit-status-fullscreen t\n          magit-diff-refine-hunk t\n          git-enable-magit-todos-plugin t)\n\n     (version-control :variables\n                      version-control-diff-tool 'diff-hl\n                      version-control-global-margin t)\n</code></pre> <p>The layers and variables are explained in their own sections below.</p>"},{"location":"source-control/configure-layers/#git-layer","title":"git layer","text":"<p><code>git</code> provides the Magit, a rich Git client that does everything a command line client can do.</p> <p><code>git-magit-status-fullscreen</code> opens  Magit status (<code>SPC g s</code>) in a full frame window, <code>q</code> restores previous window layout. Fullscreen is easier to read the diff of a commit will plenty of space to enter a commit messages.</p> <p><code>magit-diff-refine-hunk</code> configures diffs show the specific word changes when a hunk is active, making it easier to spot the exact changes.</p> <p><code>git-enable-magit-todos-plugin</code> lists matching TODO lines from the current project in the Magit Status buffer, helping work and issues be tracked</p> <pre><code>     (git :variables\n          git-magit-status-fullscreen t\n          magit-diff-refine-hunk t\n          git-enable-magit-todos-plugin t)\n</code></pre> <p>Ensure you follow the Git Configuration steps required for this layer.</p>"},{"location":"source-control/configure-layers/#version-control-layer","title":"version-control layer","text":"<p><code>version-control</code> layer highlights changes in the fringe of a buffer and a vcs transient state to quickly navigate through changes (hunks).</p> <p><code>version-control-diff-tool</code> uses diff-hl to highlight file change against local commits, with markers appearing in the fringe.</p> <p><code>version-control-global-margin</code> enables highlighting changes in all buffers automatically.</p> <pre><code>     (version-control :variables\n                      version-control-diff-tool 'diff-hl\n                      version-control-global-margin t)\n</code></pre>"},{"location":"source-control/forge-configuration/","title":"Magit Forge","text":"<p>Magit can retrieve issues and pull request for a project and even create a new pull request, when connect to services provided by GitHub, GitLab and your own hosted environments.  Magit uses Forge to talk to these services and refers to these services collectively as forges.</p> <p>Configure Git identity and create a GPG key first</p> <p>Configure a Git identity to repositories on these services before configuring Forge</p> <p>Create a gpg key (Pretty Good Privacy) to encrypt your GitHub/GitLab personal access token in a file called <code>.authinfo.gpg</code>.</p>"},{"location":"source-control/forge-configuration/#set-username-for-the-forge-service","title":"Set username for the Forge service","text":"<p>Add your Forge username to your <code>~/.gitconfig</code> file for your operating system account.</p> <p>For example, if your username on GitHub is <code>practicalli</code>, then run this command in a terminal:</p> <pre><code>git config --global github.user practicalli\n</code></pre> <p>If using GitLab, replace <code>github.user</code> with <code>gitlab.user</code> in the above command.</p>"},{"location":"source-control/forge-configuration/#generating-a-token-for-api-access","title":"Generating a token for API access","text":"<p>A personal access token is used to authenticate your identify with the forge. The respective services provide a means to generate that token:</p> <ul> <li>GitHub personal access tokens should be created with <code>repo</code>, <code>user</code> and <code>read:org</code> permissions.</li> <li>GitLab personal access tokens should be created with <code>api</code> permissions.</li> </ul> <p>Personal Access tokens can be revoked and recreated at any time, so are a safer approach than using a password.  Some services will prevent authentication via password, so a token is the only option.</p> <p>GitHub fine-grained tokens not supported</p> <p>GitHub are introducing fine-grained developer tokens, although they are not supported for accessing the GitHub GraphQL API which Forge uses for Issues and Pull Requests.  Create a so-called classic developer token.</p>"},{"location":"source-control/forge-configuration/#encrypted-forge-connection-in-authinfogpg","title":"Encrypted forge connection in .authinfo.gpg","text":"<p>Space f f and open a file called <code>~/.authinfo</code>.  If the file does not exist it will be created when saving the file.</p> <p>Add the Auth Source line to the file, using your GitHub or GitLab name and associated personal access token. For example, the GitHub account name is practicalli and the personal access token is the password (this is not a real token or account, do not share your token publicly)</p> <pre><code>machine api.github.com login practicalli^forge password 01personal02access03token\n</code></pre> <p>Space a Y e to call <code>epa-encrypt-file</code></p> <p></p> <p>Select recipients for encryption prompt, so select a PGP key to encrypt the file with.</p> <p>j and k to navigate to line with existing PGP key</p> <p>m to toggle mark the key to use (should show a star next to the key)</p> <p>Enter with cursor over the <code>[ok]</code> text menu in the pop-up</p> <p>A new encrypted file is created using the original name with <code>.gpg</code> postfixed to the end, creating the  <code>~/.authinfo.gpg</code> file.</p> <p>Space f f and open <code>~/.authinfo.gpg</code> to check Emacs can decrypt the file.  A plain text version of the file will open and a message appears in the mini-buffer saying the file is being decrypted.</p> <p>Finally, delete the <code>~/.authinfo</code> file, so the token is no longer stored as plain text.</p> <p>Without a PGP key</p> <p>When the recipients for encryption prompt appears, select <code>OK</code> if no keys have been created. At the next prompt, enter the password to encrypt the file.</p> <p></p>"},{"location":"source-control/forge-configuration/#encrypt-and-decrypt-via-terminal-cli","title":"Encrypt and decrypt via terminal CLI","text":"<p>Open a terminal and encrypt the <code>.authinfo</code> file using the following command, specifying the email address of the key to use for the encryption</p> <pre><code>gpg --output ~/.authinfo.gpg --encrypt --recipient email-name@domain.tld ~/.authinfo\n</code></pre> <p>Decrypt the <code>.authinfo.gpg</code> file using:</p> <pre><code>gpg --output ~/.authinfo --decrypt ~/.authinfo.gpg\n</code></pre>"},{"location":"source-control/forge-configuration/#configure-spacemacs-to-use-authentication","title":"Configure Spacemacs to use authentication","text":"<p>Add the preferred file in which to store your token, by default this is <code>.authinfo</code>.  It is recommended to store this in <code>~/.authinfo.gpg</code></p> <p>Add <code>auth-sources</code> to specify the location of the encrypted token file in the <code>dotspacemacs/user-config</code> section of your <code>.spacemacs</code> file</p> <pre><code>  ;; Set the files that are searched for writing tokens\n  ;; by default ~/.authinfo will be used\n  (setq auth-sources '(\"~/.authinfo.gpg\"))\n</code></pre> <p>If using <code>XDG_CONFIG_HOME</code> for the location of the <code>authinfo.gpg</code> file.  The default location in <code>HOME</code> can also be included and the first file found will be used.</p> <pre><code>  (setq auth-sources (list\n                      (concat (getenv \"XDG_CONFIG_HOME\") \"/authinfo.gpg\")\n                      \"~/.authinfo.gpg\"))  ; (1)!\n</code></pre> <ol> <li>practicalli/spacemacs.d configuration contains the <code>auth-sources</code> setting.</li> </ol>"},{"location":"source-control/forge-configuration/#configure-the-number-of-open-and-closed-topics-shown-in-forge","title":"Configure the number of open and closed topics shown in forge","text":"<p>A topic is an issue or pull request and the list of each can be configured to display a number of open and closed items.</p> <p>The configuration will show 100 open topics and never show any closed topics, for both issues and pull requests.</p> <pre><code> (setq  forge-topic-list-limit '(100 . 0))  ; (1)!\n</code></pre> <ol> <li>practicalli/spacemacs.d configuration contains the forge list limit settings.</li> </ol> <p>To occasionally show closed topics, set the closed value to a negative number to the number of closed items wanted to be displayed.</p> <p><code>SPC SPC forge-toggle-closed-visibility</code> to toggle the view of closed topics in each list</p> <pre><code> (setq  forge-topic-list-limit '(100 . -10))  ; (1)!\n</code></pre> <ol> <li>practicalli/spacemacs.d configuration contains the forge list limit settings.</li> </ol> <p>The first number is the open items to be displayed, the second number is the closed items to display.  <code>0</code> means no items will be displayed.</p>"},{"location":"source-control/forge-configuration/#hosted-environments","title":"Hosted environments","text":"<p>For GitHub enterprise or GitLab self-hosted service, specify the user and API that Forge should use to connect for the hosted service service</p> <p>For example, if the API is available at https://practical.li/api/v3</p> <p>Set the username for the specific service in the <code>~/.gitconfig</code> file:</p> <pre><code>git config --global github.example.com/api/v3.user EMPLOYEE\n</code></pre> <p>Add the API location to the local configuration of every repository that will use that service</p> <p><pre><code>cd /path/to/repo\ngit config github.host example.com/api/v3\n</code></pre> * Using magit GitHub Enterprise - Jorge Dias</p>"},{"location":"source-control/git-configuration/","title":"Git Configuration","text":"<p>Git uses either <code>XDG_CONFIG_HOME/git/config</code> or <code>$HOME/.gitconfig</code> configuration file for user level settings.</p> <p>An identity is required when sharing commits via services such as GitHub/GitLab and so that each commit you make is associated to you.</p> <p>Practicalli Dotfiles Git Configuration</p> <p> Practicalli Dotfiles contains an example Git user configuration, with separate identity configuration files for commercial and open source work.</p> <p>The Git configuration also provides global Git ignore patterns for Clojure and MkDocs projects.</p>"},{"location":"source-control/git-configuration/#add-an-identity-to-git-configuration","title":"Add an identity to Git configuration","text":"<p>Define your git identity using the following commands in a terminal window</p> Use the GitHub Email Mask address <p>To minimise Email spam, use the email address provided by GitHub as a mask to your primary email address on the GitHub account.  The mask address is of the form <code>***+github-account@noreply.github.com</code>.</p> <p>Visit the email settings of the GitHub account and tick Keep my email addresses private.</p> <p>A new email of the form <code>******+github-account-name@users.noreply.github.com</code> is created which must be set as your user email address</p> <p>For additional security, select the option Block command line pushes that expose my email to prevent commits being pushed to GitHub using your public email address.</p> <pre><code>git config --global user.name \"practicalli\"\n\ngit config --global user.email ***+github-primary-email-address@noreply.github.com\n</code></pre> <p>The <code>[user]</code> section of the Git configuration file is updated by these commands, automatically creating the file and section if it does not exist.</p>"},{"location":"source-control/git-configuration/#access-remote-repositories","title":"Access remote repositories","text":"<p>GitHub repositories can be accessed via HTTPS or SSH URL.</p> <p>SSH approach is typically more secure, especially as the files holding your keys on disk are encrypted.  SSH connections can be tunnelled through HTTPS if connecting to a remote repository via a very restricted firewall.</p> <p>HTTPS is more widely supported in firewalls as it goes through the HTTPS port.  A personal access token is typically required (GitHub blocks access via password), although it must be saved in a plain text file, e.g. <code>~/.github</code>.  Should a token be compromised, it does not give access to the account on the remote repository, so the token can be deleted easily.</p>"},{"location":"source-control/git-configuration/#ssh-urls-with-ssh-key","title":"SSH URLs with SSH Key","text":"<p>When using SSH URLs for remote repository access, generate an SSH key and add it to your GitHub account.</p> <p>The SSH key removes the need to enter GitHub credentials each time a command is used that accesses a remote repository (push, pull, clone, etc.).</p> <p></p>"},{"location":"source-control/git-configuration/#ssh-key-passphrase","title":"SSH Key Passphrase","text":"<p>Practicalli recommends setting a passphrase when generating an SSH key.</p> <p>Unix systems (Linux / MacOSX) should have the <code>ssh-keygen</code> command.</p> <p><code>-t</code> specifies the type of encryption, ed25519 recommended by GitHub</p> <p><code>-C</code> to add your GitHub email address to the SSH key</p> <pre><code>ssh-keygen -t ed25519 -C \"github-primary-email-address@noreply.github.com\"\n</code></pre> Create key with RSA if Ed25519 not supported <pre><code>ssh-keygen -t rsa -b 4096 -C \"github-primary-email-address@noreply.github.com\"\n</code></pre> <p>Accept the default file or enter a preferred file name</p> <p>Enter a passphrase.  A 12 character or greater passphrase should provide adequate security.</p> <p>Repeat the passphrase</p> <p>The key has now been created, with an <code>id_rsa.pub</code> public key that should be added to you GitHub account.</p> <p></p>"},{"location":"source-control/git-configuration/#saving-ssh-key-to-key-ring","title":"Saving SSH Key to Key Ring","text":"<p>A key-ring tool for the Operating System can be used to securely store the passphrase.</p> <p>Ubuntu desktop has a key-ring tool which will display a pop-up dialog to save the passphrase to the key-ring the first time the SSH key is used. Once saved, the key is unlocked when login into the desktop.</p>"},{"location":"source-control/git-configuration/#https-urls-and-personal-access-token","title":"HTTPS URLs and personal access token","text":"<p>When using HTTPS URLs for remote repository access, a personal access token is required.  Visit the remote repository service and generate a personal access token with at least <code>repo</code> permission.</p> <ul> <li>GitHub personal access token documentation</li> <li>GitLab personal access token documentation</li> </ul> <p>Whilst the token could be added to the <code>~/.gitconfig</code>, as this file is plain text it is not particularly secure (especially if committed into a dotfiles repository and shared).</p> <pre><code>git config --global oauth.token \"tokens-in-plain-text-files-are-not-very-secure\"\n</code></pre> <p>To provide greater security when using the token, consider using the Git Credential Manager.  It is not known if this approach will work with magit (let Practicalli know if it does).</p> Magit Forge also uses personal access token <p>Magit Forge also requires a personal access token, although this can be saved in the encrypted file <code>~/.authinfo.gpg</code> for greater security.  The Magit Forge token includes permissions required to access remote repositories over HTTPS</p>"},{"location":"source-control/git-configuration/#diff-3-support","title":"Diff 3 Support","text":"<p>Diff 3 standard included the parent of two changes in conflict, providing additional context when deciding which change should take precedence</p> <pre><code>git config --global merge.conflictstyle diff3\n</code></pre> <p>This command adds a <code>conflictstyle</code> entry in the <code>[merge]</code> section of the Git configuration file.</p> <pre><code>[merge]\n    # Include common parent when merge conflicts arise\n    conflictstyle = diff3\n</code></pre> <p>Magit supports the Diff3 standard, so a common parent will be shown when this feature is enabled.</p> <p></p>"},{"location":"source-control/github-clone/","title":"github-clone GitHub access","text":"<p>github-clone is Deprecated</p> <p>Space g c now calls magit-clone which is a far more secure approach than previously provided by github-clone.</p> <p>github-clone was removed as part of the deprecation of the github layer.  Only the <code>git</code> layer is now recommended.</p> <p>The content below is kept for posterity and will be moved to the reference section.</p> <p>Space g c can clone a remote repository from GitHub / GitLab.</p> <p>Using an SSH URL and an SSH key, then no further configuration is required.</p> <p>Using an HTTPS URL required the configuration of a developer token.</p> <p>Use Magit as a GitHub Client</p> <p>Magit and Magit Forge provides the majority of github-clojure features, except for searching GitHub for a repository.  Magit Forge can use an <code>.authinfo.gpg</code> which provides a high degree of security.</p>"},{"location":"source-control/github-clone/#github-cli","title":"GitHub CLI","text":"<p>GitHub CLI will generate a developer token each time the auth login command is issued</p> <pre><code>git auth login\n</code></pre>"},{"location":"source-control/github-clone/#configure-developer-token","title":"Configure developer token","text":"Developer tokens should have limited life-span <p>Saving a developer token to the file space, especially in a file that could be included in version control and pushed to a remote server is a security issue.</p> <p>Using GitHub CLI can minimise the risk by recycling the tokens.  Or create tokens with a very short life-span via the GitHub / GitLab website.</p> <p>The github-clone package in the Spacemacs GitHub layer requires a personal access token in <code>~/.gitconfig</code> to access GitHub.  As <code>~/.gitconfig</code> is plain text, adding a token is a potential security risk.</p> <p>If an access token is shared, it should be immediately deleted from your GitHub account. Personal access tokens do not provide access to a users GitHub account, so are less of a risk than using a password.</p> <p>Add your GitHub account name to the Git configuration</p> <pre><code>git config --global github.user practicalli\n</code></pre> <p>Add the personal access token to Git configuration (using your own token)</p> <pre><code>git config --global github.oauth-token ****************************************\n</code></pre>"},{"location":"source-control/github-clone/#move-token-to-config-private","title":"Move token to config-private","text":"<p>To help mistakenly committing the token to a shared repository, move the <code>[github]</code> section from the Git Configuration file to a file called <code>config-private</code></p> ~/.config/git/config-private<pre><code>  [github]\n    user = &lt;your-github-username&gt;\n    # oauth-token = ***************************\n</code></pre> <p>Add an <code>[include]</code> section in the Git configuration file to include the details from the <code>.gitconfig-private</code></p> ~/.config/git/config<pre><code>  [include]\n    path = ~/.gitconfig-private\n</code></pre> <p>The Git configuration file can then safely be committed to a shared Git repository without exposing the access token.</p>"},{"location":"source-control/magit/","title":"MaGit - Version Control","text":"<p>Magit is simple to use and powerful Git client which provides equivalents for all Git CLI commands and even has a git command line option.</p> <p>Magit status allows fine-grained staging of changes within visual diffs for files, hunks or just a single line.  Commit, amend, squash and rebase to your local repository.  Browse the commit history log which can also be used to reset commits, interactive rebase and cherry pick changes.</p> <p>Magit can push and pull changes with remote repositories and using Forge can also manage issue and pull request too.</p> <p>Space g opens the Git menu.</p> <p>Space gs is the equivalent of <code>git status</code> and opens the Magit client, providing full control over local and remote Git repositories.</p> <p>? shows the top level command menu in the Magit status buffer.</p>"},{"location":"source-control/magit/#magit-overview","title":"Magit overview","text":"<p>Here is a quick demonstration of Magit in action where we stage and commit changes locally, then push those commits to Github.</p> <p> </p>"},{"location":"source-control/magit/blame/","title":"Reviewing Commits with Git Blame","text":"<p><code>SPC g b</code> opens the commit history of the current buffer, showing who committed each change.</p> <p><code>j</code> and <code>k</code> jump up and down through the changes</p> <p><code>RET</code> will open the commit details in a pop-up buffer</p> <p></p>"},{"location":"source-control/magit/branching/","title":"Branching in Magit","text":"<p>Every Git commit is made on a branch, the default branch name is master. A new branch should be created when developing a new feature, especially when working on an pull request. Branches are used to try pull requests made by others.</p> <p></p>"},{"location":"source-control/magit/branching/#creating-a-branch","title":"Creating a branch","text":"<p><code>SPC g s</code> opens the Magit Status buffer.</p> <p><code>b c</code> creates a new branch, first prompting for the name of the existing branch to use as the starting point, then prompting for the name of the new branch.</p> <p>Alternative, <code>b s</code> creates a tracking branch, useful when working with existing remote branches</p>"},{"location":"source-control/magit/branching/#branch-from-an-earlier-commit","title":"Branch from an earlier commit","text":"<p><code>SPC g s</code> opens the Magit status buffer</p> <p><code>b b</code> to select a different branch if required (optional)</p> <p><code>l l</code> opens a long log, showing all the commits from the current branch</p> <p><code>j</code>/<code>k</code> to navigate the commit history.  Move to the commit on which to make a new branch</p> <p><code>b c</code> to create a new branch from the current commit, prompting for the name of the new branch.</p> <p>The new branch is now set.</p>"},{"location":"source-control/magit/cherry-picking/","title":"Cherry Picking commits","text":"<p>Cherry Picking is a way to be specific about which commits from a branch are incorporated into another branch.  Where as merging a branch into another would take the full commit history.</p> <p><code>SPC g s</code> to open magit status provides the <code>A</code> Apply menu.</p> <p><code>A</code> with the point on any commit (or with commits selected in a list) allows cherry picking from the related branch.</p> <p>A common use of cherry picking it to copy one or more commits from one branch and apply them to another branch.</p> <p>Cherry picking may also be used as part of a pull request process, rather than merging the pull request directly, avoiding any unintentional commits that may be part of that pull request.</p>"},{"location":"source-control/magit/cherry-picking/#cherries-comparing-two-branches","title":"Cherries - comparing two branches","text":"<p><code>Y</code> to select cherries</p> <p>Select the Cherry head - the branch containing commits (cherries) that are to be copied</p> <p>Select the Cherry upstream - the branch that would receive the commits (cherries)</p> <p>A list of commits, 'cherries', are show to help narrow down which commits could be cherry picked.</p> <p></p> <p><code>A</code> with the point on one of the cherries, or with one or more cherries selected, will start the Applying of commits</p>"},{"location":"source-control/magit/cherry-picking/#find-commits-via-list-of-branches","title":"Find commits via list of branches","text":"<p><code>l o</code> in Magit Status will list the other branches.</p> <p>Navigate to the branch and commit (or commits) to cherry pick.  Use visual select state, <code>v</code> to select multiple commits (<code>C-SPC</code> in holy mode)</p>"},{"location":"source-control/magit/cherry-picking/#applying-commits","title":"Applying commits","text":"<p><code>A</code> starts the apply menu to start the cherry picking process.  <code>A</code> is also used to open the transient Apply menu, to continue skip or abort the cherry picking.</p> <p></p> <p><code>d</code> to donate the selected cherry commits to another branch</p> <p>Select the donate branch - the branch commits are to be copied to</p> <p>If there are no conflicts, the commits are added to the branch.  Push the changes, <code>P p</code>, to a remote repository if relevant.</p>"},{"location":"source-control/magit/cherry-picking/#managing-conflicts","title":"Managing Conflicts","text":"<p>The Magit status buffer shows a cherry-picking progress section if the selected cherries (commits) cannot be automatically merged into the branch,</p> <p>Files that contain merge conflicts will be listed under unstaged changes</p> <p></p> <p><code>RET</code> to open file for editing in a buffer and resolve the conflicting change</p> <p><code>SPC f s</code> to save the file</p> <p><code>SPC g s</code> to return to the Magit status buffer</p> <p><code>s</code> on the file to stage any unstaged changes after editing the conflicting files</p> <p><code>A</code> to open the Apply action menu, <code>A</code> to continue with the apply of cherries</p> <p></p> <p>Staged changes require committing, so continuing the Apply will open a commit message buffer</p> <p><code>, ,</code> to confirm the commit</p> <p>The cherry commits will be automatically committed, unless there is a conflict in another commit. Repeat the above steps until there are no further conflicts and all the commits are merged.</p> <p><code>A s</code> to skip over a commit that is proving to be overly challenging to resolve its conflicts</p> <p><code>A a</code> to abort and roll back to the state before cherry picking started, loosing all conflict edits</p>"},{"location":"source-control/magit/cherry-picking/#diff-3-configuration","title":"Diff 3 configuration","text":"<p>Diff 3 presentation of merge conflicts displays a common parent (if one exists) between the two changes in conflict.</p> <p></p> <p>Git configuration details how to add diff3 merge support along with many other useful settings.</p>"},{"location":"source-control/magit/cherry-picking/#errors-and-aborts","title":"Errors and Aborts","text":"<p><code>$</code> opens the Magit command log, showing commands run and errors that may have occurred, such as if commits are not applied or the Apply process aborts.</p>"},{"location":"source-control/magit/clean-up-magit-sessions/","title":"Cleaning up Magit sessions","text":"<p>Leaving Magit status buffers using the <code>q</code> key will persist the Magit status session until you close it with <code>SPC u q</code> or quit / restart Spacemacs.</p> <p>If you have multiple Magit status sessions open, you can use Helm to back close them.</p> Keybinding Description <code>q</code> returns to previous window layout, keeping the Magit status buffer available. <code>SPC u q</code> kills the magit status buffer and returns to previous layout"},{"location":"source-control/magit/clean-up-magit-sessions/#closing-multiple-magit-buffers-with-helm","title":"Closing multiple Magit buffers with Helm","text":"<p>Use the Helm transient state menu to bulk delete them.</p> <ul> <li><code>SPC b b</code> to open all buffers.</li> <li>Type <code>magit</code> in the helm prompt to show just the magit buffers</li> <li><code>M-SPC</code> opens the Helm Transient state</li> <li><code>T</code> marks all buffers</li> <li><code>M-D</code> deletes all marked buffers (and closes the Helm transient state)</li> </ul>"},{"location":"source-control/magit/commit-changes/","title":"Committing changes","text":"<p>c opens the commit menu in the Magit status buffer, allowing you to create, amend, extend, reword, squash commits.</p> <p>The Magit commit menu can be used to create new commits at the HEAD of the commit history.</p> <p></p> <p>Changing a commit generates a new SHA identity, creating a commit in the history, replacing the current HEAD commit.</p> Tool Magit Description create c c creates a new commit and prompts for a commit message Amend c a add staged changes to HEAD commit and commit message can be edited Reword c w edit the commit message, ignore any staged changes Extend c e add all staged files to the HEAD commit, no message editing"},{"location":"source-control/magit/commit-changes/#create-a-commit","title":"Create a commit","text":"<p>c c in Magit status buffer, Space g s creates a new commit that will become the new HEAD in the commit history.</p> <p>Two new buffers open</p> <ul> <li>The commit message buffer - to write multi-line commit messages</li> <li> <p>The diff buffer - a visual diff of changes to be included in this commit</p> </li> <li> <p>, , to create the commit</p> </li> <li>, k to cancel the commit (leaves changes staged)</li> </ul> <p></p>"},{"location":"source-control/magit/commit-changes/#writing-commit-messages","title":"Writing Commit messages","text":"<p>Type in a suitable commit message that explains the purpose and value of this commit. The first line should be a succinct summary of the purpose of the change.</p> <p>68 characters is the recommended maximum length of the first line of the commit message.  At 69 characters onward they change color to give a visual guide to the maximum length.  In the body, lines are automatically wrapped once a space is typed after a word that the maximum length.</p> <p></p>"},{"location":"source-control/magit/commit-changes/#commit-message-history","title":"Commit message history","text":"<p>g k will paste the previous commit message in the commit message buffer when creating a commit in Magit. Further g k  key presses will cycle backwards through the previous commit messages</p> <p>g j will cycle forwards through commit messages</p> <p>Scrolling through the commit history is a simple way to create consistent style of commit messages without having to look at previous commits separately.</p> <p>Commit messages are remembered even after a reset (tested with soft reset)</p> <p>Previous messages are only available once a commit is made. If a change is cancelled, , k before the commit then the message is not saved. Instead, select the message and yank, <code>y</code>, into the kill ring before killing the commit.</p>"},{"location":"source-control/magit/commit-changes/#linking-github-issues-and-git-commits","title":"Linking GitHub issues and Git commits","text":"<p>Including a reference to an issue, e.g. <code>GH-42</code> or <code>#42</code>, you can link a commit to a GitHub issue.</p> <p>Include the phrase <code>Resolve #42</code> the body of the commit message to automatically close an issue when a commit is pushed to GitHub.</p> <p>Lines starting with <code>#</code> are comments and not included in the commit message, so avoid using the <code>#42</code> short form at the start of the line in Magit.</p>"},{"location":"source-control/magit/commit-changes/#amend-commit","title":"Amend commit","text":"<p>Stage changes to be added to the last commit, i.e. HEAD.</p> <p>c to enter the commit transient state menu</p> <p>a in the commit menu to amend a commit</p> <p>The commit transient state buffers appear and shows details of the previous commit with the additional staged changes.</p> <p>Edit the commit message and review the diffs for all the files added to the commit (ensuring a meaningful commit message is written).</p> <p>, , to confirm the changes should be committed.</p> <p>, k to cancel changes and leave the previous commit unchanged.</p> <p> </p> Force push a shared commit <p>If a commit is changed after it is pushed to a remote repository, then a force push will be required.  Please confirm with other maintainers of the code if a force push is acceptable as it could interrupt their development.  A more suitable practice can be to create a new commit and push that rather than rewrite history.</p> <p><code>P</code> opens the Push menu in Magit status buffer (<code>SPC g s</code>).</p> <p><code>-f</code> sets the force-with-lease option to rewrite the shared history in the remote repository</p> <p><code>p</code> pushes to the new commit to the remote repository and replaces the HEAD commit in that repository.</p>"},{"location":"source-control/magit/commit-changes/#why-amend-a-commit","title":"Why amend a commit","text":"<p>Amend creates a new commit with both the currently staged changes and the change in the previous commit.</p> <p>If you forgot to include some changes in the last commit, then this is a way to avoid two commits for the same logical change.</p> <p>As amending also allows you to edit the commit message, this can be updated to fix errors or add more details.</p>"},{"location":"source-control/magit/commit-changes/#reword-commit-message","title":"Reword commit message","text":"<p>c w allow you to reword the commit message of the previous commit. The new commit replaces the current HEAD commit.</p> <p>Any staged changes are ignored and not amended to the previous commit.</p>"},{"location":"source-control/magit/commit-changes/#extend-commit","title":"Extend commit","text":"<p>c e will immediately add all staged changes to the previous commit, creating an new commit that replaces the previous commit.  You are not prompted, so use this with caution.</p> <p>No prompt is given to edit the commit message, so this is only useful if you simply just missed a change or file and the commit message already describes the change in full detail.</p> How to undo a commit extend <p>O to select the Magit Reset menu.</p> <p>s for a soft reset, assuming you only wish to reset the commit (leaves staged and working files as they are).</p> <p>Select <code>ORIG_HEAD</code> to select the unchanged HEAD commit from the remote repository, assuming it has the required commit.</p>"},{"location":"source-control/magit/commit-changes/#amending-a-commit-that-is-not-head","title":"Amending a commit that is not HEAD","text":"<p>Interactive rebasing is required to amend a commit that is not currently the HEAD commit.</p> <p>The amend command only works with the HEAD commit and Git doesn't provide a specific command for modifying a commit other than HEAD.</p> <p>Avoid amending shared commits</p> <p>Amending a commit will change the commit reference number (the SHA hash code) as this is based in part on the time of commit as well as the contents.</p> <p>Use the <code>-f</code> force flag to push an amended commit to a shared repository (e.g. GitHub or GitLab).</p> <p>P - f p to force push to the remote repository.</p>"},{"location":"source-control/magit/commit-changes/#force-push-a-shared-commit","title":"Force push a shared commit","text":"<p>If you already shared a commit that you want to extend, please ask those you work with if its okay (as it could interrupt their development).  For shared commits, its better practice to create a new commit and push that rather than rewrite history.</p> <p><code>P</code> opens the Push menu in Magit status buffer (<code>SPC g s</code>).</p> <p><code>-f</code> sets the force-with-lease option to rewrite the shared history in the remote repository</p> <p><code>p</code> pushes to the new commit to the remote repository and replaces the HEAD commit in that repository.</p>"},{"location":"source-control/magit/commit-changes/#squash-commits","title":"Squash Commits","text":"<p><code>c</code> to enter the commit transient state menu</p> <p><code>s</code> in the commit menu to amend a commit</p> <p>The top buffer shows the local Git log, listing all the commit history.</p> <p>The bottom buffer shows the magit-diff output, so you can see all the changes of the current commit.</p> <p></p> <p>Move the cursor to the commit you wish to squash into its previous commit</p> <p><code>, ,</code> or <code>C-c C-c</code> to confirm the commit(s) should be squashed.</p> <p><code>, k</code> or <code>C-c C-k</code> to cancel changes and leave the commit history unchanged.</p>"},{"location":"source-control/magit/commit-changes/#why-squash-commits","title":"Why Squash commits","text":"<p>The commit history should help the development team understand the reasons for changes as well as what has actually changed.</p> <p>Squashing commits is useful for joining together commits that form a logical change.  If a change is spread over several commits, then squashing those commits together can improve the commit history.</p>"},{"location":"source-control/magit/commit-changes/#hintavoid-squashing-shared-commits","title":"Hint::Avoid squashing shared commits","text":"<p>Squashing a commit will change the commit reference number (the SHA hash code) as this is based in part on the time of commit as well as the contents.  If you need to squash a commit history that has already been shared you should tell everyone before doing so as they will have to pull the new commit history.</p> <p>Use the <code>-f</code> force flag to push a squashed commit to a shared repository (e.g. GitHub or GitLab).</p> <p><code>P -f p</code> to force push to the remote repository.</p>"},{"location":"source-control/magit/create-local-repository/","title":"Create a local Git repository","text":"<p><code>SPC g i</code> creates a local git repository, prompting for root directory in which to create it.</p> <p></p> <p>Once magit created the git repository it automatically opens <code>magit-status</code>.</p> <p></p>"},{"location":"source-control/magit/create-local-repository/#using-magit-status-to-create-a-local-repository","title":"Using Magit Status to create a local repository","text":"<p><code>SPC g s</code> on a project that has no git version control will prompt you for a directory that contains a git repository.  If you select a directory without a <code>.git</code> repository, a prompt in the mini-buffer will ask if a git repository should be created.</p> <p>If <code>magit-repository-directories</code> is configured in <code>.spacemacs</code>, then only a list of existing repositories are listed.  Type <code>.</code> to initialize a new git repository in the current project.  Magit will prompt you in the mini-buffer to confirm you wish to create this git repository.</p> <p><code>SPC g i</code> is the recommended approach to initialize a new git repository once <code>magit-repository-directories</code> is set.</p> <p></p>"},{"location":"source-control/magit/interactive-rebasing/","title":"Interactive Rebasing","text":"<p>Magit provides an excellent tool to change history using interactive rebasing.  By navigating back through the commit history changes can be made to commits or simply updating commit messages for commits that are not the current HEAD.</p> <p>During the interactive rebasing you can use other Git commands such as Amend, Write and Extend to update commits anywhere in the history.</p> <p>Before rebasing, any uncommitted changes should be stashed or deleted.</p> <p></p>"},{"location":"source-control/magit/interactive-rebasing/#starting-rebase","title":"Starting Rebase","text":"<p><code>SPC g s</code> to open the Magit Status buffer and find the commit where the rebase should start.</p> <p>Either navigate to the Recent Commits section and <code>TAB</code> to show the list of commits, or use <code>l l</code> to open the commit history log.</p> <p>Move the cursor to the commit to rebase from, the earliest commit to be changed.</p>"},{"location":"source-control/magit/interactive-rebasing/#modifying-a-commit-during-rebase","title":"Modifying a commit during rebase","text":"<p><code>r</code> to start rebase</p> <p><code>m</code> to modify the commit</p> <p><code>s</code> to stage any new content to be added to the commit, if required.</p> <p><code>u</code> to mark hunks or regions to unstage in the original commit, using <code>v</code> to select regions within hunks if required.</p> <p><code>z w</code> to stash the working copy of any unstaged changes, or <code>x</code> to delete those unstaged changes from the working copy</p> <p><code>c a</code> to amend the commit with the changes</p> <p><code>, ,</code> to confirm the changes and make the new commit</p> <p><code>r r</code> to continue the rebase</p> <p><code>P p</code> to push the changes to a remote repository, or <code>P -f p</code> for a forced push with lease if rebased commits were already pushed to that repository</p> <p><code>z p</code> to unstash any changes that were stashed during or before the rebase.</p>"},{"location":"source-control/magit/interactive-rebasing/#todowork-in-progress-sorry","title":"TODO::work in progress, sorry","text":""},{"location":"source-control/magit/interactive-rebasing/#interactive-rebase-to-modifying-a-commit-other-than-head","title":"Interactive rebase to modifying a commit other than HEAD","text":"<p>can be broken down into three steps:</p> <ol> <li>Temporarily make that other commit (A) the HEAD.</li> <li>Modify the HEAD (as described above), resulting in commit A'.</li> <li>Tell Git to reapply the commits that followed A, but on top of A'.</li> </ol> <p>This can be done using an interactive rebase. Type <code>r</code> to show the rebase popup. Then type <code>m</code> to invoke the \"edit a commit\" rebase variant. A buffer with recent commits appears. Move to the commit you want to modify and type C-c C-c to select it. Git then rewinds history to that commit and shows information about the ongoing rebase in the status buffer.</p> <p>Modify HEAD using the amend tools</p> <p><code>r r</code> to confirm the changes are complete.</p> <p>If A' and B conflict then rebase will stop at B and you have to resolve the conflict. After you have done so press <code>r r</code> to continue.</p> <p>If you know that your changes to A will result in conflicts with B, then proceed as describe above, otherwise use the following approach.</p> <p>Git allows creating \"fixup commits\" using git commit --fixup A. This creates a new commit, which records changes which \"should have been made in another commit\". That commit becomes the new HEAD. There also exists a --squash variant. For information about the differences see the git-commit man page.</p>"},{"location":"source-control/magit/interactive-rebasing/#rebase-with-autosquash","title":"Rebase with autosquash","text":"<p>To actually combine the A commit and the new commit A' and then reapply B on top of that you have to use rebase. Magit provides a convenient command for doing so on r f.</p> <p>The main difference to the above approach is that here we first create a new commit and then we rebase to combine that with the \"target\" and reapply B. Above we began with rebasing instead of committing.</p> <p>In Magit both the --fixup and the --squash variants are available from the commit popup, on f and s. But Magit also provides \"instant\" variants of the fixup and squash commands on F and S. These variants create a new commit like the \"non-instant\" variants, but then they instantly combine the fixup commit with the target commit using rebase, without you having to invoke another command.</p> <p>\"Instant fixup\" (c F) is essentially the same thing as \"extend HEAD\" (c e), except that it works for any commit, not just HEAD.</p>"},{"location":"source-control/magit/list-local-repositories/","title":"List your local Git repositories","text":"<p><code>SPC g L</code> will list all the repositories along with basic status information (branches, dirty, etc). This is very useful as the number of created or cloned repositories grows on your computer.</p> <p></p> <p>You first need to tell Magit where your repositories are on your computer.</p>"},{"location":"source-control/magit/list-local-repositories/#configure-the-location-of-your-git-repositories","title":"Configure the location of your Git repositories","text":"<p><code>magit-repository-directories</code> is used to define which directories Magit should search in to find your Git repositories. This configuration should be added to the <code>dotspacemacs/user-config</code> section of your <code>.spacemacs</code> file.</p> <p>In the following example the Git repositories are all under a directory called <code>projects</code> in your home directory.  It also specifically adds the Spacemacs repository in <code>.emacs.d</code>.</p> <pre><code>(setq magit-repository-directories\n        '((\"~/.emacs.d\"  . 0)\n          (\"~/projects/\" . 2)))\n</code></pre> <p>The number represents the depth of subdirectories in which magit searches for Git repositories in the specified directory.</p>"},{"location":"source-control/magit/list-local-repositories/#hint-setting-repository-directories-changes-magit-status-behaviour","title":"Hint:: Setting repository directories changes Magit Status behaviour","text":"<p><code>SPC g i</code> should be used to initialize a new git repository once <code>magit-repository-directories</code> is set.</p> <p>If you use <code>SPC g s</code> on a project that has no git version control, magit will prompt you for a git repository.  Enter <code>.</code> to initialise a new git repository in the current project.  Magit will prompt you in the mini-buffer to confirm you wish to create this git repository.</p> <p></p>"},{"location":"source-control/magit/reset-commit-history/","title":"Reset Commit History","text":"<p>Reset allows you to roll back commit history.  The local commit history can be changed by removing one or more commits and either keeping or discarding staged and local working copy changes.</p> <p>Shift+o in the Magit Status buffer opens the reset menu</p> Key binding Description s remove the commit, keep the staged and working directory changes h remove the commit, staged and working directory changes m remove the commit and staged changes, keep the working directory i remove staged changes only w remove working directory changes only f reset a specific file"},{"location":"source-control/magit/reset-commit-history/#using-recent-commits-or-log","title":"Using recent commits or log","text":"<p>Navigating the recent commits list on the magit status buffer or viewing the log list, <code>l l</code>, provides a simple way to reset to a specific commit, especially further back in the git history.</p> <p>j and k to navigate to the commit in the history to reset to,the commit that will be the new HEAD.</p> <p>Shift+o to initiate a reset and choose the scope of the reset to carry out (commit, staging, working directory).</p> <p></p>"},{"location":"source-control/magit/reset-commit-history/#specifying-a-commit-to-reset-to","title":"Specifying a commit to reset to","text":"<p>Specify or select where to reset the commit history to</p> <p></p> Reset HEAD to Description <code>HEAD</code> no change, this is the latest commit <code>HEAD~1</code> first commit before the latest <code>HEAD~2</code> second commit before the latest <p>All commits between the current HEAD new HEAD will be removed.</p> <p>l l shows the updated commit history.</p> <p>Changing shared commit history</p> <p>Avoid reverting shared history when possible, instead consider using revert or create a new commit that resolves the issue</p> <p>Use the - f force option if you must push a changed history to a shared repository</p> <p>P - f p to force push to a remote repository.</p>"},{"location":"source-control/magit/staging-changes/","title":"Staging changes","text":"<p>Regularly staging changes provides an additional safety net as you work towards a meaningful change.</p> <p>Magit enables very fine grain selection when staging changes.  A file, a hunk or even a specific line can be staged and unstaged.  This makes it very easy to create clean commits.</p> <p>s to stage the current file, hunk or selected region.  Multiple files can be staged by selecting the filenames.  S stages all the untracked files and Unstaged changes.</p> <p>u to unstage the current file, hunk or selected region in the staged changes section. U to unstage everything (from anywhere in the Magit Status buffer).</p> <p></p> <p>Tab to expand a section, eg. a file expands to git hunks, hunks expand to lines in the hunk.  Shift+Tab to collapse a section.</p> <p>[ to jump down from section to section, ] to jump back up.</p> <p>v to visually select one or more filenames or lines to stage or unstage.</p> <p>Visual select within hunk boundary</p> <p>Selecting lines to stage or unstage only works within the Git hunk boundary.  The action fails if lines are selected from more than one hunk.</p> <p>Hiding white-space in Magit diff</p> <p><code>D</code> in the Magit Status buffer to change how diffs are rendered</p> <p><code>-b</code> ignore whitespace changes</p> <p><code>-w</code> to ignore all whitespace</p>"},{"location":"source-control/magit/staging-changes/#renamed-files","title":"Renamed files","text":"<p>s to stage the deleted file (previous file name) and the new file name (in untracked files).  Magit status should show the file as renamed, unless the contents was significantly changed.</p> <p>x on a file name in Magit Status buffer will delete that file.  A prompt will show in the mini-buffer to confirm you want to 'Trash' the file.</p> <p>v enters visual select mode, j and k can be used to select multiple files.  x deletes all the selected files, with a mini-buffer prompt to confirm.</p>"},{"location":"source-control/magit/staging-changes/#magit-staging-and-commit-basics","title":"Magit staging and commit basics","text":""},{"location":"source-control/magit/stashing/","title":"Stashing changes","text":"<p>z opens the Stash menu, allowing you to keep changes in your working directory or staging index without having to commit them.  Stashing your local changes allows you to change to a different branch or pull commits from a remote repository.</p> <p></p> <p>z to stash all the changes in your local working directory and staged changes (index).</p> <p>i stashes only changes that are staged, w stashes only the working directory</p> <p>- u will also include the untracked files in the stash</p> <p>Mini-buffer shows a prompt for the name of the stash.  A meaningful name for the stash allows understanding the purpose of the stash and make it simpler to use multiple stashes</p>"},{"location":"source-control/magit/stashing/#restore-stage","title":"Restore stage","text":"<p>With the cursor on a stash in the Magit Status buffer:</p> <p>a to apply the changes in a stash to the working directory, keeping the changes in the stash</p> <p>p to pop the change, applying the changes to the working directory and removing the stash</p> <p>x to delete the stash</p> <p>If the cursor is not on a stash, the mini-buffer prompts for the stash name.</p>"},{"location":"source-control/magit/status/","title":"Magit Status","text":"<p>Space g s runs Magit status, showing the status of the local git repository and any attached remote repositories.  Magit status is a full Git client and can run any Git commands.</p> <p>? shows all the command menus available for committing</p> <p>g r to refresh Magit status buffer</p> <p></p>"},{"location":"source-control/magit/status/#navigating-magit-status-buffer","title":"Navigating Magit Status buffer","text":"<p>j and k to move to next / previous line</p> <p>[ and ] jumps to next / previous section at the current level</p> <p>Tab to expand a section</p> <p></p>"},{"location":"source-control/magit/status/#using-magit-status-directly","title":"Using Magit status directly","text":"<p>If you run git status from a file that is not currently in a git project, magit will prompt you to create a git project, allowing you to select the root of the project directory</p> <ul> <li>confirm you want to create a git repository</li> <li>specify where to create the repository, the root directory for the git repository</li> </ul> <p> </p> <p>Create new project with magit-repository-directories configured</p> <p><code>magit-repository-directories</code> can be defined with with a collection of directories, used by helm pop-up menu will list the Git repositories within those directories rather than prompting to create a new repository. Type <code>.</code> as the selection to create a new repository with the current project.</p>"},{"location":"source-control/magit/status/#magit-dispatch","title":"Magit Dispatch","text":"<p><code>SPC g m</code> calls <code>magit-dispatch</code> which opens a transient menu with all the Magit commands found in Magit Status buffer.  Git commands can be run without the need of the Magit status buffer.</p> <p></p>"},{"location":"source-control/magit/status/#magit-status-fullscreen","title":"Magit Status Fullscreen","text":"<p>Magit status in fullscreen mode provides lots of space to work with changes, look at logs and compare diffs.</p> Keybinding Description q returns to previous window layout, keeping the Magit status buffer available. Space u q kills the magit status buffer and returns to previous layout <p>Magit fullscreen configured in Enhanced Clojure experience</p> <p>Magit fullscreen is already configured if you followed the Enhance Clojure experience.</p>"},{"location":"source-control/magit/status/#configure-fullscreen-for-magit-status","title":"Configure fullscreen for Magit Status","text":"<p>Add the <code>git-magit-status-fullscreen t</code> variable to the <code>git</code> layer in <code>.spacemacs</code> to enable Magit fullscreen.</p> <p>Space f e d opens the Spacemacs configuration file</p> <p>/ and start typing <code>configuration-layers</code> to search for the <code>dotspacemacs-configuration-layers</code> section.  Enter confirms the search text and n jumps to the next occurrence, N jumps to the previous occurrence.</p> <pre><code>   dotspacemacs-configuration-layers\n   '(\n     (git :variables\n          git-magit-status-fullscreen t)\n    )\n</code></pre>"},{"location":"source-control/magit/status/#reload-the-configuration-or-restart-spacemacs","title":"Reload the configuration or Restart Spacemacs","text":"<p>For the changes to take effect, either reload the <code>~/.spacemacs</code> configuration using</p> <p>Space f e R to reload the Spacemacs configuration or Space q r to restart Spacemacs.</p>"},{"location":"source-control/magit/tag-commit/","title":"Tag a commit","text":"<p>Tag a commit adds a label to a specific commit, often used to identify a significant event, e.g. a specific release.</p>"},{"location":"source-control/magit/tag-commit/#tagging-via-the-git-log","title":"Tagging via the Git log","text":"<p>The simplest way to tag an existing commit is to use the Git log.</p> <p>Space g s to open Magit status</p> <p>l l to show the log, using j k to navigate down and up the log history</p> <p>t t to tag the current commit</p>"},{"location":"source-control/magit/tag-commit/#tagging-via-magit-status","title":"Tagging via Magit status","text":"<p>Space g s to open Magit status</p> <p>t to open the tag menu</p> <p>t to create the tag</p>"},{"location":"source-control/magit/tag-commit/#tag-options","title":"Tag options","text":"<p>Tags can be a commit tag or an annotation on an existing commit</p>"},{"location":"source-control/magit/tag-commit/#pushing-tags","title":"Pushing tags","text":"<p>P to open the push menu</p> <p>t to push all tags, T to push a tag</p> <p>p to push to the default push repository, e to select a repository to push the tag too.</p>"},{"location":"source-control/magit/timemachine/","title":"Git Timemachine","text":"<p>Space gt opens the Git Timemachine transient state.</p> <p>Easily navigate backwards and forwards through the commit history of a file under Git Version Control. The buffer shows the file as it was in each change you select.</p> <p></p> <p>Positioning the buffer content</p> <p>Timemachine seems to work best when you have all the text visible in a buffer or you roughly know where the changes are in the file as you move between commits.</p> <p>Use the following keys to navigate through all the commits for the current file</p> Keybinding Description c Show the most recent commit for the file g<code>g</code> Go to nth commit p<code>p</code> Show previous commit n<code>n</code> Show next commit t<code>t</code> Go to revision by selected commit message w<code>w</code> Copy the abbreviated hash of the current commit W<code>W</code> Copy the full hash of the current commit q<code>q</code> Exit Timemachine transient state"},{"location":"source-control/magit/timemachine/#customise-timemachine","title":"Customise Timemachine","text":"<p><code>SPC SPC customize [git-timemachine]</code>.</p> <p></p>"},{"location":"source-control/magit/version-highlighting/","title":"Highlight Version Control Changes","text":"<p>Fringe markers show the difference between the working copy and the last commit.  As you add code or refactor, the lines that you change are marked in the fringe.</p> <p><code>SPC T d</code> toggles git fringe marks to indicate changes between working copy and latest commit.  Default is off.</p> <p></p> <p>To display fringe marks by default, add the following to the <code>dotspacemacs-configuration-layers</code> in your <code>.spacemacs</code> file</p> <pre><code>     (version-control :variables\n                      version-control-diff-tool 'diff-hl\n                      version-control-global-margin t)\n</code></pre> <p>See version control layer configuration  for other options.</p>"},{"location":"source-control/magit/version-highlighting/#highlighting-with-smeargle","title":"Highlighting with Smeargle","text":"<p><code>SPC g H</code> toggle smeargle overlays showing historic changes based on time, with the oldest unchanged lines greyed out the most.  Default is off.</p> <p>Smeargle is a package that provides highlighting regions by last updated time. Older changes have a opaque white background and newer regions have a darker background.  This is supposed to help you just focus on newer changes, as older changes are subtly faded into the background.</p> <p></p>"},{"location":"source-control/magit/version-highlighting/#smeargle-transient-state","title":"Smeargle Transient State","text":"<p><code>SPC g r</code> enters Smeargle transient state</p> <p></p> <p>TODO: describe the benefit of this transient state.</p> <p>https://github.com/syl20bnr/spacemacs/tree/develop/layers/%2Bsource-control/version-control#smerge-mode-transient-state</p>"},{"location":"source-control/magit/forge/","title":"Magit Forge - issues, PRs and forking","text":"<p>Magit Forge connects to the GitHub &amp; GitLab via their open APIs, collectively referred to as forges.</p> <p>Topics (the collective name for issues and pull requests) from a repository can be created, edited, commented upon and assigned to people.</p> <p>Magic Forge uses the APIs of these forges to manage issue and pull requests, collectively referred to as topics.</p> <p><code>@ a</code> to add a repository from the current project to a local database, to cache a list of topics (issues and pull requests) from a remote repository.</p> <p>Issues, pull requests and forks can be created on a remote repository, once the repository has been added to the local dictionary.</p> <p><code>@</code> opens the forge menu from the Magit Status buffer, <code>, g s</code>, and therefore requires a local Git repository.</p> <p> </p> <p>Forge Configuration required</p> <p>Create an encrypted <code>.authinfo.gpg</code> file for connection details of each forge used before using the Magit Forge commands.</p>"},{"location":"source-control/magit/forge/add-repository-to-database/","title":"Add repository to Magit Forge database","text":"<p>Use Magit Forge commands from the Magit Status buffer, <code>SPC g s</code>.</p> <p>Add each remote repository to the local forge database to manage topics (issues and pull request).</p> <p><code>@ f f</code> updates the Magit Forge database with all topics and available branches. Update the database before creating new issues or pull requests to ensure Magit Forge has the right information.</p> <p>Magit Forge caches all topics in the a local database providing an efficient way to work with lists of issues and pull requests.</p>"},{"location":"source-control/magit/forge/add-repository-to-database/#add-a-remote-repository","title":"Add a remote repository","text":"<p>Each repository used for issues or pull requests should be added as a remote, then a Magit Forge database can be added for that repository.</p> <p><code>SPC g s</code> to enter Magit Status</p> <p><code>M</code> to view the remote repositories currently added to the local git repository</p> <p><code>a</code> to add a new repository, specifying the alias name (<code>git --origin alias-name</code>)</p>"},{"location":"source-control/magit/forge/add-repository-to-database/#add-a-database-for-a-repository","title":"Add a database for a repository","text":"<p>Add each repository to the forge database before running other forge commands.</p> <p><code>@ a</code> to add a remote repository to the forge database, defaulting to the URL of the current remote repository for the project.</p> <p> </p> <p>When prompted, confirm download all the issue and pull request information.</p> <p>Magit Forge actions required the repository in database</p> <p> </p> List repositories in Magit Forge database <p><code>@ l r</code> lists all the remote repositories that have been added to the Magit forge database. <code>RTN</code> on the repository name opens the Magit Status buffer for that repository.  </p> Fork a remote adds the fork to the Magit Forge database <p><code>@ c f</code> will create a fork of the current remote repository and automatically adds the new fork repository to the Magit forge database</p>"},{"location":"source-control/magit/forge/add-repository-to-database/#changing-remotes-in-magit-forge","title":"Changing remotes in Magit Forge","text":"<p><code>@ r</code> switches between forks where multiple have been added to the forge database, e.g. a fork of an open source project that contributions are to be made via pull request.</p> <p>Switch to the repository that you intend to work with before updating topics or creating a pull request.</p> <p> </p>"},{"location":"source-control/magit/forge/add-repository-to-database/#fetching-topics","title":"Fetching topics","text":"<p><code>@ f f</code> will fetch issues and pull requests based on the <code>forge-topic-list-limit</code>.</p> <p>The list of issues and pull requests will show in the Magit Status buffer.</p>"},{"location":"source-control/magit/forge/forks/","title":"Create a remote repository or fork","text":"<p>Fork of a Git project already cloned locally, e.g. to create a pull request and contribute back to an open source project.</p> Only GitHub is supported"},{"location":"source-control/magit/forge/forks/#fork-a-cloned-repository","title":"Fork a cloned repository","text":"<p><code>SPC g c</code> will clone a remote repository and prompts for a name or URL</p> <p><code>SPC g s</code> to open Magit Status</p> <p><code>@ c f</code> to create a remote fork,</p> <p>Select or type in the name of the GitHub user or organisation account in which the fork of the repository should be created.</p> <p> </p> <p>Confirm the name of the alias for the forked repository (the name used as the push/pull default)</p>"},{"location":"source-control/magit/forge/forks/#configure-owned-accounts-and-organisations","title":"Configure owned accounts and organisations","text":"<p>Include the accounts owned to have the names pre-filled when selecting where to create repositories, i.e. when creating a fork.</p> <p>Define accounts and organisations in which a fork can be create using the <code>forge-owned-accounts</code> setting.</p> Spacemacs Configuration - dotspacemacs/user-config<pre><code>(setq forge-owned-accounts '((\"practicalli\" \"practicalli-john\" )))\n</code></pre> <p>Define accounts and organisations that should not be included, overriding matching items in the <code>forge-owned-accounts</code> setting.</p> Spacemacs Configuration - dotspacemacs/user-config<pre><code>(setq forge-owned-blacklist '((\"bad-hacks\" \"really-bad-hacks\")))`\n</code></pre> <p>Practicall Spacemacs Config</p> <p>practicalli/spacemacs-config repository contains these settings. <pre><code>;; GitHub user and organisation accounts owned\n;; used by @ c f  to create a fork\n(setq forge-owned-accounts\n      '((\"practicalli\" \"practicalli-john\"\n         \"ClojureBridgeLondon\" \"ldnclj\"\n         \"clojure-hacks\")))\n\n;; Blacklist Forge accounts\n;; - over-rides forge-owned-accounts\n;; (setq forge-owned-blacklist\n;;       '((\"bad-hacks\" \"really-bad-hacks\")))\n</code></pre></p>"},{"location":"source-control/magit/forge/issues/","title":"Forge Issue management","text":"<p>Issues can be viewed, created and updated, providing full synchronisation between Emacs and the remote GitHub / GitLab service.</p>"},{"location":"source-control/magit/forge/issues/#view-issues-list","title":"View issues list","text":"<p>@ l i opens a buffer with a list of issues with the most recent at the top.  Issue labels also show in the list using the the color assigned on GitHub.</p> <p> </p> <p>In the issue list buffer:</p> <p>o  opens the list in the default browser</p> <p>j  to navigate down, k  to navigate up the list</p> <p>q  to quit and close the buffer</p> Configure number of open and closed items shown <p><code>(setq  forge-topic-list-limit '(100 . 0))</code> added to the <code>dotspacemacs/user-config</code> section of <code>.spacemacs</code> hides all closed issues and pull requests from the list, showing up to 100 open items from each.</p> <p><code>(setq  forge-topic-list-limit '(100 . -10))</code> and use <code>SPC SPC forge-toggle-closed-visibility</code> to toggle showing 10 of the latest closed topics for issues and pull requests.</p> <p>practicalli/spacemacs.d configuration contains this setting.</p>"},{"location":"source-control/magit/forge/issues/#create-an-issue","title":"Create an issue","text":"<p>@ c i to create a new issue on the current repository.</p> <p>A new buffer is displayed to write the issue details (issue post).</p> <p> </p> <p>, , or Z Z to create the issue and push it to the remote repository.</p> <p>, k or Z Q to cancel the issue.</p> <p>A newly created issue is added to the top of the Issues list in the Magit status buffer.</p>"},{"location":"source-control/magit/forge/issues/#view-issue","title":"View Issue","text":"<p><code>RET</code> on the issue opens the issue and shows the details.</p> <p></p> <p>Related issues are shown as a link, <code>RET</code> on the link opens the related issue in the browser.</p> <p>Markdown support</p> <p>Pull Request descriptions will use markdown when displayed in GitHub.</p> <p>tripple backtic <code>`` for code / key highlighting,</code>#<code>for headings,</code>---<code>for horizontal lines,</code>- [ ]` for list item</p> <p> </p>"},{"location":"source-control/magit/forge/issues/#update-an-issue","title":"Update an issue","text":"<p>@ l i to list the current issues (@ f f  to update the topics if the issue is not listed)</p> <p>In the issue list buffer, navigate (j, k) to the issue to be edited.</p> <p>Enter to open the issue in its own buffer</p> <p>j, k` to navigate to each section of the issue (title, assignee, label, mark, description, comments)</p> <p>, e or <code>C-c C-e</code> to edit the current section of the issue.</p> <p>For title, assignee, label and mark a prompt shows in the mini-buffer.  Enter a value and press <code>RET</code></p> <p>For description and comments a separate buffer opens with editable text.</p> <p>, , or Z Z  to save changes and push them to the remote repository. , k or Z Q  to cancel changes and return to the issue.</p> <p>As soon as a value or text is saved, a request is sent to the remote forge to update the issue.</p> <p>q to close the issue and issue list buffers.</p> <p>This approach works for other topics types also, e.g. pull requests.</p>"},{"location":"source-control/magit/forge/pull-requests/","title":"Forge Pull Requests","text":"<p>Create a pull request on GitHub or GitLab within the comfort of Spacemacs, using all the usual editor tools to write pull request descriptions.</p> <p>Magit Forge will use a Pull Request template if one is added to the repository.</p>"},{"location":"source-control/magit/forge/pull-requests/#create-a-pull-request","title":"Create a pull request","text":"<p>Assumes you have a fork and original repository as remotes added to the local git repository.</p> <p>Create a branch on the fork with a descriptive name of the change you want to submit as a pull request.  Commit changes to that new branch.</p> <p>P p to push the change to the remote repository for the fork.</p> <p>@ to open the forge menu from the Magit Status buffer.</p> <p>r to select the repository that the pull request will be created on (eg. the upstream repository, not the fork).</p> <p> </p> <p>@ c p<code>c p</code> to create a new pull request.</p> <p>Select the source repository, the branch that contains the changes for the pull request.</p> <p> </p> <p>Select the target repository, the remote repository branch that changes will be pulled into (if the PR is merged).</p> <p> </p> <p>The pull request post opens in a new buffer, using the pull request template if defined for the repository</p> <p> </p> <p>, , or Z Z to confirm the message and create the pull request on the upstream repository.</p> <p>, k or Z Q to cancel the pull request.</p>"},{"location":"source-control/magit/forge/pull-requests/#create-a-draft-pull-request","title":"Create a draft pull request","text":"<p>A pull request can be marked as a draft when created by Magit Forge, to communicate that the PR is not ready for review or approval.</p> <p>With the pull request buffer opened, add yaml style front matter to the to define the PR as a draft.</p> <pre><code>---\ndraft: true\n---\n</code></pre> <p><code>, d</code> when viewing the pull request will toggle the draft status of the pull request.</p>"},{"location":"source-control/magit/remote-repositories/","title":"Working with Remote Repositories","text":"<p>Magit provides tools for working with remote repositories</p> <ul> <li>add a remote repository to a local repository</li> <li>clone remote repositories</li> <li>checkout remote branches and track them, including the branch of a pull request</li> <li>pull commits</li> <li>push commits</li> </ul> <p>Magit Forge can also create and fork a remote repository, as well as manage issues and pull requests.</p>"},{"location":"source-control/magit/remote-repositories/#demo-create-a-local-git-repository-and-add-a-github-remote","title":"Demo - Create a local Git Repository and add a GitHub remote","text":"<p>Adding a remote repository starts at 3 minutes and 50 seconds into this video. --&gt;</p> <p>{% youtube %} https://www.youtube.com/embed/AdEOazt1rD0</p>"},{"location":"source-control/magit/remote-repositories/add-remote/","title":"Add remote repository to local repository","text":"<p>Open Magit status using <code>SPC g s</code>.</p> <p><code>M</code> opens the Remotes menu, showing a popup list of actions</p> <p></p> <p><code>a</code> prompts for the remote name, e.g. origin or the name of the GitHub/GitLab account or organisation</p> <p>Followed by a prompt for the URL of the repository, e.g. a github / gitlab address.</p> <p>The final prompt asks to set this new remote as the default, saying yes adds this to the <code>P</code> push menu.</p>"},{"location":"source-control/magit/remote-repositories/add-remote/#update-remote","title":"Update remote","text":"<p><code>C</code> to configure a remote, a prompt lists the existing remotes by their name</p> <p><code>C-j</code> / <code>C-k</code> to navigate the list of remote names, <code>RET</code> to select the remote to configure</p> <p>The current configuration of the remote is displayed</p> <p></p> <p><code>u</code> to change the URL used for the remote (i.e. if the remote has been renamed or a different remote is required)</p> <p><code>U</code> to change the branch and references to fetch (refspec)</p> <p><code>s</code> to set the url used for fetching from the remote, bound to the</p> <p><code>S</code> refspec used when pushing to the remote</p> <p><code>O</code> set to --tags and all tags are fetched or <code>--no-tags</code> then no tags are fetched</p> <ul> <li>Magit Manual: Remote Git Variables</li> </ul>"},{"location":"source-control/magit/remote-repositories/checkout-remote-branch/","title":"Magit checkout remote branches","text":"<p>Git works with local branches.  Local branches can be pushed to a shared repository (GitHub, GitLab, Bitbucket, etc.).</p> <p>When checking out a remote branch, Magit will create a local tracking branch which is automatic checked out.  Changes can then be committed to this local tracking branch. Push the local tracking branch to the remote repository to share the new commits.</p>"},{"location":"source-control/magit/remote-repositories/checkout-remote-branch/#checkout-local-tracking-branch-for-a-remote-branch","title":"Checkout local tracking branch for a remote branch","text":"<p><code>SPC g s</code> calls <code>magit-status</code> and opens the Magit Git Status buffer</p> <p><code>b</code> opens the branch menu in the magit status buffer</p> <p><code>l</code> creates a local tracking branch with the unqualified name of the remote branch</p> <p>e.g. if the remote branch is called <code>practicalli/cli-alias-updates</code> then the local tracking branch is called <code>cli-alias-updates</code></p> <p>Magit Status buffer should now show the local branch, e.g. <code>cli-alaiases-updates</code>, as the Head reference.</p>"},{"location":"source-control/magit/remote-repositories/checkout-remote-branch/#using-magit-command-line","title":"Using Magit command line","text":"<p><code>! !</code> opens a Git command line in the Magit status buffer</p> <p></p> <p>Run the Git <code>checkout</code> command using the <code>--track</code> option to create a local branch with the same name as the remote branch.</p> <pre><code>git checkout --track practicalli/cli-alias-updates\n</code></pre> <p>Magit Status buffer should now show the local branch as the Head reference.</p>"},{"location":"source-control/magit/remote-repositories/clone/","title":"Clone remote repositories","text":"<p>Magit can clone repositories from GitHub and GitLab.</p> <p><code>SPC g c</code> (<code>magit-clone</code>) to clone a remote repository, specifying how the remote repository will be referenced</p> <p><code>u</code> to use the full URL, <code>git@github.com:practicalli/spacemacs.git</code> or the simpler name <code>practicalli/spacemacs</code></p> <p>A prompt is displays to define the path where the remote repository should be cloned too.</p> <p><code>C-left-arrow</code> and <code>C-right-arrow</code> to navigate the path without changing it.  <code>RET</code> to confirm the path.</p> <p>If the remote repository is not from your own GitHub account or an Organisation you are part of, a prompt asks if you wish to create a fork of the project.  <code>y</code> will create a fork in your GitHub/GitLab account</p> <p>Forks can only be created on a user account, there is no option to select an organisation in which to create a fork</p> <p>The remote repository is cloned to the specified location.</p> <p><code>y</code> at the final prompt will set the remote repository as the default push destination (shown when using <code>P</code> from Magit Status).</p>"},{"location":"source-control/magit/remote-repositories/clone/#hintcreate-and-fork-repositories","title":"Hint::Create and Fork repositories","text":"<p>Magit forge can be used to create and fork repositories on GitHub and GitLab</p>"},{"location":"source-control/magit/remote-repositories/clone/#update-the-remote-name","title":"Update the remote name","text":"<p>The remote is added with the name <code>origin</code>, which is not particularly descriptive (and in a distributed world, not necessarily accurate)</p> <p>Changing the remote to use a specific name, i.e. the account or org from which it was cloned, makes it easier to know where changes are located.</p> <p><code>M</code> in Magit Status shows the details of the remote repositories.</p> <p><code>r</code> to rename a selected remote, showing a list of available remotes. <code>C-j</code> and <code>C-k</code> to navigate the list of remotes</p>"},{"location":"source-control/magit/remote-repositories/clone/#opening-files","title":"Opening files","text":"<p>Whilst still in Magit Status buffer, Spacemacs knows you are in the project that has been cloned.</p> <p><code>SPC p f</code> will list all the files from the cloned repository, simplifying the navigation to the project.</p> <p>If a file is not opened from the project, <code>q</code> to leave the Magit Status buffer will return to a buffer that is not in the current project, so use <code>SPC f f</code> and navigate to the location of the cloned repository.</p>"},{"location":"source-control/magit/remote-repositories/clone/#pushing-pulling-changes","title":"Pushing / Pulling changes","text":"<p><code>P p</code> pushes local commits and is set to the fork if you created one after the clone, otherwise its the cloned repository</p> <p><code>F u</code> pulls remote commits from the cloned repository (upstream)</p> <p>See Pull Changes and Push Changes for more details.</p>"},{"location":"source-control/magit/remote-repositories/configure-default-push/","title":"Configure default push remote branch","text":"<p>The first time you pull changes from a repository, or clone via Magit, a prompt in the mini-buffer asks if the current remote branch should be used as the default remote repository to push to.</p> <p><code>P p</code> will push changes to the default push remote repository.  A list of remotes is shown if no default remote is set.</p> <p></p>"},{"location":"source-control/magit/remote-repositories/configure-default-push/#changing-the-default-remote","title":"Changing the default remote","text":"<p>The default push remote can be selected from remote repositories added as a remote, by cloning or using the <code>M</code> remote menu in the Magit Status buffer.</p> <p><code>P</code> to open the push menu</p> <p><code>C</code> to open the configuration of the local repository</p> <p></p> <p><code>P</code> to toggle the default upstream branch between remotes</p> <p><code>u</code> to add a new upstream branch as the default, showing a list of all possible remote branches.</p> <p><code>RTN</code> to choose a branch</p> <p><code>G-g</code> to close the configuration menu.  Then either <code>u</code> to pull from the new default upstream branch, or <code>C-g</code> to exit the pull menu.</p>"},{"location":"source-control/magit/remote-repositories/configure-default-upstream/","title":"Configure default upstream remote branch","text":"<p>The first time you pull changes from a repository (or if cloning via Magit), the default upstream remote and branch is set.</p> <p><code>F u</code> will pull all the changes from the default upstream remote branch.</p> <p></p>"},{"location":"source-control/magit/remote-repositories/configure-default-upstream/#changing-the-default-remote","title":"Changing the default remote","text":"<p>To change the default upstream, first unset the default value and then add a new default.</p> <p><code>F</code> to open the pull menu</p> <p><code>C</code> to open the configuration of the local repository</p> <p></p> <p><code>u</code> to unset the default upstream branch (removed the description too)</p> <p><code>u</code> to add a new upstream branch as the default, showing a list of all possible remote branches.</p> <p><code>RTN</code> to choose a branch</p> <p><code>G-g</code> to close the configuration menu.  Then either <code>u</code> to pull from the new default upstream branch, or <code>C-g</code> to exit the pull menu.</p>"},{"location":"source-control/magit/remote-repositories/pull-changes/","title":"Pull Changes","text":"<p>Commits can be pulled or fetched from remote repositories.</p> <p><code>SPC g s</code> to open Magit Status buffer</p> <p><code>F</code> to open the pull menu</p> <p><code>u</code> to pull from the upstream remote repository.  If this is not currently set, then a prompt appears to select the default upstream.</p> <p>Use <code>e</code> to pull from a different repository.</p>"},{"location":"source-control/magit/remote-repositories/pull-changes/#hintensure-you-are-on-the-correct-local-branch","title":"Hint::Ensure you are on the correct local branch","text":"<p>The current local branch is shown at the top of the Magit Status buffer. <code>b b</code> displays a popup to select a different branch if you are not on the correct branch to pull changes into.</p>"},{"location":"source-control/magit/remote-repositories/pull-changes/#rebase-when-pull","title":"Rebase when pull","text":"<p><code>SPC g s</code> to open Magit Status buffer</p> <p><code>F</code> to open the pull menu</p> <p><code>r</code> rebase changes that are not on the remote repository.</p> <p><code>u</code> to pull from the upstream remote repository.  If this is not currently set, then a prompt appears to select the default upstream.</p>"},{"location":"source-control/magit/remote-repositories/pull-changes/#rebase-local-commits","title":"Rebase local commits","text":"<p><code>SPC g s</code> to open Magit Status buffer</p> <p><code>F</code> to open the pull menu</p> <p><code>-r</code> rebase local changes that are not on the remote repository.</p> <p><code>u</code> to pull from the upstream remote repository.  If this is not currently set, then a prompt appears to select the default upstream.</p> <p>If there are conflicts between the commits on the remote and local repositories then use the ediff tool or edit the files and delete the conflict markers and resolve conflicting text change.  Save the change and <code>r</code> to resume the rebase.</p>"},{"location":"source-control/magit/remote-repositories/push-changes/","title":"Push Changes","text":"<p>Commits can be pushed to a remote repository using Magit Status buffer.</p> <p><code>SPC g s</code> to open Magit Status buffer</p> <p><code>P</code> to open the pull menu</p> <p><code>u</code> to pull from the upstream remote repository.  If this is not currently set, then a prompt appears to select the default upstream.</p>"},{"location":"source-control/magit/remote-repositories/push-changes/#hintensure-you-are-on-the-correct-local-branch","title":"Hint::Ensure you are on the correct local branch","text":"<p>The current local branch is shown at the top of the Magit Status buffer. <code>b b</code> displays a popup to select a different branch if you are not on the correct branch to pull changes into.</p>"},{"location":"source-control/magit/remote-repositories/push-changes/#push-options","title":"Push options","text":"<p>Changing the local history with a commit amend, extend, reword, rebase or squash will prevent changes being pushed to a remote repository that has the original history unchanged.</p> <p>Magit will show <code>Unpulled from</code> and <code>Unpushed to</code> sections when the local and remote histories are different.</p> <p></p> <p>The push menu has the <code>-f</code> switch to force a push with a lease (the recommended force type).</p>"},{"location":"source-control/magit/remote-repositories/push-changes/#hintfix-rather-than-force","title":"Hint::Fix rather than Force","text":"<p>Pushing a new commit that fixes an issue is usually preferable than re-writing history and forcing a push when working on a shared repository.</p> <p>Communicate clearly in advance and get agreement from other contributors if a force is the only option.</p>"},{"location":"source-control/magit/remote-repositories/push-changes/#pushing-changes-to-an-open-pull-request","title":"Pushing changes to an open pull request","text":"<p>{% youtube %} https://youtu.be/gwFGSVtFrgQ</p>"},{"location":"source-control/magit/remote-repositories/try-pull-requests/","title":"Try Pull Requests with Magit","text":"<p>Magit provides an easy way to try out pull requests from remote repositories, e.g. Github, Gitlab.</p> <p><code>SPC g s</code>  to open Magit in the git project the current file belongs to.  A popup displays selector displays if the current buffer is not part of a Git project.</p> <p><code>b y</code>  in Magit will popup the current list of pull request from the git project.  Selecting a pull request will open git a local branch for that pull request.  You can now test all the changes you wish.</p> <p>Once you are done, you can go back to magit with <code>SPC g s</code> and change back to your previous local branch with <code>b b</code>.</p> <p>So Magit provides a quick and simple way to collaborate with other developers.</p>"},{"location":"source-control/magit/remote-repositories/try-pull-requests/#checking-out-a-pull-request-from-the-spacemacs-project","title":"Checking out a Pull Request from the Spacemacs project","text":"<p>Here is a simple example of using Magit to try out a pull request from the Spacemacs project from within Spacemacs itself.</p> <p>{% youtube %} https://youtu.be/t8tEzJ1RnW0</p>"},{"location":"spacemacs-basics/","title":"Spacemacs Basics","text":"<p>Space opens the Which-key menu providing access to all Spacemacs commands via a mnemonic menu system</p> <p> </p> <p>, a context specific menu for the current major mode, i.e. With a Clojure file in the current buffer a Clojure specific menu is displayed</p> <p> </p> <p>Key combination guide</p> <p>Space means press the space bar and release</p> <p>A character by itself means press that key by itself, eg. <code>h</code> means press the h key</p> <p>Meta+m <code>M-m</code> means to hold the Meta key down and press the m key</p> <p>The Meta  key is typically Alt on Linux/PC, Opt on MacOSX</p> Holy mode (Emacs) Essential Key bindings <p>Meta m in Holy mode is the equivalent of Space in Evil (Vim) style editing</p> <p>Meta Enter opens the major mode menu (e.g. Clojure specific menu in clojure-mode), the equivalent of , in Evil.</p>"},{"location":"spacemacs-basics/#evil-for-multi-modal-editing","title":"Evil for Multi-modal editing","text":"<p>Gradually discover the power and pleasure of using Vim and modal editing, using different editing states for specific tasks and reducing your cognitive load and strain from key combinations.  The Vim Quick Reference will help you use Spacemacs more effectively.</p> <p>Migrating from Vim article to help those with Vim experience to get up to speed with Spacemacs.</p>"},{"location":"spacemacs-basics/#space-key","title":"Space key","text":"<p>All of the commands in Spacemacs are available through the Space bar menu.</p> <p>Space displays a mnemonic menu (<code>which-key</code>) to easily navigate through the multitude of functions you can call.</p> <p>Space Space displays a popup listing all Spacemacs commands, typing will start narrowing the list of commands using fuzzy logic, helping you find the right command quickly. This is equivalent to Meta x in Emacs.</p>"},{"location":"spacemacs-basics/#spacemacs-help-system","title":"Spacemacs Help system","text":"<p>Space h is the help menu to access all Spacemacs documenting and any information about Emacs itself, an important menu to support learning Spacemacs</p> <p>Spacemacs has a built in help system to help you find out what layers, commands and keybindings do.</p> <p>Every function has a description of how to use it as well as a link to its source code (in case you need more than the description).</p> <p>Many functions have a keybinding (keyboard short-cut) and you can also get a description of the keybinding.</p> Keybinding Action Space h Space Spacemacs documentation and layer guides Space h d f functions and description of selected function Space h d k keybindings and description of selected keybinding"},{"location":"spacemacs-basics/#online-help","title":"Online help","text":"<ul> <li>Spacemacs online documentation</li> <li>Spacemacs key bindings</li> <li>Spacemacs Quick Start guide</li> <li>Spacemacs Layers</li> <li>Practicalli Spacemacs YouTube playlist</li> <li>Spacemacs ABC video walk-through of features (a little dated but still mostly relevant).</li> </ul>"},{"location":"spacemacs-basics/emacs-basics/","title":"Emacs Basics","text":"<p>Understanding the basic terminology will help make the most out of Spacemacs and allow very effective use.</p> <p></p> Terminology Description File A file on the file system Buffer A container to display a file or other information (file navigation, REPL, data inspector, test report, etc.) Window Contains a buffer, organises multiple buffers in a frame Frame Holds one or more windows. Opening another frame gives you another instance of Emacs Status bar Information about current window and buffer, e.g. window number, buffer mode &amp; name, location of cursor. Also referred to as the mode line. Mini-buffer A command line for Emacs - shows commands and some results, acts as an interactive prompt for some commands <p>Spacemacs also adds Layouts to manage a set of buffers within the scope of a project and Workspaces allow multiple window configurations</p>"},{"location":"spacemacs-basics/emacs-basics/#working-with-frames","title":"Working with Frames","text":"<p>By default, Spacemacs opens with a frame that contains a single window, that window containing the Spacemacs home buffer.</p> <p>Space F n creates a new frame containing a single window that contains a buffer.</p> <p>Space F d closes the current frame, unless its the last Emacs frame running, then Emacs itself closes.</p> <p>Space q q to quit Emacs closes all frames.</p>"},{"location":"spacemacs-basics/emacs-basics/#working-with-windows","title":"Working with windows","text":"<p>Each frame contains one or more windows. Each window is assigned a unique number when created, even across multiple frames.</p> <p>Space followed by a number jumps to the window with that number, e.g. Space 1 jumps to window number 1.</p> <p>Windows are used to display multiple buffers (files, REPL, error messages, etc) within the same frame</p> Key Binding Description Space w . Open Window transient state menu for multiple command Space w 2 2 window layout - shows current buffer in new window Space w 3 3 window layout - shows current buffer in new windows Space w m maximise the current buffer Space w d delete current window Space w g toggles golden ratio view of windows"},{"location":"spacemacs-basics/emacs-basics/#working-with-windows_1","title":"Working with windows","text":"<p>A buffer is the fundamental presentation of information in Emacs.  Buffers can show the contents of a file, search results in a helm-popup, an interactive process e.g. REPL buffer, etc.</p> <p>Space Tab toggles between the current buffer and the last active buffer</p> Key Binding Description Space b . Open buffer transient state menu for multiple command Space b b Show list of open buffers and recently opened buffers Space b d Kill current buffer Space b h Open Spacemacs Home buffer Space b m Open Spacemacs <code>*messages*</code> buffer - log of Emacs actions and commands Space b s Open Spacemacs scratch buffer - a persistent buffer for random note taking Space b w Toggle read-only mode on a buffer (Spacemacs Org docs open in Read-only mode by default) Space b x Kill buffer and the window containing it Space b R Revert buffer to file saved on disk (causes .dir-locals.el to load into Emacs) Space b Y Copy contents of a whole buffer"},{"location":"spacemacs-basics/emacs-basics/#golden-ratio","title":"Golden Ratio","text":"<p>Golden-ratio automatically lays out windows in a Fibonacci style pattern.  The active window becomes the largest window and all other windows are automatically shrunk so they are out of the way, but still visible.</p> <p></p>"},{"location":"spacemacs-basics/evil-g-menu/","title":"Evil G menu","text":"<p><code>g</code> in normal mode opens a menu of convenient utilities.  Practicalli uses this menu to comment existing lines, edit with multiple cursors, jumping to top or bottom of the buffer and joining lines together.</p> <p></p>"},{"location":"spacemacs-basics/evil-g-menu/#comment-lines-and-regions","title":"Comment lines and regions","text":"<p><code>g c c</code> will comment the current line using the buffer major mode comment character(s).  A prompt will ask if no comment character is set for the major mode.</p> <p><code>g c</code> with a selected region will comment all lines with the major mode comment character(s)</p>"},{"location":"spacemacs-basics/evil-g-menu/#multiple-cursors","title":"Multiple cursors","text":"<p><code>g r</code> is the menu for multiple cursors, allowing simultaneous editing at multiple points</p> <p><code>12 gr j</code> will add a cursor to the 12 lines below the current cursor, using the same position in the line.  Any edits are applied to all cursors.</p> <p><code>g r q</code> will quit multiple cursors, returning to just one cursor.</p>"},{"location":"spacemacs-basics/evil-g-menu/#jumping-around","title":"Jumping around","text":"<p><code>g g</code> jumps to the top of the buffer, <code>g G</code> to the bottom of the buffer</p> <p><code>g d</code> to jump to the source code of a function definition, <code>g D</code> to open that in a different window.</p>"},{"location":"spacemacs-basics/evil-g-menu/#moving-text-around","title":"Moving text around","text":"<p><code>g J</code> joins the next line to the current line.</p>"},{"location":"spacemacs-basics/evil-g-menu/#workspaces","title":"Workspaces","text":"<p><code>g t</code> to switch to next workspace, <code>g T</code> to switch to previous.</p>"},{"location":"spacemacs-basics/evil-g-menu/#changing-text-case","title":"Changing text case","text":"<p><code>g u</code> to change the current character or selection to lowercase, <code>g U</code> for uppercase.</p>"},{"location":"spacemacs-basics/evil-g-menu/#hinttoggle-case-with","title":"Hint::Toggle case with <code>~</code>","text":"<p><code>~</code> will toggle the case of the current character or selected region.</p>"},{"location":"spacemacs-basics/evil-z-menu/","title":"Evil Z menu","text":"<p><code>z</code> in normal mode opens a menu of convenient utilities</p> <p></p>"},{"location":"spacemacs-basics/evil-z-menu/#folding-code-comments-and-other-content","title":"Folding code, comments and other content","text":"<p>Code folding is very useful for hiding different levels of detail, for example you could hide everything but the function names in a namespace, showing just the API for that namespace.</p> <p>Comments and documentation can be folded to help you focus on a specific part of the content.</p> Keybinding Description <code>z a</code> toggle fold of code, comment, section, etc. <code>z c</code> close fold <code>z o</code> open fold <code>z O</code> open fold recursive (capital o) <code>z r</code> open folds <p>See narrowing for a focused approach to editing.</p>"},{"location":"spacemacs-basics/evil-z-menu/#scrolling","title":"Scrolling","text":"<p>Jump the current line to the center, top or bottom of the buffer. Evil equivalents of the Emacs <code>C-l</code> key bindings.</p> Keybinding Description <code>z b</code> scroll the current line to bottom of buffer <code>z t</code> scroll the current line to top of buffer <code>z z</code> scroll the current line to center of buffer <code>z ^</code> scroll top line to bottom <code>z +</code> scroll bottom line to top"},{"location":"spacemacs-basics/spell-checking/","title":"Spell checking in Spacemacs","text":"<p>The <code>spell-checking</code> layer provides 'on-the-fly' spell checking, highlighting incorrect spelling of words as you type.</p> <p><code>SPC S</code> is the spell check menu.</p> <p></p>"},{"location":"spacemacs-basics/spell-checking/#spell-check-the-current-word","title":"Spell check the current word","text":"<p><code>SPC S s RET</code> is a quick way to fix the spelling of the current word as most of the time the correct spelling is at the top of the list.</p> <p><code>SPC S s</code> checks the current word under the cursor.  A list of possible spellings displays in a popup.  Use <code>C-j</code>/<code>C-k</code> to navigate the spellings and <code>RET</code> to select the spelling to use.</p>"},{"location":"spacemacs-basics/spell-checking/#requirements","title":"Requirements","text":"<p>Add the <code>spell-checking</code> layer to the layer list in <code>~/.spacemacs</code>.</p> <p>The <code>spell-checking</code> layer uses the flyspell tool in Emacs and an external binary</p> <p>Install an external spell checking binaries that is supported by flyspell: ispell, hunspell, aspell.  On Unix systems this binary is probably installed already.</p>"},{"location":"spacemacs-basics/visual-select/","title":"Visual Select","text":"<p>Select characters, words, lines and regions with visual select.  The background changes color to visually indicate which text is selected</p> <p><code>v</code> enters visual select mode and can be with objects such as word <code>w</code> and locations such as end of line <code>$</code>.</p> <p><code>SPC v</code> to select a word, <code>v</code> to widen the selection, <code>V</code> to narrow, <code>r</code> to reset (cancel) the selection.</p> <p><code>o</code> to expand from left side of selection and <code>O</code> to expand from the right side of a selection, using the <code>hjkl</code> navigation keys</p>"},{"location":"spacemacs-basics/visual-select/#visual-line-selection","title":"Visual Line selection","text":"<p><code>V</code> to select by lines, using <code>j</code> and <code>k</code>.</p>"},{"location":"spacemacs-basics/visual-select/#visual-region-selection","title":"Visual Region selection","text":"<p><code>C-v</code> to select a region using the <code>hjkl</code> navigation keys.</p>"},{"location":"spacemacs-basics/visual-select/#iedit","title":"iedit","text":"<p><code>e</code> in visual select state starts iedit mode, highlighting all occurrences of the selection. Any change to the highlighted text is concurrently applied to all occurrences.</p> <p><code>ESC</code> or <code>fd</code> to end the iedit session.</p>"},{"location":"spacemacs-basics/evil/","title":"Evil for Vim Style Editing","text":"<p>Evil (extensible vi layer for Emacs) layer provides multiple editing states, multi-modal editing, simplifying keybindings by reducing the need for simultaneous key presses.</p> <p>Spacemacs provides Evil editing states and simplified keybindings throughout all layers and major modes.</p> <p></p> <ul> <li>normal - for manipulating and navigating existing text (default state)</li> <li>insert - for writing new text</li> <li>visual - for selecting blocks of text</li> <li>iedit - edit multiple regions simultaneously</li> <li>lisp - structural editing for Clojure &amp; Lisp style languages (e.g. slurp, barf)</li> </ul> <p>First get familiar with normal, insert and visual states.  Then when you are comfortable, move on to iedit and lisp states.</p> <p>Normal state by default</p> <p>Evil normal state should be used most of the time, unless writing lots of new code or text.</p>"},{"location":"spacemacs-basics/evil/#learn-vim-style-editing","title":"Learn Vim-style editing","text":"<p>Vim-style editing is arguably the most effective way to work with text, supporting changes as much through text manipulation as editing text.  Once practised, vim-style editing is far faster than uni-mode editing.</p> <p>The recommended way to learn vim style editing is to practice and ideally use it for everything you do.</p> <p>Space h T v starts the build in Vim tutorial.  This provides the basic movement of vim and provides an interactive way to practice your skills</p> <p>To help make Vim style editing become a sub-conscious act you should learn to speak Evil</p> <p>Vim Adventures is a web-based game that is an alternative to practising Vim.</p> <p></p>"},{"location":"spacemacs-basics/evil/#learning-resource-for-evil","title":"Learning resource for Evil","text":"<ul> <li>Spacemacs: Migrating from Vim</li> <li>Spacemacs Vim Cheatsheet</li> <li>Graphical Cheatsheet Tutorial</li> <li>Vim quick reference guide</li> <li>Vim Casts</li> <li>Editing as a power user - Vim to Spacemacs</li> <li>Vim versus Spacemacs</li> </ul> <p>A focused on learning Vim and understanding why its so powerful.  Transcript and exercises are also available.</p> <p> </p>"},{"location":"spacemacs-basics/evil/editing-states/","title":"Evil editing states","text":"<p>Each states allows keys to have different behaviour, helping minimise the cognitive load and quickly building muscle memory for very powerful actions.</p> Evil state Description normal manipulating and navigating existing text (default state) insert writing new text visual selecting regions of text iedit edit multiple regions simultaneously lisp structural editing for Clojure &amp; Lisp style languages (e.g. slurp, barf) <p>First get familiar with normal, insert and visual states.  Then when you are comfortable, move on to iedit and lisp states.</p>"},{"location":"spacemacs-basics/evil/editing-states/#hintnormal-state-by-default","title":"Hint::Normal state by default","text":"<p>Evil normal state should be used most of the time, unless you are writing code or creating lots of text.</p>"},{"location":"spacemacs-basics/evil/editing-states/#important-key-bindings","title":"Important key bindings","text":"<p><code>,</code> menu contains the major mode (e.g. Clojure) specific commands, organised mnemonically</p> <p><code>v</code> opens the visual state and allows you to selects text</p> <p><code>i</code>, <code>a</code>, <code>o</code>, <code>O</code> opens insert state and allows you to create type text</p> <p><code>SPC s e</code> opens iedit and selects all matching instances of the highlighted text for editing</p> <p><code>SPC k</code> opens Lisp state, allowing you to do structural editing</p>"},{"location":"spacemacs-basics/evil/editing-states/#hintrefactor-code-tools","title":"Hint::Refactor code tools","text":"<p>The Refactor section has further editing techniques and Clojure specific refactoring tools.</p>"},{"location":"spacemacs-basics/evil-tools/","title":"Evil tools","text":"<p>There are several Evil tools that add text manipulation features to your Vim style editing.</p> Keybinding Evil tool Description <code>SPC s e</code> iedit search and replace in multiple matches concurrently <code>g r</code> multiple cursors create multiple cursors for concurrent text editing <code>SPC n</code> narrowing limit the view of the current buffer (range, function definition) <code>C-c C-e</code> helm-ag project refactor by editing helm results of project searches"},{"location":"spacemacs-basics/evil-tools/#todoexpand-on-overview-provide-video-overview","title":"TODO::Expand on overview, provide video overview","text":""},{"location":"spacemacs-basics/evil-tools/helm-swoop/","title":"Helm-swoop","text":"<p>Helm-swoop provides an easy way to navigate through code, based on search results</p> <p>Search a buffer (Clojure namespace) or project and use the results to navigate to the locations in the code for each match found.</p> <p><code>SPC s s</code> to search using currently selected region, or prompts for search text if nothing selected.  <code>j</code> and <code>k</code> to navigate the search results and show the line in the file the search corresponds to.</p> <p><code>SPC s S</code> assumes word under cursor is the symbol you wish to search for.</p> <p>helm-swoop is also available in the symbol highlight transient menu.</p> Keybindings Description <code>SPC s C</code> clear helm-swoop own cache <code>SPC s s</code> execute helm-swoop <code>SPC s S</code> execute helm-multi-swoop <code>SPC s C-s</code> execute helm-multi-swoop-all <p>For example, navigate to a function definition and all the places that function is called in a project using helm-multi-swoop.</p> <p></p>"},{"location":"spacemacs-basics/evil-tools/helm-swoop/#hintrefactor-code","title":"Hint::Refactor code","text":"<p>Refactor section provides examples of using helm-ag, helm-swoop, iedit, narrowing and clj-refactor.</p>"},{"location":"spacemacs-basics/evil-tools/iedit-in-action/","title":"iedit in action","text":"<p>How to do things with iedit</p>"},{"location":"spacemacs-basics/evil-tools/iedit-in-action/#changing-multiple-occurrences","title":"Changing multiple occurrences","text":"<p>First select one instance of a character or word that occurs multiple times in the buffer.  This is typically done with visual mode, <code>v</code>.</p> <p><code>SPC s e</code> will highlight all occurrences and put you in iedit state.</p> <p>Any Vim style editing will change all occurrences.</p> <p><code>ESC</code> or <code>fd</code> will end iedit state and return to Vim normal state.</p>"},{"location":"spacemacs-basics/evil-tools/iedit-in-action/#editing-selections","title":"Editing selections","text":"<p>IEdit defaults to selecting all matches.</p> <p><code>C-;</code> in iedit state allows you to edit the selections.</p> <p>Once editing the selections, use <code>n</code> to jump to next word/region and <code>N</code> to the previous.</p> <p><code>M-;</code> will toggle the selection of the current word/region.</p> <p>iedit and narrowing</p> <p>iedit selects all occurrences in a buffer.  If you only want to change one part of the text (or a specific function), then you can narrow to just edit that specific region. See narrow for more details</p>"},{"location":"spacemacs-basics/evil-tools/iedit-in-action/#iedit-a-function","title":"iedit a function","text":"<p>In iedit state you can:</p> <p><code>F</code> to limit the scope to the current function <code>L</code> to limit the scope to the current line <code>J</code> to increase the scope (starting from the current line) one line below <code>K</code> to increase the scope one line above</p> <p>Navigate between the occurrences with <code>n</code> and <code>N</code> and <code>TAB</code> to remove an occurrence.</p>"},{"location":"spacemacs-basics/evil-tools/iedit-in-action/#iedit-replace-multiple-words","title":"iedit - replace multiple words","text":"<ul> <li>manual selection of several words then replace:</li> </ul> <p><code>v w w SPC s e S \"toto\" ESC ESC</code></p> <ul> <li> <p>append text to a word on two lines: <code>v i w SPC s e J i \"toto\" ESC ESC</code></p> </li> <li> <p>substitute symbol /with expand-region/: <code>SPC v v e S \"toto\" ESC ESC</code></p> </li> <li> <p>replace symbol with yanked (copied) text /with expand region/: <code>SPC v    e p ESC ESC</code></p> </li> </ul>"},{"location":"spacemacs-basics/evil-tools/iedit-in-action/#iedit-example-multiple-find-and-replace","title":"iedit example - multiple find and replace","text":"<p>If you have text you want to edit in multiple places at the same time, rather than the traditional find/replace, you can select all the regions and use multiple cursors to edit all regions simultaneously.</p> <ul> <li>Put the cursor over the word you want to replace</li> <li><code>v</code> to enter visual (select) mode</li> <li><code>SPC v</code> to select word or region<ul> <li><code>v</code> increases the selected region</li> <li><code>V</code> to reduce selected region</li> </ul> </li> <li><code>e</code> for iedit state</li> <li><code>C-;</code> to edit selection<ul> <li><code>n</code> jump to next matching selected region</li> <li><code>p</code> jump to previous matching selected region</li> <li><code>M-j</code> deselect current region</li> <li><code>S</code> substitute text in all regions</li> <li><code>D</code> delete all selected regions</li> </ul> </li> </ul> <p>Space se matches all instances of a region under the cursor (iedit state)</p>"},{"location":"spacemacs-basics/evil-tools/iedit/","title":"Editing with Vim and iedit","text":"<p>Make multiple matching edits within a buffer</p> <p><code>SPC s e</code> to start <code>evil-iedit-state</code> to quickly edit multiple occurrences of a symbol within a buffer or selection. Use iedit with helm-ag to make multiple matching edits across a project.</p> <p><code>e</code> within visual state and symbol highlight transient state also enables iedit.</p>"},{"location":"spacemacs-basics/evil-tools/iedit/#common-usage","title":"Common usage","text":"<p><code>#</code> to select all the occurrences of a symbol or word, <code>e</code> to start iedit</p> <p><code>n</code> or <code>N</code> to jump between occurrences, <code>TAB</code> to deselect or re-select the specific occurrence</p> <p> </p>"},{"location":"spacemacs-basics/evil-tools/iedit/#refining-text-selection","title":"Refining text selection","text":"<p><code>SPC v</code> selects a word and <code>v</code> expands the selection.</p> <p>When a name is separated such as with kebab case, <code>-</code>, then <code>SPC v v v v</code> can select words-separated-by-dashes, with a <code>v</code> for each part of the word selection.  The same selection works with file paths and URL's.</p> <p>Narrowing, <code>SPC n</code>, limits the scope of iedit so only the relevant occurrences are changed and reduces the need to deselect unwanted occurrences.</p> <p><code>SPC n f</code> narrows the scope to a function, <code>SPC n r</code> narrows to a pre-selected range.</p>"},{"location":"spacemacs-basics/evil-tools/iedit/#iedit-state-key-bindings","title":"iedit state key bindings","text":"<p><code>iedit state</code> changes the behaviour of the following Evil normal state key bindings (every other normal state key binding remains the same)</p> Key Description <code>ESC</code> go back to normal state <code>TAB</code> toggle selection of current occurrence <code>0</code> go to the beginning of the current occurrence <code>$</code> go to the end of the current occurrence <code>#</code> prefix all occurrences with an increasing number (SPC u to choose starting number). <code>A</code> go to the end of the current occurrence and switch to iedit-insert state <code>D</code> delete the occurrences <code>F</code> restrict the scope to the function <code>gg</code> go to first occurrence <code>G</code> go to last occurrence <code>I</code> go to the beginning of the current occurrence and switch to iedit-insert state <code>J</code> increase the editing scope by one line below <code>K</code> increase the editing scope by one line above <code>L</code> restrict the scope to the current line <code>n</code> go to next occurrence <code>N</code> go to previous occurrence <code>p</code> replace occurrences with last yanked (copied) text <code>S</code> (substitute) delete the occurrences and switch to iedit-insert state <code>V</code> toggle visibility of lines with no occurrence <code>U</code> Up-case the occurrences <code>C-U</code> down-case the occurrences <p>Hint</p> <p><code>0</code>, <code>$</code>, <code>A</code> and <code>I</code> have the default Vim behavior when used outside of an <code>occurrence</code>.</p>"},{"location":"spacemacs-basics/evil-tools/iedit/#reference","title":"Reference","text":"<ul> <li>iedit GitHub project</li> <li>evil-iedit-state</li> </ul>"},{"location":"spacemacs-basics/evil-tools/multiple-cursors/","title":"Multiple Cursors","text":"<p>Create multiple cursors to edit in parallel multiple lines of text in the current buffer.</p> <p>Multiple cursors is especially useful where lines are not entirely identical, i.e. they have the same basic form but have different values</p> <p>Multiple cursors allows you to call all Emacs named functions and have the results output to each cursor you have created.</p>"},{"location":"spacemacs-basics/evil-tools/multiple-cursors/#hintiedit-or-multiple-cursors","title":"Hint::iedit or multiple cursors","text":"<p>iedit is excellent for all kinds of search and replace actions where the text to change is the same.  iedit finds all matches in a buffer or the scope created by narrowing.</p> <p>Where text lines do not match but have a similar form, multiple cursors allow for more irregular changes</p>"},{"location":"spacemacs-basics/evil-tools/multiple-cursors/#common-usage","title":"Common usage","text":"<p><code>g r</code> shows the menu for multiple cursors</p> <p><code>g r j</code> adds a cursor to the next line</p> <p><code>24 g r j</code> will create multiple cursors for 24 consecutive lines.</p> <p><code>g r I</code> adds cursors to visual selection lines, <code>S-v</code> and arrow keys, or <code>v 20 j</code> to select the next 24 lines</p>"},{"location":"spacemacs-basics/evil-tools/multiple-cursors/#hintusing-narrowing-to-constrain-where-cursors-are-created","title":"Hint::Using Narrowing to constrain where cursors are created","text":"<p><code>SPC n</code> menu allows you to narrow the view on the current buffer <code>SPC n f</code> narrows to the current function definition <code>SPC n r</code> narrows to a selected range of text</p> <p>See the section on Spacemacs - Narrowing</p>"},{"location":"spacemacs-basics/evil-tools/multiple-cursors/#keybindings","title":"Keybindings","text":"<p>The most commonly used key bindings for multiple cursors</p> Evil normal Description <code>g r j</code> creates a new cursor on the line below (adhoc changes) <code>g r k</code> create new cursor on the line above (adhoc changes) <code>g r I</code> create new cursor on selected lines <code>g r m</code> create cursors on all matching text (under cursor or region of selected text) <code>g r n</code> make a cursor at point and go to the next match <code>g r N</code> go to the next match without creating a cursor at current point <code>g r p</code> make a cursor at point and go to the previous match <code>g r P</code> go to the previous match without creating a cursor at current point <code>g r q</code> when you have finished to remove all cursors and leave just one cursor. <p><code>g r</code> shows the full menu</p> <p></p>"},{"location":"spacemacs-basics/evil-tools/multiple-cursors/#todoadd-video-of-most-commonly-used-features","title":"TODO::Add video of most commonly used features","text":""},{"location":"spacemacs-basics/evil-tools/multiple-cursors/#known-issues","title":"Known issues","text":"<ul> <li>Only named commands can be executed by multiple cursors.</li> <li>There could be a performance penalty when there are too many cursors (30+).</li> <li>Paste will not work when the Spacemacs paste transient state is enabled. This is due to the fact that evil-paste-pop and evil-paste-pop-next commands are not supported.</li> <li>evil-repeat works only for some commands. In particular it doesn\u2019t work for delete. It will also interfere with the cursor positions during an undo or redo operation.</li> </ul>"},{"location":"spacemacs-basics/evil-tools/multiple-cursors/#reference","title":"Reference","text":"<ul> <li>multiple cursors layer - Spacemacs develop documentation</li> <li>evil-mc - default backend for multiple cursors layer</li> <li>evil-multiedit - used in Doom Emacs</li> </ul>"},{"location":"spacemacs-basics/evil-tools/narrowing/","title":"Narrowing - very selective editing","text":"<p>Narrowing displays just a part of the current buffer you are working with, allowing you to carry out some very specific editing.</p> <p></p> <p>Typical uses are to select a region or a function definition to narrow on.</p> <p>For example, you may have two Clojure functions that use the same local name in a <code>let</code> statement.  The local name is used a number of times and you want to rename it.  By narrowing on to just that function, you can change the local names all at once without affecting the other function definition.</p>"},{"location":"spacemacs-basics/evil-tools/narrowing/#example-narrowing-and-multiple-replace","title":"Example: Narrowing and multiple replace","text":"<p>In this example I narrow my 100-days-of-code log to just edit a single day of the log and use iedit to manage a multiple replace on just the text for that day.</p> <p>{% youtube %} https://www.youtube.com/watch?v=4bVMXXxPiQs</p>"},{"location":"spacemacs-basics/evil-tools/replacing-text-across-projects/","title":"Replacing text across projects","text":"<p>If you have <code>ripgrep</code>, <code>ag</code> (silver searcher), <code>pt</code> or <code>ack</code> installed, replacing an occurrence of text in several files can be performed via helm-ag.</p>"},{"location":"spacemacs-basics/evil-tools/replacing-text-across-projects/#example","title":"Example","text":"<p>To replace all <code>foo</code> occurrences by <code>bar</code> in your current project:</p> <p><code>SPC /</code> followed by a search pattern, which displays a helm popup showing all matching text across all your project files</p> <p><code>C-c C-e</code> opens a new buffer with all the search results, which you can edit.</p> <p><code>SPC s e</code> on a selected piece of text will highlight all occurrences in the search results and allow you to change them all concurrently.</p> <p><code>ESC</code> or <code>fd</code> to leave iedit state (twice if in Evil insert mode).</p> <p><code>C-c C-c</code> to commit the changes you have just made, which will automatically update all the files in your project with these changes.  <code>C-c C-k</code> if you want to cancel your changes instead.</p>"},{"location":"spacemacs-basics/evil-tools/replacing-text-across-projects/#todoadd-animated-gif-video-example","title":"TODO::Add animated gif / video example","text":""},{"location":"spacemacs-basics/evil-tools/replacing-text-across-projects/#hint","title":"Hint::","text":"<p><code>helm-ag</code> despite its name works with all the search tools, except for <code>grep</code></p>"},{"location":"spacemacs-basics/vim-style/common-evil/","title":"Common Tasks using Evil vim-style editing","text":""},{"location":"spacemacs-basics/vim-style/common-evil/#copy-cut-paste","title":"Copy Cut Paste","text":"<p>Copy, cut and paste commands use the Emacs kill-ring, which maintains a complete history of values cut or copied since Emacs was started.</p>"},{"location":"spacemacs-basics/vim-style/common-evil/#copy-yank","title":"Copy - yank","text":"<p>Copy is known as yank in Emacs terminology.</p> <p><code>y</code> to yank the currently selected text into the kill-ring, typically used with visual select and motions</p> <p><code>y y</code> to yank the current line</p> <p>Cut commands followed by <code>u</code> to undo are effectively the same as using copy</p>"},{"location":"spacemacs-basics/vim-style/common-evil/#cut","title":"Cut","text":"<p><code>d</code></p>"},{"location":"spacemacs-basics/vim-style/common-evil/#paste","title":"Paste","text":"<p><code>p</code> to paste the contents of the kill-ring</p> <p><code>C-j</code> and <code>C-k</code> scroll through the kill-ring history, allowing previously cut and copied values to be selected</p> <p><code>p</code> copies any selected text into the kill-ring and will be pasted the next time <code>p</code> is pressed</p> <p><code>P</code> pastes the contents of the kill-ring, without copying selected text.  Use <code>P</code> if replacing the same text in several places or consider using iedit to replace multiple selections</p>"},{"location":"spacemacs-basics/vim-style/key-binding-reference/","title":"Evil Keybinding Reference","text":"<p>An alphabetically ordered reference of Evil key bindings.</p> <p>Spacemacs DOCUMENTATION key bindings section contains full details</p>"},{"location":"spacemacs-basics/vim-style/key-binding-reference/#normal-mode-keybindings","title":"Normal mode keybindings","text":"<p>Keybindings available in Evil normal mode and the resultant state they leave you in.</p> Keybinding Description State <code>@</code> execute keyboard macro (defined by <code>q</code>) Normal <code>'</code> jump to mark (defined by <code>m</code>) Normal <code>a</code> append text after cursor Insert <code>a</code> append text after cursor Insert <code>A</code> append text to end of sentence Insert <code>b</code> move cursor back to start of previous word Normal <code>B</code> move cursor back to start of last word Normal <code>c</code> change (use with modifier) Insert <code>C</code> change rest of sentence Insert <code>d</code> delete (use with modifier) Normal <code>D</code> delete rest of sentence Normal <code>e</code> end of word Normal <code>E</code> end of word  (seems same as above) Normal <code>f</code> find character forward (type character) Normal <code>F</code> find character backward (type character) Normal <code>fd</code> Escape (press almost together) Normal <code>g</code> go menu Normal <code>G</code> Jump to end of buffer Normal <code>h</code> move cursor left Normal <code>H</code> move cursor to top of buffer Normal <code>i</code> insert text Insert <code>I</code> insert text at start of sentence Insert <code>j</code> Move cursor down a line Normal <code>J</code> Join next line to end of current Normal <code>k</code> Move cursor up a line Normal <code>K</code> <code>spacemacs/evil-smart-doc-lookup</code> Normal <code>l</code> Move cursor right Normal <code>L</code> Move cursor to bottom of buffer Normal <code>m</code> Create marker (next character is marker name) Normal <code>M</code> Jump to middle of buffer Normal <code>n</code> Next search occurrence Normal <code>N</code> Previous search occurrence Normal <code>o</code> New line below Insert <code>O</code> New line above Insert <code>p</code> Paste (after / below cursor) Insert <code>P</code> Paste (before / above cursor) Insert <code>q</code> Record keyboard macro attached to given character Normal <code>Q</code> undefined Normal <code>r</code> Replace character under cursor Normal <code>R</code> Replace character state Replace <code>s</code> Substitute character Insert <code>S</code> Substitute sentence Insert <code>t</code> Find character forward - cursor before character Normal <code>T</code> Find character backward - cursor after character Normal <code>u</code> Undo last change (C-R to redo) Normal <code>U</code> Undefined Normal <code>v</code> Visual select Visual <code>V</code> Visual select sentence Visual <code>w</code> Jump cursor to start of next word Normal <code>W</code> Jump cursor to start of next word Normal <code>x</code> Delete character under cursor Normal <code>X</code> Delete character backwards Normal <code>y y</code> Yank (copy) line Normal <code>Y</code> Yank (copy) line Normal <code>z</code> Menu - code folding / keyboard macros <code>Z</code> Menu - evil quit"},{"location":"spacemacs-basics/vim-style/key-binding-reference/#spacemacsevil-smart-doc-lookup","title":"<code>spacemacs/evil-smart-doc-lookup</code>","text":"<p>Run documentation lookup command specific to the major mode.</p> <p>Use command bound to <code>SPC m h h</code> if defined, otherwise fall back to <code>evil-lookup</code></p>"},{"location":"spacemacs-basics/vim-style/speaking-evil/","title":"Speaking Evil","text":"<p>Evil is easier to learn if you learn to speak commands as sentences.</p> <p>First learn some verbs:</p> <p><code>c</code> (change), <code>d</code> (delete), <code>g</code> go, <code>v</code> visual (select), <code>y</code> yank (copy)</p> <p>Then use those verbs with some modifiers (motions)</p> <p><code>'</code> mark, <code>{ }</code> beginning/end of paragraph, <code>a</code> around, <code>f</code> find (includes character), <code>i</code> inside, <code>s</code> surround, <code>t</code> till (just before a character)</p> <p>Then learn the text objects you can apply verbs and modifiers too</p> <p><code>b</code> block/parentheses, <code>p</code> paragraph, <code>s</code> sentence  <code>t</code> tag - html/xml, <code>w</code> word</p>"},{"location":"spacemacs-basics/vim-style/speaking-evil/#examples-of-speaking-evil","title":"Examples of speaking Evil","text":"<p>Practice speaking evil with these examples</p> Keybinding Description <code>c i s</code> change inside current sentence (change the whole sentence) <code>c i \"</code> change inside double quotes <code>c f )</code> change from cursor to next <code>)</code> character <code>c s ' \"</code> change by the surrounding single quotes with double quotes <code>c t X</code> change till the character <code>X</code> (not including <code>X</code>) <code>c /foo</code> change until the first search result of \u2018foo\u2019 <code>d d</code> delete current line <code>d i w</code> delete inside the current word (delete word) <code>v t SPC</code> visual select till the next <code>Space</code> character <code>v s ]</code> visually select and surround with <code>[]</code> without spaces <code>v s [</code> as above with <code>[ ]</code> with spaces between parens and content <code>g v</code> go to last visual selection (select last visual selection) <code>v a p</code> visually select around current paragraph <code>SPC v s \"</code> visually select current work and surround with <code>\"\"</code> <code>v i w s \"</code> visually select, insert around current word, and surround with quotes <code>y y</code> yank (copy) current line <code>y w</code> yank (copy) current word <code>y @ a</code> yank (copy) to mark <code>a</code> (<code>m a</code> creates a mark called <code>a</code>) <p>Evil Reference and Tips</p> <p>Evil quick reference guide Evil tips for developers Speaking Vim</p>"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/","title":"Evil Quick Reference","text":"<p>A reference of the most common keybindings available in Evil Normal mode. Spacemacs DOCUMENTATION key bindings section contains full details</p> <p>. repeats the last keybinding sequence used in Vim Normal mode or a change made within a complete Vim Insert session.</p>"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#moving-around","title":"Moving around","text":"<p>In normal mode you can keep your fingers resting on the main row of your keyboard to move around.</p> Key action <code>j</code> move cursor down one line <code>k</code> move cursor up one line <code>l</code> move cursor right one character <code>h</code> move cursor left one character <p>In menus such as helm you can move around using <code>Ctrl</code> and these keybindings.  So <code>C-j</code> will move the cursor down one item in a menu.</p>"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#navigating-the-current-line","title":"Navigating the current line","text":"Key Action <code>f</code> to next character (you specify) <code>t</code> to just before the next character <code>;</code> repeat <code>f</code> or <code>t</code> search <code>w</code> start of next word <code>W</code> start of next word, white space delimited <code>e</code> end of current word <code>b</code> start of previous word <code>W</code> end of next word, white space delimited <code>*</code> to next matching symbol name <code>$</code> end of current line <code>0</code> start of current line <code>^</code> start of non-whitespace <code>%</code> jump to matching parens or next closed paren"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#navigating-the-current-buffer","title":"Navigating the current buffer","text":"Key action <code>gg</code> start of buffer <code>G</code> end of buffer <code>H</code> move cursor to head of buffer <code>M</code> move cursor to middle of buffer <code>L</code> move cursor to bottom line of buffer <code>C-u</code> jump up half a page <code>C-d</code> jump down half a page <code>}</code> move cursor forward by paragraph or block <code>{</code> move cursor backward by paragraph or block <code>ma</code> mark a line in a file with marker \"a\" <code>`a</code> after moving around, go back to the exact position of marker \"a\" <code>'a</code> after moving around, go back to line of marker \"a\" <code>:marks</code> view all the marks <code>''</code> go to the last place you were <code>[{</code> jump back to the \"{\" at the beginning of the current code block <code>SPC j i</code> jump using helm list of headings / functions <code>SPC j j</code> avy-jump to character (specify) <code>SPC j l</code> avy-jump to line <code>C-o</code> jump back to previous cursor location (<code>evil-jump-backwards</code>) <code>C-i</code> Go to newer position in jump list (opposite of <code>C-o</code>) <code>: 4</code> go to line 4"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#searching","title":"Searching","text":"<p>Searching buffers and projects with <code>helm-swoop</code> is recommended.</p> <p><code>SPC s s</code> - helm-swoop - shows a buffer with all search results, <code>C-j</code> and <code>C-k</code> navigates through results.</p> <p><code>SPC /</code> or <code>SPC s p</code> for a project wide search.</p> <p><code>\\b</code> defines a boundary around the search term. For example <code>search\\b</code> will match search, but not searching.</p> Key Action <code>*</code> search forward for the word under the cursor <code>#</code> search backward for the word under the cursor <code>/</code> search forward in current buffer <code>?</code> search backward in current buffer <code>n</code> once searching: find forward <code>N</code> once searching: find backwards <p>Ensure <code>RET</code> is pressed after <code>/</code> search</p> <p>Using <code>/</code> to search should be completed by pressing <code>RET</code> or deleting the search term in the mini-buffer before using Evil keybindings.  When in the search state the Evil keybindings act more destructively.</p> <p>Use ++src++ s s for helm swoop</p>"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#text-editing","title":"Text Editing","text":"<p>The following commands put you into the Evil Insert state</p> Key Action <code>i</code> insert state at cursor <code>I</code> insert state at start of line <code>a</code> append - insert state after cursor <code>A</code> append - insert state at end of line <code>o</code> new line after cursor <code>O</code> new line before cursor"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#return-to-normal-state","title":"Return to Normal state","text":"<p>Regularly switch between normal and insert states is normal practice in Spacemacs.  As soon as you finish typing some new text, it should become second nature to go back to normal state.</p> <p>Switching from insert to normal state:</p> <p><code>ESC</code> or press <code>f d</code> keys in extremely quick succession.</p> <p>Hint</p> <p>Using <code>f d</code> together is low risk as if you dont get it right it will either add the characters or try find the next <code>d</code> character (as <code>f</code> moves to the next character).</p> <p>Keep trying this key combination as once in normal state you can use <code>u</code> to undo any <code>f d</code> characters inserted.</p> <p>The character sequence can be customized or deactivated by adding <code>evil-escape</code> to <code>dotspacemacs-excluded-packages</code> in the <code>~/.spacemacs</code> configuration file.</p>"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#copy-cut-paste-undo-redo","title":"Copy, cut, paste, undo, redo","text":"<p><code>v</code> in Vim normal mode changes to Visual select mode.  Use the navigation keys or any other movement keys to select text to copy or cut.</p> Key Action <code>y</code> copy (yank) selection and add to kill ring <code>x</code> delete character at point and add to kill ring <code>X</code> delete character before point and add to kill ring <code>p</code> paste (put) <code>u</code> undo <code>Ctrl-r</code> redo"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#hint-undo-tips","title":"Hint:: Undo tips","text":"<p>Undo will revert the last action in normal mode or all the changes you made in insert state</p>"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#replace-and-changing-text","title":"Replace and changing text","text":"Key Action <code>r</code> replace the character under cursor <code>R</code> replace multiple characters until <code>ESC</code> <code>cw</code> change word from cursor to end <code>4 c w</code> change 4 words <code>v (select) c</code> change region <code>SPC v c</code> change current word/region <code>SPC v d</code> delete current word/region <code>d w</code> delete from cursor to end of word <code>C</code> change from cursor to end of line <code>D</code> delete from cursor to end of line <code>d $</code> delete from cursor to end of line <p>Combine d | c | v | r with avy-goto</p>"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#hintsearch-and-replace","title":"Hint::Search and replace","text":""},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#delete-commands","title":"Delete commands","text":"Key Action <code>de</code> delete to end of word, not including space <code>dw</code> delete to end of word, including space <code>d$</code> delete to end of line <code>dd</code> delete the current line <code>4 d w</code> delete 4 words <code>4 d $</code> delete 4 lines to end <code>dt</code> delete to a character (not including character) <code>dab</code> delete a whole block / expression <code>dib</code> delete contents of a block / expression <code>cab</code> change all the block / expression <code>cib</code> change inner block contents / expression <code>yab</code> yank all block / expression <code>yib</code> yank inner block contents / expression"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#repeat-commands","title":"Repeat commands","text":"Key Action <code>.</code> repeat last command again <code>&lt;number&gt; &lt;cmd&gt;</code> repeat command a number of times <p>The <code>.</code> keybinding will repeat the last command in normal mode or the last text edit in insert mode.</p> <p>Type a number before a command and that command will run that number of times.</p> <p>Inserting a comment border</p> <p>Use the number repeat to create a border of 42 <code>;</code> characters.</p> <p>Type <code>42</code> to repeat the command 42 times</p> <p>Press <code>i</code> for insert mode</p> <p>Press <code>;</code> as the character to repeat insert</p> <p>Press <code>ESC</code> or <code>fd</code> to leave insert mode and insert all 42 <code>;</code> characters</p>"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#transposing-swap","title":"Transposing / swap","text":"Key Description <code>x p</code> or <code>SPC x t c</code> transpose the current character with the next character <code>SPC x t w</code> transpose the current character with the previous character <code>SPC x t l</code> transpose current line with previous line <code>SPC k tf</code> transpose expression"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#comments-works-for-all-major-modes","title":"Comments - works for all major modes","text":"<p><code>SPC ; ;</code> or <code>g c c</code> to comment out the current line</p> <p><code>SPC ;</code> or <code>g c</code> to comment out the currently selected region</p> <p><code>M-;</code> creates a <code>;;</code> comment on an empty line, or <code>;</code> at the end of the text of the current line.</p> <p>To comment multiple lines you can use the repeat command style, especially useful if you are using relative line numbers.</p> <p><code>g c 3 j</code> will comment the current line and the following two lines below.  Comment in reverse using <code>g c 3 k</code>.</p> <p>In Visual state, <code>v</code>, select the lines you wish to comment and use <code>g c</code> to comment all the marked lines.  Partially marked lines are not commented.</p> <p>Evil Commentary</p>"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#working-with-buffers","title":"Working with Buffers","text":"<p>To work with files in Emacs, they are first loaded into a Buffer.</p> <p>So when you open a file with <code>M-x find file</code> or <code>SPC f f</code> a new buffer is created so you can manage that file.</p> <p>Buffers are displayed in a window and you can change the window to show any of the current buffers.</p> <p>Here are the most commonly used buffer commands</p> Key Command Description <code>SPC b b</code> helm-mini List current buffers <code>SPC b d</code> kill-this-buffer Kill current buffer <code>SPC b h</code> home Switch to Spacemacs home page <code>SPC b n</code> next-buffer Switch to next buffer <code>SPC b p</code> previous-buffer Switch to previous buffer <code>SPC b s</code> switch-to-scratch-buffer Switch to the scratch buffer <code>SPC b Y</code> copy-whole-buffer-to-clipboard Copy current buffer contents to kill ring <p>See the full buffer menu via <code>SPC b</code></p> <p></p>"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#managing-files","title":"Managing Files","text":"Key Description <code>SPC f c</code> copy file - save current buffer with a new file name <code>SPC f R</code> change file name of current buffer <code>SPC f y n</code> yank file name of current buffer <p>Also consider using treemacs and projectile</p>"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#quit-or-restart-emacs","title":"Quit or Restart Emacs","text":"<p>I recommend using the Spacemacs menu from normal mode to quit / restart Spacemacs.</p> Key Action <code>SPC q q</code> Quit Spacemacs <code>SPS q r</code> Restart Spacemacs keeping current window and buffer layout <code>SPS q R</code> Restart Spacemacs"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#spelling-checking","title":"Spelling Checking","text":"<p>Spacemacs checks spelling as you type, adding an underscored in red to any words not recognised.</p> <p><code>SPC S c</code> to check the current word and show a list of suggested words if spelt incorrectly.</p> <p>Either type in a new spelling or use <code>C-j</code> and <code>C-k</code> keys to move down and back up the list of words, using <code>RET</code> to select that word.</p>"},{"location":"spacemacs-basics/vim-style/vim-quick-reference/#scrolling","title":"Scrolling","text":"<p>In evil command mode you can scroll just the text using the classic vi bindings.  This does not scroll the cursor unless the cursor hist the top or bottom of the window, in which case the cursor stays at that window boundary.</p> <ul> <li><code>C-y</code> - scroll down</li> <li><code>C-e</code> - scroll text up</li> </ul>"},{"location":"spacemacs-basics/vim-style/vim-tips-for-developers/","title":"Vim editing for Clojure developers","text":"<p>Vim keybindings that drive Vim editing tools that are common for developers</p>"},{"location":"spacemacs-basics/vim-style/vim-tips-for-developers/#comments-and-commenting-code","title":"Comments and Commenting code","text":"<p><code>g c c</code>  comment line</p> <p><code>SPC ; ;</code> comment current line</p> <p><code>SPC ; p</code> comment current paragraph / code structure</p> <p><code>v (select) g c</code>  comment region</p> <p><code>g c 9 j</code>  comment 9 lines from current, downwards</p> <p><code>SPC v v g c</code>  select line and comment it</p>"},{"location":"spacemacs-basics/vim-style/vim-tips-for-developers/#simulated-structural-editing-with-surround","title":"Simulated structural editing with surround","text":"Keybinding Description <code>v s ]</code> surround with [characters] without spaces <code>v s [</code> surround with [ characters ] without spaces <code>c s ( [</code> change surrounding from ( to [ <code>c i (</code> change in ( <code>c a (</code> change \u201caround\u201d ( <code>%</code> jump forwards to next paren, further <code>%</code> toggles between open and close parens. <code>x p</code> transpose characters (cut current, paste after)"},{"location":"spacemacs-basics/vim-style/vim-tips-for-developers/#multi-replace-with-iedit-and-narrowing","title":"multi-replace with iedit and narrowing","text":"<p><code>SPC v</code> select whatever you're at. Press <code>v</code> to widen region and <code>S-v</code> to narrow region.</p> <p><code>zt</code>, <code>zz</code>, and <code>zb</code> to pull the current line to the top/middle/bottom of the screen.</p> <p><code>[count]G</code> jump to line number</p> <p><code>gf</code> jump to file name under the cursor - try this in the summary.md file</p> <p><code>C-]</code> Jump to definition of keyword under the cursor</p>"},{"location":"spacemacs-basics/vim-style/vim-tips-for-developers/#code","title":"Code","text":"<p><code>g D</code>open definition in another window</p> <p><code>=</code> (code-aware indenting) operator. Nice with the <code>ap</code> (a paragraph) text object.</p>"},{"location":"spacemacs-basics/vim-style/vim-tips-for-developers/#code-folding","title":"code folding","text":"<p><code>zc</code> and <code>zo</code> are useful to close and open folds, which can be a nice way of focusing on certain pieces of code.</p>"},{"location":"spacemacs-basics/vim-style/vim-tips-for-developers/#transposing-characters-and-sections","title":"Transposing characters and sections","text":"<p><code>x p</code>  simple transpose of the current and next character</p> <p><code>M-t</code> transpose words before and after cursor position</p> <p><code>{</code>, <code>}</code> motions jump to next and previous empty lines.  This motion makes it simple to rearrange paragraphs</p> <p><code>{ d }</code> will kill the paragraph (or multiple paragraphs)</p> <p><code>{</code> will jump to the start of the previous paragraph</p> <p><code>p</code> pastes the killed paragraph before the current paragraph</p> <p><code>&gt;</code> and <code>&lt;</code> (indent and dedent) operators, useful with the aforementioned <code>}</code>/<code>{</code> motions.</p>"},{"location":"spacemacs-basics/working-with-projects/","title":"Working with Projects","text":"<p>Techniques to work specifically with Clojure projects as well as any concept of a project, e.g. a local git repository or using <code>.projectile</code> file to manually define a project.</p> <p>Spacemacs gives you several options for managing the files in your project and you will use commands from the following menus</p>"},{"location":"spacemacs-basics/working-with-projects/#file-menu","title":"File menu","text":"<p>Find, copy, delete, rename, sudo-edit, bookmark and browse files.</p> <p> </p> <p> Open and Create files</p>"},{"location":"spacemacs-basics/working-with-projects/#buffer-menu","title":"Buffer menu","text":"<p>list, show and delete buffers.  A buffer is a container for file content and any other text and images (if images support is included in your Emacs install)</p> <p> </p> <p> Managing Buffers</p>"},{"location":"spacemacs-basics/working-with-projects/#windows","title":"Windows","text":"<p>Organise the number and location of buffers displayed, splitting horizontally and vertically with multiple rows and columns.  </p> <p>Windows can be moved around and resized without resorting to using the mouse.</p> <p>Space w is the windows menu.</p> <p> </p> <p> Managing Windows</p>"},{"location":"spacemacs-basics/working-with-projects/#project-projectile-menu","title":"Project (Projectile) menu","text":"<p>find files and search/replace text in the current project (e.g. local git project or arbitrary <code>.projectile</code> defined project) and many other project specific functions.</p> <p> </p> <p> Projectile</p>"},{"location":"spacemacs-basics/working-with-projects/#layouts","title":"Layouts","text":"<p>Layouts group buffers together for projects or any arbitrary grouping you decide.</p> <p> </p> <p> Layouts and Workspaces</p>"},{"location":"spacemacs-basics/working-with-projects/#file-browsers-managers","title":"File browsers / managers","text":"<p>Treemacs and Ranger are file managers that help you browse through files and directories.</p> <p> </p> <p> Treemacs</p> <p> </p> <p> Ranger</p>"},{"location":"spacemacs-basics/working-with-projects/dird/","title":"dired Emacs directory editor","text":"<p>A Dired buffer displays the contents of a single directory or listings of one or more sub-directories. A Dired buffer can display an arbitrary set of files and directories from any file systems.</p> <p><code>dired</code> mode is built-in to Emacs (version 23 onward)</p> <p>Space f f and select the <code>.</code> root of a directory to open a directory listing in dired</p> <p>Space f j or Space j d to jump to the current buffer in a dired buffer.  Space j D opens dired buffer in a different window.</p> <p>Use Evil style navigation and editing with the dired buffer</p> <p>Space Space <code>wdired-change-to-wdired-mode</code> WDired mode (writable dired) enables editing of the dired buffer. Names of the files in the buffer, the target of symbolic links and the permission bits of the files can be changed.</p>"},{"location":"spacemacs-basics/working-with-projects/dird/#dired-commands","title":"Dired commands","text":"<p>m mark files to run an action across multiple files in the listing</p> key Action * mark / unmark meun R rename a file C copy file + make directory m mark files u unmark d flag for deletion s sort menu x execute deletions ^ or - move up a directory"},{"location":"spacemacs-basics/working-with-projects/dird/#rename-files-with-wdired-mode","title":"Rename files with WDired mode","text":"<p>The names in a dired directory listing can be renamed by editing the file names in the dired buffer and committing the changes.</p> <p>Space f f and select the . root of a directory to open a directory listing in dired (or switch to an open dired buffer).</p> <p>Space Space <code>wdired-change-to-wdired-mode</code> to make the dired buffer writable.  The cursor enters insert mode and is placed on the top entry of the directory listing.</p> <p>Use Evil style editing to manage changes to the file names.  Some Evil tools and Multiple cursors are not available in the WDired mode, so experience with Evil basics can be very useful.</p> <p>Ctrl+c Ctrl+c to commit the changes and update all the affected files.</p> <p>Ctrl+c Esc to cancel all changes.</p> <p>Small changes often</p> <p>Undo is not available in this mode, so make simple changes and save the results as soon as possible.</p>"},{"location":"spacemacs-basics/working-with-projects/dird/#emacs-macro-for-multiple-file-renames","title":"Emacs macro for multiple file renames","text":"<p>Record a macro to rename a file and run the macro over multiple lines in the dired buffer in WDired mode.</p> <p>q a in normal mode will start recording all following key bindings</p> <p>q again to stop recording and save all the key bindings as a macro bound to the a character.</p> <p>Any character other than q can be used as the macro name and Practicalli finds a, z and x as convenient characters for macros.</p> <p>@ a to run the macro and repeat the same change</p> <p>2 4 @ a to run the macro on  the next 24 lines including the current line,  repeating the same change on multiple file names in the dired buffer.</p> <p>Reset cursor position at end of macro</p> <p>If using positional aspects for changes made by the macro ensure the cursor is moved back to the correct starting place just before ending the macro recording.</p> <p> Mastering Emacs: Macros</p>"},{"location":"spacemacs-basics/working-with-projects/layouts/","title":"Layouts and Workspaces","text":"<p> Layouts provide a way to group buffers for a project or any arbitrary buffer grouping you wish.  </p> <p>Workspaces define window arrangements within a particular layout.</p>"},{"location":"spacemacs-basics/working-with-projects/layouts/#working-with-buffers-in-a-layout","title":"Working with buffers in a layout","text":"<p>Space b b lists buffers for the current layout, quickly switching between them.  </p> <p>Space b B will show all buffers.</p> <p>Space Tab toggles between the previous buffer and current buffer, regardless of layout the previous buffer is in.  </p> <p>Constrain last buffer toggle to the curren layout by adding a configuration to the <code>dotspacemacs-configuration-layers</code> Spacemacs user configuration </p> <pre><code>(spacemacs-layouts :variables \n                   spacemacs-layouts-restrict-spc-tab t)\n</code></pre>"},{"location":"spacemacs-basics/working-with-projects/layouts/#managing-layouts","title":"Managing Layouts","text":"<p>Space l Tab toggles to the previous layout, providing a quick way to jump between two projects actively being worked on.</p> <p>Space l enters the layout transient state</p> <p> </p> <p>Space l l lists the current layouts with a helm prompt to narrow the list.  Entering a new name will prompt to create a new layout (perspective)</p> <p>The current layout name appears on the far left of the mode-line.</p> <p> </p> <p>Space l s saves all layouts to a file</p> <p>Space l L loads a layout from a file.  Layouts are kept when restarting Spacemacs with </p> <p>Space q r and can be configured to auto-resume when starting Emacs.</p> <pre><code>dotspacemacs-auto-resume-layouts t\n</code></pre> <p>Space l x close current layout and its buffers </p> <p>Space l d deletes the layout and keeps the buffers available</p> <p>Space l ? shows the layouts help menu</p> <p> </p>"},{"location":"spacemacs-basics/working-with-projects/layouts/#global-layout","title":"Global layout","text":"<p>Space b b in the <code>default</code> layout shows all open buffers as this layout has global scope.</p> <p>This layout is useful to check if there are unsaved files or for closing unwanted or temporary buffers.</p> <p>Meta+Space in helm popup opens helm transient state.  t will mark (tag) an item in the list, T will mark all items.  Meta+D will close all marked buffers.</p>"},{"location":"spacemacs-basics/working-with-projects/layouts/#workspaces","title":"Workspaces","text":"<p>Workspaces define multiple window arrangements in a given layout.</p> <p>The active workspace number is placed before the window number, i.e \u278a|\u278d, the fourth window of the first workspace. A new layout comes with a default workspace, \u278a|\u278a.  Switching to a workspace that does not exist in the current layout will create a new one.</p> <p>Space l w R gives a name to the current workspace.</p> <p>Pressing a workspace number will activate it or create a new one. <code>Ctrl-&lt;number&gt;</code> will preview a workspace.</p> <p>Tab makes the previous workspace activate.</p> <p>Space l w ? to toggle the full help.</p> Key Binding Description g t go to next workspace g T go to previous workspace Space b W go to workspace and window by buffer"},{"location":"spacemacs-basics/working-with-projects/layouts/#references","title":"References","text":"<p> spacemacs-layout layer on GitHub</p> <p> develop.spacemacs.org layer description</p> <p> Spacemacs documentation</p> <p> Eyebrowse GitHub repository</p>"},{"location":"spacemacs-basics/working-with-projects/managing-buffers/","title":"Buffer management","text":"<p>Buffers manage the display of files and other information, e.g. REPL, terminal, etc. </p> <p>Opening a file replaces the content in the current buffer.</p> <p> </p>"},{"location":"spacemacs-basics/working-with-projects/managing-buffers/#listing-open-buffers","title":"Listing open buffers","text":"<p>Space b b to select a buffer from a list of buffers</p> <p>A helm pop-up window appears at the bottom listing all open buffers.  The helm popup window also shows recently opened buffers.</p> <p>Enter to open the highlighted buffer.</p> <p>Alt+D closes the currently selected buffer and remains in the buffer list.</p> <p> </p>"},{"location":"spacemacs-basics/working-with-projects/managing-buffers/#buffer-transient-state","title":"Buffer Transient State","text":"<p>Space b . launches buffer transient state to manage buffers using single character keybindings.</p> <p>n and N to cycyle forward and backward through open buffers.</p> <p>d to close the current buffer.</p> <p> </p>"},{"location":"spacemacs-basics/working-with-projects/managing-buffers/#close-buffers-using-buffer-menu","title":"Close buffers using buffer menu","text":"<p>Use helm-mini menu when you have a large number of buffers to delete.</p> <p>Space b b to open the buffer helm-mini menu</p> <p>Ctrl j and Ctrl k to navigate buffer names in the list of open buffers</p> <p>Ctrl Space to mark a buffer for deletion</p> <p>Meta D deletes all marked buffers</p>"},{"location":"spacemacs-basics/working-with-projects/managing-buffers/#commonly-used-keybindings","title":"Commonly used keybindings","text":"Vim Normal Description Space b . Enter buffer transient state b list open buffers h switch to home buffer m switch to home message n Show next buffer N or p Show previous buffer q Quit the buffer transient state"},{"location":"spacemacs-basics/working-with-projects/managing-windows/","title":"Managing Windows","text":"<p>Organise the number and location of buffers displayed, splitting horizontally and vertically with multiple rows and columns.  </p> <p>Windows can be moved around and resized without resorting to using the mouse.</p> <p>Space w is the windows menu.</p> <p> </p> <p>Space w u to undo a change to the window layout.</p>"},{"location":"spacemacs-basics/working-with-projects/managing-windows/#golden-ratio","title":"Golden Ratio","text":"<p>Space t g toggles golden ratio mode</p> <p>Golden ratio automatically makes the active window the largest in the frame.  Chainging windows will resize all windows to make the new active window the largest</p>"},{"location":"spacemacs-basics/working-with-projects/managing-windows/#windows-transient-menu","title":"Windows Transient menu","text":"<p>Space w . opens the Windows Transient state menu, enabling single character keybindings for window commands, simplifying multiple commands.</p> <p> </p>"},{"location":"spacemacs-basics/working-with-projects/open-and-create-files/","title":"Open and create Files &amp; directories","text":"<p>Open files or directories from anywhere on the file space.  New files and directories can also be created by supplying unique names.</p> <p> </p>"},{"location":"spacemacs-basics/working-with-projects/open-and-create-files/#opening-a-file","title":"Opening a File","text":"<p>Space f f runs the <code>spacemacs/helm-find-file</code> command which opens list of files and directories in the current directory.  Typing a patter narrows the items in the list to those that fuzzy match.</p> <p>Enter on a list item to open the file or navigate through to the directory contents.</p> <p>Key bindings for curor movement on the find file path</p> Key binding Description Tab select highlighted directory / complete filename Ctrl+h navigate to parent directory Ctrl+y paste kill ring into file path Ctrl+j Move cursor down list of directories &amp; filenames Ctrl+k Move cursor up list of directories &amp; filenames"},{"location":"spacemacs-basics/working-with-projects/open-and-create-files/#create-a-new-file","title":"Create a new file","text":"<p>Space f f can also create a new file by typing full path and name of the new file.  A prompt confirms that a new want a new file created.</p> <p><code>SPC f s</code> to save the new file and a prompt asks if any intermediary directories should be created (if they do not already exist).</p>"},{"location":"spacemacs-basics/working-with-projects/projectile/","title":"Projectile - project specific commands","text":"<p><code>SPC p</code> opens the projectile menu allowing you to run commands relative to the project of the active buffer.</p> <p></p>"},{"location":"spacemacs-basics/working-with-projects/projectile/#what-is-a-projectile-project","title":"What is a Projectile project","text":"<p>A project can be one or more of the following things</p> <ul> <li>Git - a directory with the <code>.git</code> directory</li> <li>Language specific - e.g. a Clojure Leiningen project</li> <li>Projectile - any directory with a <code>.projectile</code> file</li> </ul>"},{"location":"spacemacs-basics/working-with-projects/projectile/#hintsearching-across-multiple-projects","title":"Hint::Searching across multiple projects","text":"<p>Create an empty file called <code>.projectile</code> in the root of the directory that contains all your projects.  <code>SPC /</code> in any project will now search through all files in all your projects.  Remove the <code>.projectile</code> file when finished, to search through just the current project.</p>"},{"location":"spacemacs-basics/working-with-projects/projectile/#opening-files-from-the-same-project","title":"Opening Files from the same project","text":"<p><code>SPC p f</code> to open a file in the current project that you know the name of. All project files are listed and as you type the file name the list of names is narrowed. Use <code>C-k</code> and <code>C-j</code> keybindings to move up and down the list respectively.</p> <p>This is a good approach if you know the name but not the directory path of the file.  Use <code>SPC f f</code> if you know the directory but not the name of the file you want.</p> <p></p>"},{"location":"spacemacs-basics/working-with-projects/projectile/#switching-between-buffers","title":"Switching between buffers","text":"<p><code>SPC p b</code> gives a helm popup list of currently open buffers for the current project.  Entering a buffer name pattern narrows that list and <code>C-k</code> and <code>C-j</code> keybindings move up and down the list respectively.</p>"},{"location":"spacemacs-basics/working-with-projects/projectile/#toggling-between-test-and-code-files","title":"Toggling between test and code files","text":"<p><code>SPC p a</code> toggles the buffer between the test and code files in your project.</p> <p>In Clojure this is based on the corresponding namespaces, so <code>SPC p a</code> would toggle between these two files.</p> <pre><code>src/project-name/component/clojure-code.clj\ntest/project-name/component/clojure-code.clj\n</code></pre> <p>Keybindings / commands</p> <p><code>projectile-toggle-between-implementation-and-test</code></p> <p>Cider also has a command to do this:</p> <p><code>cider-test-default-test-ns-fn</code></p> <p>Allegedly, this command is not as effective as the projectile command.</p>"},{"location":"spacemacs-basics/working-with-projects/projectile/#project-search-and-replace","title":"Project search and replace","text":"<p><code>SPC p %</code> starts projectile-grep, prompting for the search term and what text to use to replace it.</p> <p>Each buffer containing a matching search text will be opened in turn and each matching instance of the text will be jumped to for confirmation that it should be replaced.</p> <p><code>y</code> to replace the current match and jump to the next match</p> <p><code>n</code> to skip replacement of the current match and jump to the next match.</p>"},{"location":"spacemacs-basics/working-with-projects/projectile/#hinthelm-ag-and-iedit-more-effective-for-larger-changes","title":"Hint::Helm-ag and iedit more effective for larger changes","text":"<p>Use Evil tools to replace text across projects (refactor), especially for large numbers of changes.  Only matching lines are displayed so it is easier to see how many places you are making the change in.</p>"},{"location":"spacemacs-basics/working-with-projects/ranger/","title":"Ranger file manager","text":"<p>Ranger is a very fast and lightweight file manager that is great for previewing files without explicitly opening them.  Ranger is very well suited to Vim keybindings too.</p> <p>Ranger is not part of Spacemacs by default, so the simplest way is to add the ranger layer.</p> <p></p>"},{"location":"spacemacs-basics/working-with-projects/ranger/#add-ranger-layer-to-spacemacs","title":"Add ranger layer to Spacemacs","text":"<p>Edit your <code>~./spacemacs</code> file and in the <code>...</code> section add the following layer</p> <pre><code>(ranger :variables\n             ranger-show-preview t\n             ranger-show-hidden t\n             ranger-cleanup-eagerly t\n             ranger-cleanup-on-disable t\n             ranger-ignored-extensions '(\"mkv\" \"flv\" \"iso\" \"mp4\"))\n</code></pre> <p>This layer definition will add the ranger package and set some recommended variables: * preview files when the cursor is on a file name in ranger * show hidden files (dot files) * clean up buffers when closing ranger * file name extensions to ignore (multi-media files)</p>"},{"location":"spacemacs-basics/working-with-projects/ranger/#basic-usage","title":"Basic usage","text":"Keybinding Description <code>SPC a r</code> Open ranger in current buffer directory <code>q</code> Quit ranger <code>j</code> Move down the current list / preview screen <code>k</code> Move up the current list / preview screen <code>l</code> Jump into currently selected child directory / or open previewed file <code>h</code> Up to the parent directory"},{"location":"spacemacs-basics/working-with-projects/ranger/#file-management","title":"File management","text":"Keybinding Description <code>r</code> revert buffer <code>R</code> rename current file or directory <code>D</code> delete ... <code>yy</code> copy <code>pp</code> paste <code>f</code> search for file names <code>i</code> toggle showing literal / full-text previews <code>zh</code> toggle dot files <code>o</code> sort options <code>H</code> search through history <code>z-</code> or <code>z+</code> reduce / increase parents <code>C-SPC</code> mark a file or directory <code>v</code> toggle mark <code>V</code> visually select lines <code>;C</code> copy / move directory <code>;+</code> create directory <code>SPC a d</code> deer (minimal ranger window in current directory) <code>C-j</code> (ranger) scroll preview window down <code>C-k</code> (ranger) scroll preview window up <code>S</code> (ranger) enter shell"},{"location":"spacemacs-basics/working-with-projects/searching-projects/","title":"Searching Projects","text":"<p><code>SPC /</code> and <code>SPC s p</code> (<code>spacemacs/helm-project-smart-do-search</code>) enables a a fuzzy logic search through the content of all the files in the current project.  A helm pop-up displays, typing a pattern shows matching lines from all the files in the project.</p> <p>Use <code>C-j</code> and <code>C-k</code> to move down and up through the search results.</p> <p><code>RET</code> selects the search result and shows the file and line in the current buffer.</p> <p><code>SPC s l</code> will repeat the last search</p> <p><code>M-n</code> and <code>M-p</code> will scroll through the search patterns whenever the search pop-up window is open</p> <p></p>"},{"location":"spacemacs-basics/working-with-projects/searching-projects/#hintreplacing-text-across-a-project","title":"Hint::Replacing text across a project","text":"<p>Use search results to replace text across a project.</p>"},{"location":"spacemacs-basics/working-with-projects/searching-projects/#open-files-from-search-results","title":"Open files from search results","text":"<p>With a search open, <code>C-c C-f</code> enables <code>helm-follow</code>.  When moving through results with <code>C-j</code> and <code>C-k</code> the corresponding file is opened in the current buffer.</p> <p>Set <code>helm-follow-mode-persistent</code> to true in <code>.spacemacs</code> to remember the use of <code>C-c C-f</code> follow mode for helm actions.</p> <pre><code>     (helm :variables\n           helm-follow-mode-persistent t)\n</code></pre>"},{"location":"spacemacs-basics/working-with-projects/searching-projects/#search-tool-binary","title":"Search tool binary","text":"<p>Searching requires an external tool to be available on your system PATH. Ripgrep is the recommended search tool, although silver searcher (ag) is a viable alternative.  Using <code>grep</code> is noticeably slower and has fewer options for searching.</p> <ul> <li>Ripgrep install instructions</li> <li>silver searcher (ag)</li> </ul>"},{"location":"spacemacs-basics/working-with-projects/searching-projects/#ripgrep-search-tool-options","title":"Ripgrep search tool options","text":"<p>Option flags can be passed to the search tool binary to tailor the results returned in the helm-ag pop-up window.  The option flags can be used before or after the search pattern.</p> <p><code>SPC h m rg</code> shows the man page for ripgrep which explains the options of that search tool.  Replace <code>rg</code> with the command line name of the search tool binary installed.</p> <p>Including options without their correct argument will show a warning, e.g. the <code>-g</code> option without a glob pattern or <code>-A</code> without a number.  Once the option has a valid value the error should be replaced by search results.</p> <p></p>"},{"location":"spacemacs-basics/working-with-projects/searching-projects/#searching-specific-files","title":"Searching specific files","text":"<p>Include or exclude specific files by their names or filename extensions.</p> <p>Use the <code>-g</code> option for a filename to search (globbing), or <code>-g!</code> for a filename to ignore.</p> <p><code>-g*.clj map</code> shows only results of searching for <code>map</code> from files ending in <code>.clj</code></p> <p></p> <p><code>-g!*.md map</code> will search for <code>map</code> for all files except those ending in <code>.md</code></p> <p></p>"},{"location":"spacemacs-basics/working-with-projects/searching-projects/#showing-more-lines-for-each-match","title":"Showing more lines for each match","text":"<p><code>-A</code> option for ripgrep is used to show a number of lines after each match of the pattern.  <code>-A4</code> will show the 4 additional lines after the line containing a matching pattern.</p> <p>If there are multiple pattern matches in the same file within the scope of extra lines, then contiguous lines are shown with 4 lines after the final pattern line.</p> <p><code>SPC /</code> with a pattern of <code>-A4 layout</code> will show each line containing the pattern layout and 4 lines after it.</p> <p></p> <p>This option can also be combined with the <code>-g</code> option above.</p>"},{"location":"spacemacs-basics/working-with-projects/searching-projects/#example-search-patterns","title":"Example search patterns","text":"<p>Additional search patterns that work with <code>ripgrep</code> or <code>ag</code>.</p> <p><code>-G*time</code> - search for the word \"time\" in all files</p> <p><code>-G*time -g*.clj</code> - search for the word \"time\" in <code>.clj</code> files only</p> <p><code>-tclojure time</code> - search for \"time\" in all <code>.{clj,cljs,cljc}</code> files</p> <p><code>uno\\ duo\\ tre</code> - search for the string \"uno duo tre\"</p> <p><code>-C5 foo</code> - search for \"foo\" but show 5 lines of context before and after the match</p> <p><code>(?:^|[^\\w-])time(?:[^\\w-]|$)</code> - search for \"time\" even in kebab-case words. i.e. search for the full word \"time\" including \"-\" to be a word character</p> <p>Ripgrep documentation has many regular expression examples</p>"},{"location":"spacemacs-basics/working-with-projects/searching-projects/#searching-hidden-files","title":"Searching hidden files","text":"<p>Searching a project using <code>SPC /</code> and <code>SPC s p</code> will ignore hidden files, those that start with <code>.</code></p> <p><code>-- --hidden</code> or <code>-- -uu</code> after the search pattern to include hidden files in the search</p> <p>For example, to search for the pattern <code>scissors</code></p> <pre><code>scissors -- --hidden\n</code></pre>"},{"location":"spacemacs-basics/working-with-projects/searching-projects/#hintsearching-hidden-files-may-slow-searching","title":"Hint::Searching hidden files may slow searching","text":""},{"location":"spacemacs-basics/working-with-projects/searching-projects/#ripgrep-configuration-and-arguments","title":"Ripgrep configuration and arguments","text":"<p>Define an environment variable called <code>RIPGREP_CONFIG_PATH</code> set to the file name and path</p> <pre><code>export RIPGREP_CONFIG_PATH=~/.config/ripgrep.config\n</code></pre> Argument Description <code>-u</code> don't respect <code>.gitignore</code> or <code>.ignore</code> files <code>-uu</code> same as -u and show hidden files <code>-uuu</code> same as -uu and search binary files <code>--max-columns</code> Maximum number of columns (Spacemacs default: 150) <code>--glob=!git/*</code> glob patters, <code>!</code> excluded <code>--smart-case</code> Ignore case <ul> <li>Ripgrep configuration file</li> </ul>"},{"location":"spacemacs-basics/working-with-projects/searching-projects/#references","title":"References","text":"<ul> <li>https://github.com/BurntSushi/ripgrep</li> <li>https://blog.burntsushi.net/ripgrep/</li> </ul>"},{"location":"spacemacs-basics/working-with-projects/tidying-up-buffers/","title":"Tidying up buffers","text":"<p>Sometimes you want to close several buffers and not just the current buffer with <code>SPC b d</code>.</p> <p><code>SPC b b</code> displays a list of open buffers in a popup window.</p> <p><code>M-SPC</code> opens the Helm transient menu on the buffer popup window, allowing you to navigate using <code>j</code> and <code>k</code> keys.</p> <p><code>M-D</code> will prompt you to kill the buffer the cursor is currently on.</p> <p><code>t</code> will mark the buffer the cursor is currently on.</p> <p><code>T</code> will mark all buffers listed in the popup.</p> <p><code>M-D</code> will prompt you in turn to delete all the marked buffers.</p>"},{"location":"spacemacs-basics/working-with-projects/tidying-up-buffers/#actions","title":"Actions","text":"<p>There are a range of actions you can run from the Helm transient state or even when you just have the buffer list popup open.</p> <p><code>a</code> switches to the actions page</p> <p><code>C-z</code> displays list of available actions for a buffer</p> <p></p>"},{"location":"spacemacs-basics/working-with-projects/tidying-up-buffers/#helm-transient-state-menu","title":"Helm Transient state menu","text":"<p><code>M-SPC</code> to open Helm transient state menu, simplifying the keybindings for tidying up lots of buffers.</p> <p></p>"},{"location":"spacemacs-basics/working-with-projects/tidying-up-buffers/#hintgnome-desktop-keybinding-conflict","title":"Hint::Gnome Desktop keybinding conflict","text":"<p><code>M-SPC</code> is used by the Gnome desktop for the window menu, so recommend you change the Gnome keyboard settings to use a different binding, i.e. <code>Super w</code>.</p>"},{"location":"spacemacs-basics/working-with-projects/treemacs/","title":"Treemacs - Visualise your project structure","text":"<p>You can easily view your project structure and navigate your project files with Treemacs.</p> <p>Show files and directories as a navigable tree in a buffer.  Spacemacs uses a pop-up buffer to the left hand side of the frame to display treemacs.</p> <p>Toggling open the treemacs buffer will show the directory of the current buffer.</p> <p>Opening the treemacs project root will show the directory list for the project that the current buffer is part of.</p> Vim Normal Emacs Command Description <code>SPC f t</code> <code>M-m f t</code> treemacs-toggle Show / hide treemacs buffer <code>SPC p t</code> <code>M-m p t</code> treemacs-find-project-root Show project root in treemacs <code>SPC 0</code> <code>M-m 0</code> <code>select-window-0</code> Switch to open treemacs buffer <p></p>"},{"location":"spacemacs-basics/working-with-projects/treemacs/#treemacs-shows-version-control-changes","title":"Treemacs shows version control changes","text":"<p>New and changed files are highlighted in Treemacs against the current version controlled changes in the project.</p> <p>Directory names turn blue when they contain changes.  Filenames turn green when they are changed.</p> <p></p>"},{"location":"spacemacs-basics/working-with-projects/treemacs/#treemacs-keybindings","title":"Treemacs Keybindings","text":"<p>Press <code>?</code> in the treemacs buffer to see the available keybindings to control treemacs and use more of its features.</p> <p></p>"},{"location":"structural-editing/","title":"Structural Editing","text":"<p>Structural Editing is a way to navigate and refactor your code without breaking parenthesis or other characters that define the structure of your code: <code>() [] {} \"\"</code>.</p> <p>You can quickly jump between the start and end of expressions.  It is easy to move expressions around, pull code into expressions or push code out of expressions too.</p>"},{"location":"structural-editing/#smartparens-writing-structural-text","title":"Smartparens - writing structural text","text":"<p>Spacemacs uses smart parens to help you write structural code really fast and also move expressions around.</p> <p>Space Space <code>sp-cheat-sheet</code>  lists all the smartparens commands available and we will cover the most common commands in this section.</p> <p>Smartparens is not just for lisps</p> <p>Smartparens supports structural editing for all languages in Spacemacs, event closing &amp; matching for markup languages such as tags in HTML.  Smartparens is a newer implementation of the classic paredit package.</p>"},{"location":"structural-editing/#lisp-mode-manipulating-structural-text","title":"Lisp mode - manipulating structural text","text":"<p>Spacemacs includes an Evil lisp-state, <code>SPC k .</code> for refactoring Lisp base languages like Clojure.  In this lisp-state you can use single character commands to move symbols and expressions around without risking unmatched parenthesis or other structure characters.</p> <p>The lisp-state uses smartparens commands, so its a great way to learn structural editing.</p> <p>The common commands I use are</p> Lisp state <code>SPC k</code> Description <code>s</code> /  <code>S</code> slurp forwards / backwards - pull in code from the right / left <code>b</code> / <code>B</code> barf forwards / backwards - push out code to the right / left <code>d x</code> delete expression <code>r</code> raise expression - replace parent expression with current expression <p></p>"},{"location":"structural-editing/#enable-vim-support-for-structural-editing","title":"Enable Vim support for Structural editing","text":"<p>, T s toggles evil safe structural editing in all languages that support using evil-cleverparens.  This package is included in the Clojure layer, but by default this mode is not activated.</p> <p>Safe Structural editing in Vim normal state respects structural editing, meaning the standard vim commands can be used for cutting and deleting text without breaking Clojure or Lisp code structures. <code>\ud83c\udd82</code> symbol is displayed in the mode-line when evil safe structural editing is enabled.</p> <p></p> <p>Enable for all clojure buffers by adding the following function in <code>dotspacemacs/user-config</code></p> <pre><code>(spacemacs/toggle-evil-safe-lisp-structural-editing-on-register-hook-clojure-mode)\n</code></pre> <p>To enable evil safe structural editing for all supported modes:</p> <pre><code>(spacemacs/toggle-evil-safe-lisp-structural-editing-on-register-hooks)\n</code></pre> <p>Evil Cleverparents for Evil state</p> <p>ensures Vim Normal commands respect the structure of the language, i.e. will not delete parents that contain code.</p>"},{"location":"structural-editing/cleverparens/","title":"Evil Cleverparens safe structural editing","text":"<p>With <code>evil-cleverparens</code> enabled, editing in Evil Normal state respects the structure of your code.</p> Spacemacs Evil Description <code>SPC m T s</code> <code>, T s</code> Enable evil safe structural editing for the current buffer <p>Default safe structural editing for all major modes by adding the following to <code>dotspacemacs/user-config</code> in <code>.spacemacs</code> or <code>.spacemacs.d/init.el</code></p> <pre><code>  (spacemacs/toggle-evil-safe-lisp-structural-editing-on-register-hooks)\n  ;; for clojure layer only (comment out line above)\n  ;; (spacemacs/toggle-evil-safe-lisp-structural-editing-on-register-hook-clojure-mode)\n</code></pre>"},{"location":"structural-editing/cleverparens/#evil-normal-editing","title":"Evil normal editing","text":"<p>Evil-cleverparens modifies some of the existing behaviour of Evil keybindings.  It also adds some extra keybindings that use forms as a text object.</p> Keybinding Description <code>d d</code> deletes the current line, moving closing parens to live above <code>D</code> deletes from point to end of line, keeping closing parens <code>H</code> Move backward by sexp <code>L</code> Move forward by sexp <code>M-a</code> Append at end of current form (insert) <code>M-i</code> Insert at start of current form (insert) <code>M-h</code> Move to the beginning of a top-level form <code>M-l</code> Move to the end of the top-level form <code>M-O</code> New line before current form (insert) <code>M-o</code> New line after current form (insert) <code>x</code> if point on parens, unwrap expression, else delete character at point <code>_</code> jump point to the first non-blank non-opening paren"},{"location":"structural-editing/cleverparens/#slurping-and-barfing","title":"Slurping and Barfing","text":"<p><code>&lt;</code> and <code>&gt;</code> to slurp and barf, both forwards and backwards depending on cursor location</p> <p>On an open delimiter, <code>(</code>, <code>[</code>, <code>{</code></p> <ul> <li><code>&lt;</code> slurp backwards as many times as there are preceding opening delimiters.</li> <li><code>&lt;</code> barf forwards unless form contains a single sexp</li> </ul> <p>On a closing delimiter, <code>)</code>, <code>]</code>, <code>}</code></p> <ul> <li><code>&gt;</code> slurp forwards as many times as there are closing delimiters behind</li> <li><code>&gt;</code> barf backwards unless form contains a single sexp</li> </ul> <p>When inside a form <code>&lt;</code> will barf and <code>&gt;</code> will slurp forwards.</p>"},{"location":"structural-editing/cleverparens/#wrapping","title":"Wrapping","text":"Key Behaviour <code>M-(</code> Wrap next sexp in <code>()</code> <code>M-)</code> Wrap the previous sexp in  <code>()</code> <code>M-[</code> Wrap the next sexp in <code>[]</code> <code>M-]</code> Wrap the previous sexp in  <code>[]</code> <code>M-{</code> Wrap the next sexp in <code>{}</code> <code>M-}</code> Wrap the previous sexp in <code>{}</code> <p>Start with a numeric argument to operate on multiple s-expressions until the end of the surrounding form.</p> <p><code>SPC-u</code> (universal argument) acts on the surrounding form instead. Each consecutive <code>SPC-u</code> wraps an additional expression from the surrounding form.</p>"},{"location":"structural-editing/cleverparens/#navigating-via-parens","title":"Navigating via parens","text":"<p>Evil-cleverparens has some convenient keybindings for jumping around code using the parens, including double quotes.</p> Key Description <code>(</code> Move backward up a sexp. <code>)</code> Move forward up a sexp. <code>[</code> Move to the previous opening parentheses <code>]</code> Move to the next closing parentheses <code>{</code> Move to the next opening parentheses <code>}</code> Move to the previous closing parentheses"},{"location":"structural-editing/cleverparens/#dragging-transposing","title":"Dragging / Transposing","text":"<p>Drag the expression under point forward or backward.</p> <p><code>M-j</code> <code>evil-drag-forward</code> drag expression forward</p> <p><code>M-k</code> <code>evil-drag-backward</code>  drag expression backward</p> <p>The depth of the expression being moved never changes, i.e. dragging is distinct from slurping or barfing.</p> <p>The expression affected is dependent on the location of the cursor:</p> <ul> <li>On top of a symbol acts on that symbol.</li> <li>Inside or on the delimiters of a form moves the form.</li> <li>If a symbol or a form can't be moved any further, the command acts on its surrounding form.</li> <li>Outside a form on a safe line will move the line.</li> <li>On a top-level comment will move the entire comment-block.</li> </ul> <p>The behavior of the command with respect to top-level sexps and lines can be customized with</p> <p><code>evil-cleverparens-drag-ignore-lines</code> (default <code>nil</code>)</p> <p><code>evil-cleverparens-drag-comment-blocks</code> to <code>nil</code> treats connected commented lines as singular units</p>"},{"location":"structural-editing/cleverparens/#copy-and-paste","title":"Copy and Paste","text":"<p><code>M-w</code> aka <code>evil-cp-evil-copy-paste-form</code> copies the surrounding form and inserts it below with the proper indentation.</p> <p>Call outside a form it will do the same with the current line instead (as long as its safe).</p> <p>Call with a numeric argument to repeat the paste operation multiple times.</p> <p>Call with <code>SPC-u</code> copy-paste the current top-level form and insert newlines between them.</p>"},{"location":"structural-editing/cleverparens/#from-smartparens","title":"From Smartparens","text":"<p>The following commands have been lifted straight from <code>smartparens</code>:</p> Key Behavior <code>M-q</code> <code>sp-indent-defun</code> <code>M-J</code> <code>sp-join-sexp</code> <code>M-s</code> <code>sp-splice-sexp</code> <code>M-S</code> <code>sp-split-sexp</code> <code>M-t</code> <code>sp-transpose-sexp</code> <code>M-v</code> <code>sp-convolute-sexp</code> <code>M-r</code> <code>sp-raise-sexp</code> <p><code>M-R</code> bound to <code>evil-cp-raise-form</code> acts like <code>sp-raise-sexp</code> but on the enclosing form instead of the next one.</p>"},{"location":"structural-editing/smartparens/","title":"Smartparens - Writing structural text","text":"<p>Spacemacs uses Smartparens to write and navigate code quickly, ensuring the structure of the code does not break (i.e. no unbalanced parens).</p> <p>smartparens keeps parens in balance by automatically creating a closing paren when you type an open paren, e.g () for lists,  [] for vectors, {} for maps and \"\" for strings.</p>"},{"location":"structural-editing/smartparens/#smartparens-strict-mode","title":"Smartparens strict mode","text":"<p>Enable strict mode to prevent the deletion of parens that would leave them unbalanced.  For example, the characters within parens must be deleted before deleting both parens at the same time.</p> <p> </p> <p>Space f e d to edit the Spacemacs configuration file and update <code>dotspacemacs-smartparens-strict-mode</code> to have a value of <code>t</code></p> <p></p> <p>Smartparens supports all languages</p> <p>Smartparens is a newer implementation of paredit package and provides support for all languages, not just Clojure. Paredit and smartparens has a comparison of these two packages.</p>"},{"location":"structural-editing/smartparens/#jump-past-the-end-of-an-expression","title":"Jump past the end of an expression","text":"<p>Using smart closing parenthesis, <code>)</code> jumps to the end of the current expression.</p> <p><code>C-q</code> temporarily disables this feature, allowing a <code>)</code> to be entered</p> <p><code>dotspacemacs-smart-closing-parenthesis</code> in <code>.spacemacs</code> controls this feature, set this to <code>t</code> to enable.</p> <pre><code>dotspacemacs-smart-closing-parenthesis t\n</code></pre>"},{"location":"structural-editing/smartparens/#smartparens-and-symbol-highlighting","title":"Smartparens and symbol highlighting","text":"<p>Spacemacs highlights the surrounding symbols, including any parents.  So if you are in a nested list, <code>(parent code (nested code))</code>, then if the cursor is on the nested code, both nested &amp; parent symbols are highlighted.</p> <p>A closing symbol is also highlighted when the cursor is at the opening symbol.</p>"},{"location":"structural-editing/smartparens/#references","title":"References","text":"<ul> <li>Animated guide to paredit</li> </ul>"},{"location":"structural-editing/lisp-state/","title":"Lisp State","text":"<p>Lisp state provides a fast and convenient way to manipulate the structure of your Clojure code whilst keeping it valid, i.e. avoiding unbalanced parenthesis.</p> <p><code>SPC k</code> opens the lisp state menu, providing commands for structural editing with Smartparens.  Any command will put the current buffer into lisp state, a transient state where you can use single character keybindings for the commands (no need to use <code>SPC k</code> each time).</p>"},{"location":"structural-editing/lisp-state/#repeating-lisp-state-commands","title":"Repeating Lisp State Commands","text":"<p>In Lisp State, as with Evil normal, typing a number before the command will repeat that command.  For example</p> <p><code>2 s</code> slurp two times, starting from Evil normal state</p> <p><code>w 2 s</code> wrap a symbol in parenthesis then slurp two times</p>"},{"location":"structural-editing/lisp-state/#common-commands","title":"Common commands","text":"Lisp state <code>SPC k</code> Description <code>j</code> /  <code>k</code> next close paren / previous open paren <code>l</code> /  <code>h</code> next symbol / previous symbol <code>L</code> /  <code>H</code> next expression / previous expression <code>s</code> /  <code>S</code> slurp forward / backward (pull in code from the right / left) <code>b</code> / <code>B</code> barf forward / backward (push out code to the right / left) <code>d s</code> / <code>d w</code> / <code>d x</code> delete symbol / word / expression <code>r</code> raise expression - replace parent expression with current expression <p>This section provides further examples of the most common lisp state commands.  The Spacemacs ABC video also covers examples of Lisp State.</p>"},{"location":"structural-editing/lisp-state/#todotodo-video-of-structural-editing-with-lisp-state","title":"TODO::TODO: Video of Structural editing with Lisp State","text":""},{"location":"structural-editing/lisp-state/#key-bindings","title":"Key Bindings","text":"Key Binding Function <code>SPC k %</code> evil jump item <code>SPC k :</code> ex command <code>SPC k (</code> insert expression before (same level as current one) <code>SPC k )</code> insert expression after (same level as current one) <code>SPC k $</code> go to the end of current sexp <code>SPC k 0</code> go to the beginning of current sexp <code>SPC k a</code> absorb expression <code>SPC k b</code> forward barf expression <code>SPC k B</code> backward barf expression <code>SPC k c</code> convolute expression <code>SPC k ds</code> delete symbol <code>SPC k Ds</code> backward delete symbol <code>SPC k dw</code> delete word <code>SPC k Dw</code> backward delete word <code>SPC k dx</code> delete expression <code>SPC k Dx</code> backward delete expression <code>SPC k e</code> unwrap current expression and kill all symbols after point <code>SPC k E</code> unwrap current expression and kill all symbols before point <code>SPC k h</code> previous symbol <code>SPC k H</code> go to previous sexp <code>SPC k i</code> switch to <code>insert state</code> <code>SPC k I</code> go to beginning of current expression and switch to <code>insert state</code> <code>SPC k j</code> next closing parenthesis <code>SPC k J</code> join expression <code>SPC k k</code> previous opening parenthesis <code>SPC k l</code> next symbol <code>SPC k L</code> go to next sexp <code>SPC k p</code> paste after <code>SPC k P</code> paste before <code>SPC k r</code> raise expression (replace parent expression by current one) <code>SPC k s</code> forward slurp expression <code>SPC k S</code> backward slurp expression <code>SPC k t</code> transpose expression <code>SPC k u</code> undo <code>SPC k U</code> got to parent sexp backward <code>SPC k C-r</code> redo <code>SPC k v</code> switch to =visual state= <code>SPC k V</code> switch to =visual line state= <code>SPC k C-v</code> switch to =visual block state= <code>SPC k w</code> wrap expression with parenthesis <code>SPC k W</code> unwrap expression <code>SPC k y</code> copy expression"},{"location":"structural-editing/lisp-state/#hint-spc-does-not-activate-spacemacs-menu","title":"Hint:: <code>SPC</code> does not activate Spacemacs menu","text":"<p>In lisp-state the Spacemacs leader key, <code>SPC</code>, is not bound to the Spacemacs menu.  <code>M-m</code> can be used to open the Spacemacs menu.</p>"},{"location":"structural-editing/lisp-state/#references","title":"References","text":"<ul> <li>evil-lisp-state and keybindings</li> <li></li> </ul>"},{"location":"structural-editing/lisp-state/deleting/","title":"Deleting symbols, words &amp; expressions","text":"<p>In lisp-state you can easily delete symbols, words and expressions without deleting the structures they are in (unless that structure is empty).</p> <p>Delete a symbol, word or expression using the <code>d</code> menu</p> lisp-state Description d s delete the current symbol d w delete the current word d x delete the current expression <p>Evil Safe Structural Editing</p> <p>Enable evil-cleverparens to Vim editing respect structural editing.  For example, using <code>d d</code> will delete a line within a function without unbalancing the outer parenthesis. Closing parentheses are pulled up to the preceding line, keeping the correct formatting for the Clojure code.</p>"},{"location":"structural-editing/lisp-state/raising/","title":"Raising expressions","text":"<p>Instead of barfing out an expression from its parent and then deleting the parent, you can raise a nested expression and replace its parent all in one go.</p> Key Description <code>r</code> raise the current expression to replace its parent"},{"location":"structural-editing/lisp-state/slurp-barf/","title":"Slurp and barf","text":"<p>When writing Clojure you sometimes put symbols or expressions in the wrong parenthesis, <code>()</code>, <code>[]</code>, <code>{}</code>.  Rather than delete the code or parenthesis you can use structural editing to move the code between parenthesis.  So you can change the behaviour of the code without worrying about breaking the structure.</p> <ul> <li>Slurp - pull something into an expression (like slurping a really thick milkshake)</li> <li>Barf - push out something from an expression (like barfing out that milkshake if it tasted unpleasant)</li> </ul> Lisp state <code>SPC k</code> Description <code>b</code> barf forwards (push symbol out to right) <code>B</code> barf backwards (push symbol out to left) <code>s</code> slurp forwards (push symbol out to right) <code>S</code> slurp backwards (push symbol out to left)"},{"location":"structural-editing/lisp-state/slurp-barf/#todoadd-video-of-slurp-and-barf-in-action","title":"TODO::Add video of slurp and barf in action","text":""},{"location":"structural-editing/lisp-state/wrap-unwrap/","title":"Wrap &amp; unwrap with a list","text":"<p>You can wrap an element in a list, <code>( )</code> using wrap, <code>w</code>.</p> <p>To remove a list from one or more element use unwrap, <code>W</code></p> <p>TODO Video of wrapping and unwrapping symbols, words and expressions.</p>"},{"location":"termux/","title":"Spacemacs on Termux","text":"<p>A smart phone or tablet and an external keyboard can make an excellent ultra-portable development environment, especially when travelling with limited space or weight constraints.</p> <p>Termux can be installed using the F-Droid marketplace, which is as easy as installing any other Android app.</p> <p>Do not install Termux App from the Google Play store</p> <p>The Termux App in Google Play store is out of date and will simply not work properly and probably not at all</p> <p></p>"},{"location":"termux/#running-termux","title":"Running Termux","text":"<p>Run Termux from the app launcher added as an android app by the F-Droid install.</p> <p>A help menu will show the basic command needed to work with packages.</p> <p>Software keys for Termux specific controls are shown.  Keys can be toggled with the <code>Volume Up + q</code> key combination.</p> <p></p> <p>Termux may not display in fullscreen when Android productivity mode, usually activated on tablets when physical keyboard or mouse is attached.  Disabling productivity mode in the Android settings is recommended.</p>"},{"location":"termux/clojure-development/","title":"Clojure development environment","text":"<p>A comprehensive development environment for Clojure, supporting a REPL workflow and static analysis of code via Clojure Language Server Protocol.</p>"},{"location":"termux/clojure-development/#java-host-platform","title":"Java host platform","text":"<p>Install OpenJDK to host the Clojure REPL process and run packaged Clojure applications.</p> <p>Java 17 Long Term Support version is recommended as it is very stable, receives security updates and has the latest highly tested performance improvements.</p> <pre><code>pkg install openjdk-17\n</code></pre>"},{"location":"termux/clojure-development/#install-clojure","title":"Install Clojure","text":"<p>Clone practicalli/clojure-deps-edn to add a wide range of community tools to the Clojure CLI</p> <pre><code>git clone git@github.com:practicalli/clojure-deps-edn.git ~/.config/clojure\n</code></pre> <p>Use the Linux install with a prefix path pointing to Termux equivalent of <code>/usr/local</code>.  Find the path using <code>echo $PATH</code> and remove <code>bin</code> from the end.  Without the prefix Clojure will not install correctly</p> <pre><code>curl -O https://download.clojure.org/install/linux-install-1.11.1.1149.sh\n\nchmod +x linux-install-1.11.1.1149.sh\n\n./linux-install-1.11.1.1149.sh --prefix /data/data/com.termux/files/usr/\n</code></pre> <p><code>clojure</code> binary is installed in the existing bin, lib and share directories in <code>/data/..../usr/</code>, placing that binary on the system execution path.</p> <p>Test by running a REPL session, for example with Rebel Readline</p> <pre><code>clojure -M:repl/rebel\n</code></pre> <p>optionally install rlwrap package if using the basic repl terminal UI</p>"},{"location":"termux/clojure-development/#install-clojure-lsp","title":"Install Clojure LSP","text":"<p>Visit clojure-lsp GitHub releases page and download the <code>clojure-lsp</code> file</p> <ul> <li>visit the relases page in firefox and copy the link to the file.</li> <li>use wget and paste the link to the file to download</li> <li>make executable <code>chmod 755 clojure-lsp</code></li> <li>test locally <code>./clojure-lsp --version</code> - should print clojure-lsp version and clj-kondo version</li> <li>copy or move file to path <code>mv clojure-lsp $PATH</code></li> </ul> <p>Clone practicalli/clojure-lsp-config repository to the <code>~/.config/clojure-lsp</code> directory</p> <pre><code>git clone https://github.com/practicalli/clojure-lsp-config.git ~/.config/clojure-lsp\n</code></pre>"},{"location":"termux/custom-shell/","title":"Customise shell","text":"<p>Customising the shell is optional, although gives an enhanced experience.</p> <p>Zsh provides the richest command line experience, providing many advanced features over bash.  Oh My Zsh is a community configuration that provides a simple way to configure Zsh features and also supports powerline10k terminal theme, providing context specific information and a more engaging visual experience.</p> <p>Oh My Zsh community configuration enhances the Zsh experience.  Practicalli normally uses Prezto community configuration, unfortunately this did not work well on Termux.</p>"},{"location":"termux/custom-shell/#install-zsh","title":"Install Zsh","text":"<p>Install the zsh package using the Termux package manager</p> <pre><code>pkg install zsh\n</code></pre> <p>Start zsh, which will show a <code>%</code> character as the prompt</p> <pre><code>zsh\n</code></pre> <p>Set the shell to run zsh by default</p> <pre><code>chsh -s zsh\n</code></pre>"},{"location":"termux/custom-shell/#install-oh-my-zsh","title":"Install Oh My Zsh","text":"<p>Install Oh My Zsh via curl (or wget if preferred) in the <code>.oh-my-zsh/</code> directory</p> <pre><code>sh -c \"$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n</code></pre>"},{"location":"termux/custom-shell/#install-powerline10k","title":"Install Powerline10k","text":"<p>Powerline10k is a visually appealing prompt with a setup script to visually choose the presentation of the prompt.</p> <pre><code>git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k\n</code></pre> <p>Next time zsh is run, powerline10k setup script will run.  If Meslo is not set as the terminal font, the setup script offers to install the font.  Installing the font will restart Termux.</p> <p><code>p10k configure</code> to manually run the powerline10k setup script.</p> <p>Using Oh My Bash</p> <p>If preferring Bash, then ohmybash provides a nice command line experience, showing completions clearer, nice themes that provide information.</p>"},{"location":"termux/fdroid-install/","title":"Install Termux via the F-Droid App","text":"<p>Visit the FDroid app website and download F-Droid, which saves an F-Droid.apk file.  Android may display a security prompt stating the browser does not have permissions to install software.  The popup should include a configure link that opens the Android settings to allow the browser to install software.</p> <p>F-Droid should now be installed and its icon added to the Android system alongside all other Android apps.</p> <p>Open the F-Droid App and allow it to update its repositories, to ensure the latest list of apps are shown.</p> <p>Search for the Termux application, clicking on the Termux name if more details are required.</p> <p>Select the Install button.</p> <p></p> <p>When installing apps from F-Droid for the first time, a security prompt is show as F-Droid is an unknown source.</p> <p>Select Settings to open the Android settings and enable Allow from this source for the F-Droid app.</p> <p></p> <p>A Termux App launcher will be added to the Android screen.  Consider adding the Termux icon to the commonly used icons bar.</p>"},{"location":"termux/fdroid-install/#termux-styling","title":"Termux Styling","text":"<p>Styling is a Termux plugin that provides a visually richer experience. Styling contains beautiful color schemes and powerline-reaqdy fonts to customise the appearance of the terminal</p> <p>Install the package via F-Droid</p> <p></p> <p>The styling menu is accessed via a long press on the Termux app screen, showing a More &gt; Style option on the usual cut/copy/paste popup menu. Practicalli recommends <code>FiraCode</code> fonts.</p>"},{"location":"termux/git/","title":"Git version control","text":"<p>A Git client is used to version control projects and to clone projects and configuration from GitHub/GitLab.  Practicalli maintains several editor configurations in shared repositories on GitHub</p> <ul> <li>Install a Git Client (and optionally GitHub CLI)</li> <li>[optionally] clone the practicalli/dotfiles repository for the Git config and global ignores</li> <li>Configure an SSH key to access remote repositories (or Developer token if you cannot use SSH keys)</li> </ul>"},{"location":"termux/git/#install-a-git-client-and-github-cli","title":"Install a git client and GitHub CLI","text":"<pre><code>pkg install git gh\n</code></pre> <p>Clone the practicalli/dotfiles repository</p> <pre><code>git clone https://github.com/practicalli/dotfiles projects/dotfiles\n</code></pre> <p>Move or symbolically link the top-level directories to <code>~/.config</code>, e.g. for the Git configuration:</p> <pre><code>ln -s projects/dotfiles/git ~/.config/git\n</code></pre> <p>Edit the <code>.config/git/config</code> and update the <code>core.user</code>,  <code>core.name</code> and <code>github</code> or <code>gitlab</code> identities</p>"},{"location":"termux/git/#create-ssh-key-for-remote-repository-access","title":"Create SSH Key for remote repository access","text":"<p>Install the openssh package which contains the <code>ssh-keygen</code> command to generate a new public/private key combinations for use with GitHub SSH repository URLs</p> <pre><code>pkg install openssh\n</code></pre> <p>Generate a key using the email address of the GitHub or GitLab account</p> <pre><code>ssh-keygen -t rsa -C name@domain.tld\n</code></pre> <p>RET to confirm storing the keys in the default location.</p> <p>Usually a passphrase is recommended, however, termux does not seem to save a keyring to save the key passphrase using <code>ssh-add</code>.  So the passphrase must be entered each time the key is used, unless a blank passphrase is used.</p> <p>Vist your GitHub account settings and create a new SSH key</p> <p>Use <code>cat  ~/.ssh/id_rsa.pub</code> to show the public key contents.  Press the screen to select and copy the public key to the clipboard.</p> <p>Paste the public key into the GitHub new key form.</p>"},{"location":"termux/git/#optional-create-a-developer-token","title":"[optional] Create a developer token","text":"<p>A developer token (or ssh key) is required to access GitHub {and far more secure over password}</p> <p>Should the android device become lost or compromised, the developer token can be deleted to protect the repositories from any malicious access.  The developer token should be limited to the minimal access.  The developer token does not give access to the GitHub or GitLab account.</p> <p>HTTPS URLs should be used with a developer token.  git@git.com URLs are for SSH keys only.</p> <p>Visit GitHub / GitLab settings for your account</p> <p>Create a new developer token specifically for Termux</p> <p>Add a descriptive name for the token, based on the device Termuxc is runniung on, e.g. <code>Termux Pixel2XL</code></p> <p>Check the public_repo and status repo scopes</p> <p>Generate button creates a new token.</p> <p>Copy the token using the copy icon.</p> <p>Edit the <code>.config/git/config</code> file and add a github section with the GitHub account name and token</p> <pre><code>[github]\n    name = practicalli\n    token = ghp_************************************\n</code></pre> <p>Consider using GitHub CLI to cache the developer token rather than write the token to the Git configuration file for greater security.</p>"},{"location":"termux/setup/","title":"Termux Setup","text":"<p>Launch Termux via its application icon.  A black terminal screen will appear with a bash shell prompt.</p>"},{"location":"termux/setup/#update-packages","title":"Update packages","text":"<p>Check for new packages and update them all</p> <pre><code>package upgrade -y\n</code></pre> <p>If you wish to first check the packages that will be updated, use <code>pkg --list-upgradable</code></p> <p><code>termux-change-repo</code> to select a specific region to minimise the number of mirrors checked during package upgrades, especially useful if on a limited data plan.</p> <p></p> <p>At time of writing, the Termux package on F-Droid was around 6 months old so there will be a number of packages that should be updated before any further installation steps are undertaken.</p>"},{"location":"termux/setup/#configure-freedesktoporg-xdg-locations","title":"Configure Freedesktop.org XDG locations","text":"<p><code>nano ~/.profile</code> to edit the <code>~/.profile</code> file, adding export directives to set the XDG locations:</p> <pre><code>export XDG_CONFIG_HOME=$HOME/.config\nexport XDG_DATA_HOME=$HOME/.local/share\nexport XDG_STATE_HOME=$HOME/.local/state\nexport XDG_CACHE_HOME=$HOME/.cache\n\n# Set XDG location of Emacs Spacemacs configuration\nexport SPACEMACSDIR=\"$XDG_CONFIG_HOME/spacemacs\"\n</code></pre> <p><code>source ~/.profile</code> to load the environment variables into the shell, or exit Termux and restart.</p> <p>nano editor installed by default</p> <p><code>nano</code> editor is used to edit the commands as the package is installed by default in termux. <code>vim</code>, <code>neovim</code>, <code>emacs</code> or any other Linux command line editor can be used if the package is first installed.  Termux will list packages to install when trying to run a command that is from a package not yet installed.</p>"},{"location":"termux/setup/#tools-to-download-binaries-and-configuration","title":"Tools to download binaries and configuration","text":"<p>Many tools can be installed via the <code>pkg</code> tool, although specific Clojure tools and configuration require additional tools:</p> <ul> <li><code>wget</code> and <code>curl</code> - download tools not packaged, i.e. clojure-lsp binary</li> <li><code>git</code> - clone configuration files and projects (see Git version control section)</li> <li><code>openssh</code> - SSH service and tools to generate SSH keys</li> </ul> <pre><code>pkg install curl wget git openssh\n</code></pre> <p>Configure a Git Identify and SSH key to before committing and pushing changes, or cloning repositories using the SSH protocol.  practicalli/dotfiles contains example configuration, ignore patterns and commit template for using Git.</p>"},{"location":"termux/setup/#optional-configure-termux-settings","title":"[Optional] Configure Termux Settings","text":"<p><code>nano ~/.termu/termux.properties</code> to configure the default settings for termux.</p> <p><code>termux-reload-settings</code> if any of the values are set (restarting Termux is not enough to load setting changes)</p> <p>The defaults are suitable for the majority of uses, although you may wish to consider:</p> <ul> <li><code>fullscreen</code> set to <code>true</code> to us the whole screen, hiding Android menu bars, etc.</li> <li><code>hide-soft-keyboard-on-startup</code> set to <code>true</code> if always using a physical keyboard</li> <li><code>default-working-directory</code> to save files user files and directories in an alternative location,</li> </ul> <p>If swiping from left edge of the screen is already taken, set key bindings for creating a new termux session, naming a session and switching between sessions.  Alternatively, use byobu to create and switch between its tabs for multiple terminal sessions.</p>"},{"location":"termux/setup/#set-color-scheme-and-font","title":"Set Color Scheme and Font","text":"<p>The Termux:Styling plug provides menus for selecting terminal color scheme and font to use</p> <p>Press and hold on the Termux screen to show the context menu and select the Style menu.  On smaller screens select More &gt; Style</p> <p>If Termux:Styling plugin was not installed, a prompt will display asking if the plugin should be installed</p> <p>A menu appears with Choose Color and Choose Font</p> <p>Select Choose Color to select from the available list of colour schemes, e.g. Gruvbox Dark or Gruvbox Light</p> <p><code>~/.termux/colors.properties</code> file is added when selecting a colour scheme, defining Hex colors from the theme selected.</p> <p>Select Choose Font to select from the available fonts, e.g. FiraCode or Ubuntu</p> <p><code>~/.termux/font.ttf</code> font file is added when selecting a font.</p> <p>Termux:Styling uses NerdFonts for icons</p> <p>All fonts installed via <code>Termux:Styling</code> have been patched with NerdFonts, providing several thousand icons to use within the terminal prompt and Neovim itself (e.g. VimDevIcons).</p>"},{"location":"termux/spacemacs/","title":"Install Spacemacs","text":"<p>Emacs version 28 available as current package</p> <pre><code>pkg install emacs\n</code></pre>"},{"location":"termux/spacemacs/#clone-spacemacs","title":"Clone Spacemacs","text":"<p>Use your favourite git client or the following command in a terminal window to clone Spacemacs:</p> Free Desktop XDG configClassic config <pre><code>git clone https://github.com/syl20bnr/spacemacs ~/.config/emacs\n</code></pre> <pre><code>git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d\n</code></pre>"},{"location":"termux/spacemacs/#clone-practicalli-spacemacs-configuration","title":"Clone Practicalli Spacemacs configuration","text":"<p>Clone practicalli/spacemacs.d configuration or first create a fork and clone that fork</p> Free Desktop XDG configClassic config <p>Using SSH <pre><code>git clone git@github.com:practicalli/spacemacs-config.git ~/.config/spacemacs\n</code></pre></p> <p>Using HTTPS <pre><code>git clone https://github.com/practicalli/spacemacs-config ~/.config/spacemacs\n</code></pre></p> <p><code>~/.config/spacemacs/init.el</code> is the main configuration file, ensure <code>~/.spacemacs</code> file does not exist as that file would take precedence.</p> <p>Ensure <code>SPACEMACSDIR</code> environment variable is set to the Practicalli Spacemacs configuration directory in the <code>~/.profile</code> file SPACEMACSDIR environment variable in ~/.profile<pre><code>export XDG_CONFIG_HOME=$HOME/.config\nexport XDG_DATA_HOME=$HOME/.local/share\nexport XDG_STATE_HOME=$HOME/.local/state\nexport XDG_CACHE_HOME=$HOME/.cache\n\n# Set XDG location of Emacs Spacemacs configuration\nexport SPACEMACSDIR=\"$XDG_CONFIG_HOME/spacemacs\"\n</code></pre></p> <p>Using SSH <pre><code>git clone git@github.com:practicalli/spacemacs.d.git ~/.spacemacs.d\n</code></pre></p> <p>Using HTTP <pre><code>git clone https://github.com/practicalli/spacemacs.d ~/.spacemacs.d\n</code></pre></p> <p><code>~/.spacemacs.d/init.el</code> is the main configuration file, ensure <code>~/.spacemacs</code> file does not exist as that file would take precedence.</p>"},{"location":"termux/spacemacs/#searching-files","title":"Searching files","text":"<p>Spacemacs uses ripgrep, a highly optimised tool for finding files on the operating system.</p> <pre><code>pkg install ripgrep\n</code></pre>"},{"location":"termux/using-termux/","title":"Using Termux","text":"<p>Start Termux app and a terminal prompt is shown, along with the standard Android software keyboard.  An extended keyboard is provided with common key bindings for the command line interface (Tab, Esc, Ctrl, arrow keys, etc.).</p> <p></p>"},{"location":"termux/using-termux/#keyboards","title":"Keyboards","text":"<p>Termux provides an extended keyboard with key combinations not possible with the Android software keyboard, i.e <code>Ctrl-c</code>, arrow keys, etc.  <code>TAB</code> is especially useful for driving command and filename completion.</p> <p><code>Volume Up + q</code> toggles the extended keyboard, so more screen is available when using a hardware keyboard.</p> <p>Connect a hardware keyboard for the best experience, e.g the Keyboard.io atreus is an excellent and highly portable mechanical keyboard. The software keyboard is automatically switched off when a hardware keyboard is connected, although the extended keyboard is still displayed by default.</p>"},{"location":"termux/using-termux/#adjusting-font-size","title":"Adjusting Font size","text":"<p>Pinch the screen inwards to zoom out making the text font smaller.</p> <p>Pinch the screen outwards to zoom in making the text font larger.</p>"},{"location":"termux/using-termux/#termux-menus","title":"Termux menus","text":"<p>Termux has three menus: A context menu, navigation drawer and Termux section of the Android notification.</p> <p>The context menu is shown by a long press anywhere on the terminal screen:</p> <ul> <li><code>Select</code> and <code>Paste</code> text to share text with other applications</li> <li><code>Reset</code> the terminal if it gets stuck or <code>Hangup</code> to exit the current terminal session</li> <li><code>Style</code> the terminal by selecting a font and a color scheme</li> </ul> <p>The navigation drawer is shown by swiping inwards from the left of the screen</p> <ul> <li>list and select terminal sessions, set a name for a session with a long press</li> <li>A button to toggle visibility of the touch keyboard.</li> <li>A button to create new terminal sessions (long press for creating a named session or a fail-safe one).</li> </ul> <p>If gesture navigation is enabled in Android, hold the edge of the screen briefly before swiping to bring up the navigation drawer</p> <p>The Android notification menu contains a Termux section. Press the Termux section to show the current terminal session or expand the Termux section to exiting all running terminal sessions or acquire a wake lock to avoid Termux entering sleep mode. A wake lock allows server and other background processes to run reliably and to continue to receive notifications</p>"},{"location":"termux/using-termux/#package-management","title":"Package management","text":"<p>Termux provides a Linux command line experience, providing a wide range of Unix tools and development environments.  Termux uses a Debian based system and packages are easily installed</p> <ul> <li><code>apt install</code> add tools and libraries to the Linux environment from the curated packages in the software center</li> <li><code>apt update</code> updates the list of packages fromhe software center</li> <li><code>apt list --upgradable</code> shows list of packages with new versions</li> <li><code>apt upgrade</code> install new versions of currently installed packages</li> <li><code>apt-cache search --names-only</code> - search for packages that include a specific pattern in their name.</li> <li><code>apt-cache show</code> - shows detail of the supplied package name, including a description</li> </ul> <p><code>pkg</code> is an alias for <code>apt</code>, the advance package tool, although there seems little benefit to using pkg if familiar with apt (they are both 3 characters)</p>"},{"location":"termux/using-termux/#byobu-terminal-tab-manager","title":"Byobu terminal tab manager","text":"<p>Byobu is an alternative to Termux provides a single terminal prompt. Byobu provides multiple shell prompts, allowing individual Clojure tools and editors to be run from the Termux prompt simultaneously.  Practicalli uses byobu to run Spacemacs, a Clojure REPL and unit test watcher in separate byobu tabs with the ability to add further tabs for other command line tools.</p> <pre><code>pkg install byobu\n</code></pre> <ul> <li><code>F2</code> to create a new tab</li> <li><code>F3</code> to select previous tab</li> <li><code>F4</code> to select next tab</li> </ul> <p><code>byobu-enable</code> command will configure the current shell to run byobu on startup.  Test this is working by typing <code>exit</code> in Termux and start Termux app again. <code>byobu-disable</code> stops this behaviour and byobu will need to be run manually after starting Termux.</p> <p>Run the <code>byobu-enable</code> command again if zsh is configured after this step or if adding any other shell to Termux.</p>"},{"location":"testing/","title":"Testing","text":"<p>There are many aspects to testing software throughout the development lifecycle.</p> Category Description Unit testing Assertion based testing of specific functions (units) Specification testing Checking data and functions conform to <code>clojure.spec</code> specifications Generative testing Automatically generated data to test specifications Integration testing Tests across system components and multiple systems, typically during the build process Performance testing Measuring the resources taken during function calls and system events Load testing Measuring the capacity for the system to manage concurrent events"},{"location":"testing/#unit-testing","title":"Unit testing","text":"<p><code>clojure.test</code> is the de facto unit testing framework for Clojure. Tests have a simple syntax using <code>deftest</code> to contain multiple assertions defined with <code>is</code>. It is part of the Clojure.core library and therefore accessible to all Clojure projects.</p> <p>expectations.clojure.test library can be added to clojure test to provide expectations style assertions (<code>expect</code>, <code>more</code>, <code>more-of</code>, etc.).</p>"},{"location":"testing/#specification-testing-clojurespec","title":"Specification testing - <code>clojure.spec</code>","text":"<p>Defining specifications around functions and data structures, testing to ensure those contracts are not broken.  Instrumentation of functions ensures that function calls follow specifications, including arguments, return values and a relationship between both.</p>"},{"location":"testing/#generative-testing","title":"Generative Testing","text":"<p>Tests are only as good as the thought that goes into them.  Generative testing can create a wider range of testing scenarios by providing generated data for tests.  This approach is very good at catching conditions that were not considered.</p>"},{"location":"testing/#integration-testing","title":"Integration testing","text":"<p>Continuous Integration (CI) services CircleCI, GitHub and GitLabs all support Clojure projects.</p> <p>Clojure has several test runners that can be used with CI servers and practicalli/clojure-deps.edn defines a range of aliases for Clojure test runners.</p> <ul> <li><code>:test/run</code> to run lambdaisland/kaocha test runner, which is configured to stop immediately if any tests fail, minimising the time the CI workflow is running.</li> <li><code>test/cognitect</code> to run cognitect-labs/test-runner, a light-weight test runner</li> </ul>"},{"location":"testing/#performance-testing","title":"Performance testing","text":"<p>Tesing the execution time of specific functions or groups of functions, typically within a namespace.</p> <p><code>time</code> is a quick and easy tool to give a rough comparison of performance.</p> <p><code>criterium</code> provides more accurate guidance on performance</p>"},{"location":"testing/#load-stress-testing","title":"Load / Stress Testing","text":"<p>Testing the whole system under load that simulate the stress the system would be placed under in normal production environments.</p> <p>Gattling is a JVM load tool.</p> <p>There are many on-line load testing tools if you have a web facing application.</p>"},{"location":"testing/kaocha-test-runner/","title":"Kaocha Test Runner","text":"<p>LambdaIsland/Kaocha is a feature rich test runner for Clojure and ClojureScript.</p> <p>Koacha is typically run on the command line or as part of a continuous integration workflow.</p> <p>Kaocha can also be run as an alternative to the cider-test runner as the Spacemacs Clojure layer now includes kaocha-runner.el.  Kaocha provides options to fail-fast (stops when a test fails) and</p>"},{"location":"testing/kaocha-test-runner/#using-kaocha-from-emacs-cider","title":"Using Kaocha from Emacs Cider","text":"<p><code>SPC f e d</code> to edit the Spacemacs configuration file, adding <code>clojure-enable-kaocha-runner t</code> as a variable to the Clojure layer.</p> <p>Start a REPL process that includes the kaocha library</p> <p><code>:lib/kaocha</code> alias in practicalli/clojure-deps-edn includes Kaocha as a library</p> <pre><code>clojure -M:lib/kaocha:repl/rebel\n</code></pre>"},{"location":"testing/kaocha-test-runner/#key-bindings","title":"Key bindings","text":"<p><code>, t k a</code> to run all tests</p> <p><code>, t k t</code> to run the deftest at point (under the cursor)</p> <p><code>, t k n</code> to run tests in the current namespace</p> <p><code>, t k w</code> to show warnings from the kaocha runner</p> <p><code>, t k h</code> to hide the kaocha test window</p> <p>Kaocha runner uses kaocha.repl</p> <p>kaocha-runner.el uses the the same approach as running Kaocha from the REPL</p>"},{"location":"testing/kaocha-test-runner/#using-kaocha-from-command-line","title":"Using Kaocha from Command Line","text":"<p>Kaocha on the command line will run tests from the saved code files, so is very useful to run before committing files as well as during a Continuous Integration workflow.</p> <p>practicalli/clojure-deps-edn defines aliases to run Kaocha from the <code>clojure</code> command:</p> <p><code>clojure -X:test/run</code> will run all tests found in the project, unless there is a failing test which will end the test run.</p> <p><code>clojure -X:test/watch</code> runs all test and then watches for changes to the test code, running again if a change is detected.</p>"},{"location":"testing/kaocha-test-runner/#kaocha-shell-script","title":"Kaocha shell script","text":"<p>Kaocha install guide recommends creating an executable shell script file, i.e. <code>bin/kaocha</code></p> <p>Use the <code>:test/run</code> alias from practicalli/clojure-deps-edn (or create an alias in the project <code>deps.edn</code> file)</p> <pre><code>#!/usr/bin/env bash\n\nclojure -X:test/run \"$@\"\n</code></pre> <p>Run the shell script to run all the tests</p> <pre><code>bin/kaocha\n</code></pre> <p>To continually watch a function, pass the watch argument <code>:watch? true</code></p> <pre><code>bin/kaocha :watch? true\n</code></pre> <p>Or define a binary that always watches, e.g. <code>bin/kaocha-watch</code> using the <code>:test/watch</code> alias from practicalli/clojure-deps-edn</p> <pre><code>#!/usr/bin/env bash\n\nclojure -X:test/watch \"$@\"\n</code></pre> <p>Configure kaocha in tests.edn</p> <p><code>tests.edn</code> in the root of a project can define the full range of options for Kaocha configuration options and is the preferred approach.</p>"},{"location":"testing/kaocha-test-runner/#continuous-integration-workflow","title":"Continuous Integration workflow","text":"<p>Add <code>:test/run</code> alias to the project <code>deps.edn</code> file and define kaocha configuration in a <code>tests.edn</code> file in the root of the project.</p> <p>Define a job that runs the tests that calls either the kaocha script or the <code>clojure</code> command to run all the tests.</p> <ul> <li>Banking on Clojure - using Kaocha Orb with Circle CI</li> </ul>"},{"location":"testing/unit-testing/","title":"Unit Testing","text":"<p>In Clojure the unit under test is the function.  Unit test coverage should test all public function that form the API of their respective namespace.</p> <p><code>clojure.test</code> namespace provides a unit testing framework and is included in the Clojure library, so is available in all Clojure projects.</p>"},{"location":"testing/unit-testing/#principles-for-writing-test-code","title":"Principles for writing test code","text":"<ul> <li>One <code>test</code> namespace for each <code>src</code> namespace</li> <li>One <code>deftest</code> function for each function under test</li> <li>Multiple <code>is</code> assertions for one function</li> <li>Group assertions in <code>testing</code> and provide a meaningful description of that grouping, adding more information when reviewing test failures especially for larger code bases.</li> </ul>"},{"location":"testing/unit-testing/#requiring-namespaces","title":"Requiring Namespaces","text":"<p>A test namespace has a singular purpose to test a matching application namespace.  Therefore the idiomatic approach is to <code>:refer</code> specific functions from <code>clojure.test</code>.</p> REPLClojure Project <pre><code>(require '[clojure.test :refer [deftest is testing]])\n</code></pre> <p>The namespace under test should be referred, using a meaningful alias name.</p> <pre><code>(require '[practicalli.playground :as playground])\n</code></pre> <p>Add <code>clojure.test</code> to the namespace definition along with the namespace under test.</p> <pre><code>(ns practicalli.app-namespace-test\n  (:require '[clojure.test :refer [deftest is testing]]\n             [practicalli.app-namespace :as app-namespace]))\n</code></pre> <p>Providing an alias that is the same name as the namespace being tested creates easily readable test code.</p>"},{"location":"testing/unit-testing/#project-structure-with-tests","title":"Project structure with tests","text":"<p>By convention, separate <code>src</code> and <code>test</code> directories are used to hold the source code and the code that tests the source code.</p> <p>For each source code file in <code>src</code> there should be a corresponding file in test with the same name and <code>-test</code> postfix.</p> <p>For example, code to test the <code>src/codewars/rock_paper_scissors.clj</code> is saved in the file <code>src/codewars/rock_paper_scissors_test.clj</code> file.</p> <p></p> <p>Create Projects from templates</p> <p>Templates typically include a parallel <code>test</code> and <code>src</code> directory structure.  The <code>clj-new</code> tool has build it templates (app, lib) and will create <code>src</code> and <code>test</code> directories in the projects it creates.</p> <p><code>clojure -X:project/new :template app :name practicalli/rock-paper-scissors-lizard-spock</code></p>"},{"location":"testing/unit-testing/#references","title":"References","text":"<ul> <li>Example based unit testing in Clojure - PurelyFunctional.tv</li> </ul>"},{"location":"testing/unit-testing/cider-test-deps-edn-projects/","title":"Cider test deps edn projects","text":""},{"location":"testing/unit-testing/cider-test-deps-edn-projects/#configure-unit-testing-for-depsedn-projects","title":"Configure Unit Testing for deps.edn projects","text":"<p>Cider test runner is a convenient way to run Clojure unit tests, using the same REPL for evaluating source code.</p> <p>The <code>test</code> directory must be included in the classpath when running the REPL, as test code is evaluated in the running REPL.</p> <p>An alias should be used to include the <code>test</code> directory.  The <code>test</code> path should not be part of the main <code>:paths</code> configuration, otherwise test code would be included in the jar or uberjar package and deployment.</p> <p>A <code>.dir-locals.el</code> file can include any number of aliases when using Cider jack-in.</p> <p>{% tabs practicalli=\"practicalli/clojure-deps-edn\", deps=\"Manual deps.edn projects\" %}</p> <p>{% content \"practicalli\" %}</p>"},{"location":"testing/unit-testing/cider-test-deps-edn-projects/#practicalli-user-level-aliases","title":"Practicalli user level aliases","text":"<p>practicalli/clojure-deps-edn user-level configuration contains several aliases for running tests within the CIDER jack-in REPL.</p> <p><code>:env/test</code> adds the <code>test</code> directory to the class path and enables CIDER test runner to find the test code.  This is the only alias required if using Cider test runner.</p> <p><code>:lib/kaocha</code> add the kaocha library to the class path, so kaocha can be used instead of CIDER test runner.</p> <p>Other aliases can be used with the <code>:env/test</code> alias to support cider-connect approach:</p> <p><code>:repl/cider</code> include the nrepl and cider-nrepl libraries and starts an nREPL server connected to the REPL</p> <p><code>:repl/rebel</code> run Rebel Readline, providing a rich terminal UI for the REPL</p> <p>{% content \"deps\" %}</p>"},{"location":"testing/unit-testing/cider-test-deps-edn-projects/#add-test-directory","title":"Add test directory","text":"<p>Add the <code>:env/dev</code> alias to the project <code>deps.edn</code> file or user level configuration.</p> <pre><code>:aliases\n{\n  :env/test\n  {:extra-paths [\"test\"]}\n}\n</code></pre>"},{"location":"testing/unit-testing/cider-test-deps-edn-projects/#terminal-repl-uis-with-nrepl","title":"Terminal REPL UIs with nREPL","text":"<p>Use <code>cider-connect</code> to connect to the Clojure REPL process started in a terminal window with the following command:</p> <pre><code>clojure -M:env/test:repl/cider-clj\n</code></pre> <p>Use the <code>:repl/rebel-nrepl</code> alias to also run a Rebel UI for the REPL in the terminal.</p> <pre><code>clojure -M:env/test:repl/rebel-nrepl\n</code></pre>"},{"location":"testing/unit-testing/cider-test-deps-edn-projects/#alias-to-run-a-simple-terminal-ui-repl-with-nrepl-support","title":"Alias to run a simple Terminal UI REPL with nREPL support","text":"<p>Run a REPL using nREPL server that starts an nREPL server, enabling CIDER to connect via <code>cider-connect-clj</code></p> <pre><code> :repl/cider\n  {:extra-deps {nrepl/nrepl                {:mvn/version \"0.9.0\"}\n                cider/cider-nrepl          {:mvn/version \"0.27.4\"}}\n   :main-opts  [\"-m\" \"nrepl.cmdline\"\n                \"--middleware\" \"[cider.nrepl/cider-middleware]\"\n                \"-i\"]}\n</code></pre>"},{"location":"testing/unit-testing/cider-test-deps-edn-projects/#hintheadless-repl","title":"Hint::Headless REPL","text":"<p>Remove the <code>\"-i\"</code> if a headless (non-interactive) REPL is required, useful if only interacting with Clojure code via the nREPL connected editor.</p>"},{"location":"testing/unit-testing/cider-test-deps-edn-projects/#alias-to-run-a-rebel-repl-with-nrepl-support","title":"Alias to run a Rebel REPL with nREPL support","text":"<p>Rebel readline provides a rich terminal UI with nrepl server , enabling CIDER to connect via <code>cider-connect-clj</code></p> <pre><code>  :repl/rebel\n  {:extra-deps {nrepl/nrepl                {:mvn/version \"0.9.0\"}\n                cider/cider-nrepl          {:mvn/version \"0.27.4\"}\n                com.bhauman/rebel-readline {:mvn/version \"0.1.4\"}}\n   :main-opts  [\"-m\" \"nrepl.cmdline\"\n                \"--middleware\" \"[cider.nrepl/cider-middleware]\"\n                \"-i\"\n                \"-f\" \"rebel-readline.main/-main\"]}\n</code></pre> <p>{% endtabs %}</p>"},{"location":"testing/unit-testing/cider-test-deps-edn-projects/#hint-practicalliclojure-deps-edn-contains-common-tools-and-aliases","title":"Hint:: practicalli/clojure-deps-edn contains common tools and aliases","text":"<p>practicalli/clojure-deps-edn contains aliases for all aspects of Clojure development with the CLI tools.</p>"},{"location":"testing/unit-testing/cider-test-deps-edn-projects/#using-cider-connect","title":"Using Cider Connect","text":"<p>Start the REPL in a terminal including the <code>test</code> directory and starting an nREPL server for CIDER to connect too.</p> <pre><code>clojure -M:env/test:repl/cider\n</code></pre> <p>Alternatively, use a rich terminal UI for the REPL using Rebel Readline which will also start an nREPL server for Cider to connect too.</p> <pre><code>clojure -M:env/test:repl/rebel\n</code></pre>"},{"location":"testing/unit-testing/cider-test-deps-edn-projects/#using-cider-jack-in","title":"Using CIDER jack-in","text":"<p><code>.dir-locals.el</code> file can define aliases which are always included during <code>cider-jack-in</code>.</p> <p>Add the variable <code>cider-clojure-cli-aliases</code> with a names of one or more alias names, which are from either the project <code>deps.edn</code> file or the user level <code>deps.edn</code> configuration.</p> <p><code>SPC p e</code> creates or opens an existing <code>.dir-locals.el</code> file for the current project.</p> <pre><code>((clojure-mode . ((cider-clojure-cli-aliases . \":env/test\"))))\n</code></pre> <p>Remember to <code>SPC b R</code> (<code>revert-buffer</code>) on an existing project buffer, or open a file from the current project, to force Emacs to load in any changes to a <code>.dir-locals.el</code> file.</p>"},{"location":"testing/unit-testing/cider-test-deps-edn-projects/#hintproject-configuration-with-dir-localsel","title":"Hint::Project configuration with <code>.dir-locals.el</code>","text":"<p>Project level configuration section contains many example configurations that can be set via <code>.dir-locals.el</code> file.  Remember to <code>revert-buffer</code> an existing project buffer or open a new buffer to load in changes from the <code>.dir-locals.el</code> file.</p>"},{"location":"testing/unit-testing/cider-test-deps-edn-projects/#edit-the-jack-in-command","title":"Edit the jack-in command","text":"<p><code>SPU u , '</code> uses the Emacs universal argument with <code>sesman-start</code> and displays the command line to be run.</p> <p>Add <code>:env/test</code> directly after the <code>-M</code> flag and before the <code>:cider/nrepl</code> alias</p> <p></p> <p><code>SPC u</code> is the Spacemacs equivalent of <code>C-u</code> in Emacs.</p>"},{"location":"testing/unit-testing/cider-test-deps-edn-projects/#checking-the-jack-in-command","title":"Checking the jack-in command","text":"<p><code>SPC b m</code> opens the messages buffer and the full command should be shown in the messages history.</p> <p></p>"},{"location":"testing/unit-testing/configure-cider-test-runner/","title":"Configure CIDER test runner","text":"<p>Configure how the CIDER test runner operates</p> <ul> <li>Test reports on success</li> <li>Automatically running tests</li> <li>Custom test namespaces</li> <li>Macros to define tests</li> </ul>"},{"location":"testing/unit-testing/configure-cider-test-runner/#display-test-report-on-success","title":"Display Test Report on Success","text":"<p>By default the test report is displayed only when there are test failures and subsequent test runs. Configure <code>cider-test-show-report-on-success</code> to true to show the report buffer even if tests have never failed.</p> <p>In the Clojure layer config: <pre><code>(clojure :variables\n        cider-test-show-report-on-success t)\n</code></pre></p> <p>Or in <code>dotspacemacs/user-config</code> <pre><code>(setq cider-test-show-report-on-success t)\n</code></pre></p>"},{"location":"testing/unit-testing/configure-cider-test-runner/#cider-automatic-test-running","title":"CIDER Automatic Test Running","text":"<p>, T t (<code>cider-auto-test-mode</code>) toggles automatic test.</p> <p>, e b evaluates the current buffer and automatically runs the CIDER test runner using all tests for that namespace</p> <p><code>cider-auto-test-mode</code> variable configures the state of automatic testing</p> <p>In the Clojure layer config: <pre><code>(clojure :variables\n        cider-auto-test-mode 1)\n</code></pre></p> <p>Or in <code>dotspacemacs/user-config</code> <pre><code>(cider-auto-test-mode 1)\n</code></pre></p>"},{"location":"testing/unit-testing/configure-cider-test-runner/#custom-test-namespaces","title":"Custom Test Namespaces","text":"<p>By convention test namespaces follow that of the src namespaces, with a <code>-test</code> postfix, e.g. <code>practicalli.app-main</code> source namespace will have a matching <code>practicalli.app-main-test</code> test namespace.</p> <p>Configure the variable <code>cider-test-infer-test-ns</code> to call a function that takes the current namespace and returns the matching test namespace (which may be the same as the current namespace).</p> <p>In this example the CIDER test runner look for <code>practicalli.test-app-main</code> instead of <code>practicalli.app-main-test</code></p> <pre><code>(defun cider-custom-test-ns-fn (ns)\n  \"For a NS, return the test namespace, which may be the argument itself.\nThis uses the convention of prefix 'test-' to the namespace name.\"\n  (when ns\n    (let ((prefix \"test-\"))\n      (if (string-prefix-p prefix ns)\n          ns\n        (concat prefix ns)))))\n\n(setq cider-test-infer-test-ns #'cider-custom-test-ns-fn)\n</code></pre>"},{"location":"testing/unit-testing/configure-cider-test-runner/#macros-used-to-define-tests","title":"Macros Used to Define Tests","text":"<p>CIDER test runner will not recognize individual tests that are not defined by deftest or defspec,</p> <p>Customize the variable <code>cider-test-defining-forms</code> and add forms for CIDER to recognize as individual test definitions.</p>"},{"location":"testing/unit-testing/re-run-tests-from-test-report-buffer/","title":"Re run tests from test report buffer","text":""},{"location":"testing/unit-testing/re-run-tests-from-test-report-buffer/#re-run-test-from-test-results-buffer","title":"Re-run test from  test results buffer","text":"<p>A test report is only generated once any of the tests fail for the current REPL session.  Once a test report has been created, further test runs will update the report.  The test report is displayed in a new buffer.</p> <p></p> <p>Tests can be re-run from the <code>*cider-test-results*</code> buffer, although this buffer does not support Evil normal state (PR's welcome).</p> <p>C-z to switch to Emacs state in order for these keybindings to work.</p> Keyboard shortcut Description g Run test at point. n Run tests for current namespace. l Run tests for all loaded namespaces. p Run tests for all project namespaces. This loads the additional namespaces. f Re-run test failures/errors. M-p Move point to previous test. M-n Move point to next test. t or M-. Jump to test definition. d Display diff of actual vs expected. e Display test error cause and stacktrace info."},{"location":"testing/unit-testing/refactor-unit-tests/","title":"Refactor Unit Tests","text":"<p>Before changing the names of tests defined with deftest, those tests should be un-evaluated, i.e. removed from the running REPL.  Otherwise the tests will keep running and provide incorrect reports.</p> <p>, e u with the cursor on a <code>deftest</code> expression will remove that test from the REPL.  A prompt in the mini-buffer is shown to confirm the removal.</p> <p>The name used for any <code>deftest</code> can be un-evaluated, assuming it has been evaluated at least once.  So if a test is failing in the test report but does not exist in the code it can be removed without having to restart the REPL.</p>"},{"location":"testing/unit-testing/running-tests/","title":"Running unit tests in Cider","text":"<p>SPC p a switches between source and test buffers.</p> <p>, t n run all tests in the current namespace.  This also loads any changes to those tests.</p> <p>, t a run all tests.  If tests are changed or added, , e f to evaluate those tests to add them to the REPL or , e b on any test buffers that have changed.</p> <p>The results of running the tests are displayed in the mini-buffer, showing the number of tests run and how many passed and failed.</p> <p></p>"},{"location":"testing/unit-testing/running-tests/#hintspacemacs-loads-current-buffer-before-running-tests","title":"Hint::Spacemacs loads current buffer before running tests","text":"<p>Run unit tests from the buffer that has changes or new tests.  Otherwise, ensure all buffers with changes have been evaluated to ensure the tests run with the right src and test code.</p>"},{"location":"testing/unit-testing/running-tests/#using-test-selectors-to-run-specific-tests","title":"Using Test Selectors to run specific tests","text":"<p>Using the universal argument before calling CIDER test runner will prompt for test selector filters, running only those tests that match the selector inclusions/exclusions.</p> <p>SPC t a runs all the tests in a project.</p> <p>SPC u SPC t a prompts for test selectors and runs the matching tests in a project.</p> <p>SPC t l runs all tests currently evaluated in the REPL.</p> <p>SPC u SPC t l prompts for test selectors and runs the matching tests currently evaluated in the REPL.</p> <p>CIDER first prompts for the test selectors to include:</p> <p></p> <p>Then prompts for the test selectors to exclude.  A warning displays in the power line if CIDER does not find the test selector name.</p> <p></p>"},{"location":"testing/unit-testing/running-tests/#running-tests-in-the-repl-buffer","title":"Running tests in the REPL buffer","text":"<p>, to open the REPL command menu and select run tests</p>"},{"location":"testing/unit-testing/running-tests/#auto-unit-test-mode","title":"Auto Unit Test Mode","text":"<p>, T t to toggle auto test mode</p> <p>, e b will evaluate the current buffer and automatically run all tests.</p>"},{"location":"testing/unit-testing/running-tests/#hintcider-test-report-only-created-on-test-failure","title":"Hint::CIDER test report only created on test failure","text":"<p>To show a test report each time tests are run, add the variable <code>cider-test-show-report-on-success t</code> in the <code>clojure</code> layer list of the <code>.spacemacs</code> file. <pre><code>     (clojure :variables\n              cider-test-show-report-on-success t)\n</code></pre></p>"},{"location":"testing/unit-testing/writing-unit-tests/","title":"Writing Unit Tests with clojure.test","text":"<p>Unit tests are centered on assertions, testing if something returns a true or false value.</p> <p><code>is</code> function is the simplest assertion and the most common.  It checks to see if an expression given is true and if so then the assertion passes.  If the value is false then that assertion fails.</p> <p><code>as</code> provides a way to run the same assertion with different values, testing the same function with a collection of arguments.  This provides a clean way to test a function without lots of repetition.</p> <p><code>testing</code> is a macro to group multiple assertions together, providing a string in which to describe the context the assertions are testing.  The well worded context string is invaluable for narrowing down on which assertions are failing.</p> <p><code>deftest</code> is a collection of assertions, with or without <code>testing</code> expressions.  The name of the deftest should be the name of the function it is testing with <code>-test</code> as a postfix.  For example, the function <code>practicalli.playground/calculator</code> would have a <code>deftest</code> called <code>practicalli.playground-test/calculator-test</code></p>"},{"location":"testing/unit-testing/writing-unit-tests/#simple-example","title":"Simple Example","text":"<pre><code>(deftest public-function-in-namespace-test\n  (testing \"A description of the test\"\n    (is (= 1 (public-function arg)))\n    (is (predicate-function? arg))))\n</code></pre>"},{"location":"testing/unit-testing/writing-unit-tests/#testing-assertions-with-a-data-set","title":"Testing assertions with a data set","text":"<p>The <code>are</code> macro can also be used to define assertions, especially when there would otherwise be multiple assertions that only differ by their test data.</p> <p>An <code>are</code> assertion defines the arguments to the test, the logic of the test and a series of test data. <pre><code>(are [x y] (= x y)\n              2 (+ 1 1)\n              4 (* 2 2))\n</code></pre></p> <p>This is equivalent to writing</p> <pre><code>         (do (is (= 2 (+ 1 1)))\n             (is (= 4 (* 2 2))))\n</code></pre> <p>In this example 5 assertions are almost the same, so are a candidate to be refactored using the <code>are</code> macro. <pre><code>(testing \"Tens to number words\"\n  (is (= '(\"zero\" \"ten\")\n         (sut/character-sequence-&gt;word-sequence dictionary/digit-&gt;word '(\\0 \\1 \\0))))\n  (is (= '(\"zero\" \"eleven\")\n         (sut/character-sequence-&gt;word-sequence dictionary/digit-&gt;word '(\\0 \\1 \\1))))\n  (is (= '(\"zero\" \"twenty\" \"zero\")\n         (sut/character-sequence-&gt;word-sequence dictionary/digit-&gt;word '(\\0 \\2 \\0))))\n  (is (= '(\"zero\" \"twenty\"\"one\")\n         (sut/character-sequence-&gt;word-sequence dictionary/digit-&gt;word '(\\0 \\2 \\1))))\n  (is (= '(\"zero\" \"forty\" \"two\")\n         (sut/character-sequence-&gt;word-sequence dictionary/digit-&gt;word '(\\0 \\4 \\2)))))\n</code></pre></p> <p>Refactor the assertions using are simplifies the code, making it simpler to change further and extend with more data. <pre><code>(testing \"Tens to number words\"\n  (are [words numbers]\n    (= words (sut/character-sequence-&gt;word-sequence dictionary/digit-&gt;word numbers))\n      '(\"zero\" \"ten\")           '(\\0 \\1 \\0)\n      '(\"zero\" \"eleven\")        '(\\0 \\1 \\1)\n      '(\"zero\" \"twenty\" \"zero\") '(\\0 \\2 \\0)\n      '(\"zero\" \"twenty\"\"one\")   '(\\0 \\2 \\1)\n      '(\"zero\" \"forty\" \"two\")   '(\\0 \\4 \\2))\n</code></pre></p>"},{"location":"testing/unit-testing/writing-unit-tests/#project-examples-code-challenges-with-unit-tests","title":"Project Examples: Code challenges with unit tests","text":"<ul> <li>practicalli/codewars-guides - deps.edn projects</li> <li>practicalli/exercism-clojure-guides - Leiningen projects</li> </ul>"},{"location":"testing/unit-testing/writing-unit-tests/#reference","title":"Reference","text":"<p>For full details, visit the API for <code>clojure.test</code></p>"},{"location":"writing-emacs-lisp/","title":"Writing Emacs Lisp","text":"<p>You do not need to learn how to write Emacs Lisp to use thousands of commands that Spacemacs already provides.</p> <p>If you do want to do some extensive customisation, beyond creating a simple layer, then here are some useful resources to get started.</p>"},{"location":"writing-emacs-lisp/#example-writing-an-interactive-game","title":"Example: writing an interactive game","text":"<p>{% youtube %} https://youtu.be/gk39mp8Vy4M?autoplay=1loop=1</p>"}]}